{
  
    
        "post0": {
            "title": "W3 Video",
            "content": "Positive psychology Behavior change: - How we form habits . How we become happier over time | .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/09/w3-video.html",
            "relUrl": "/2022/09/09/w3-video.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "If-Else Lesson",
            "content": "If . if is a conditional statement. It tests &quot;if the condition is true, then run the code within the if statement&quot; . The if statement syntax is like this: . if (condition) { // code } . Types of conditions: . a &lt; b | a &lt;= b | a &gt; b | a &gt;= b | a == b | a != b | true | false | . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to the current weather (rainy) // if the weather is rainy, remind the user to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . . If-else . The syntax for if-else statements are as follows: . if (condition) { // run this if condition is true } else { // run this if condition is false } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; // assign variable weather to sunny // if weather is rainy, remind to bring an umbrella // otherwise, no need to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else { System.out.println(&quot;No need for an umbrella!&quot;); } } } IfElseLesson.main(null) . No need for an umbrella! . . Else-if . else-if statements are written like this: . if (condition) { // run if condition is true } else if (condition 2) { // run if condition is false and condition 2 is true } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to rainy // if weather is rainy, remind to bring an umbrella // if weather is sunny, remind to bring a hat if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . Setting variable weather to sunny: . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring a hat! . . Putting It All Together . #1 . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;cloudy&quot;; // assign variable weather to cloudy // because it is cloudy, print that the weather is nice if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } else { System.out.println(&quot;Nice weather outside!&quot;); } } } IfElseLesson.main(null) . Nice weather outside! . #2 . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input if (questionNum == 100) { // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); // if answer is correct, add 100 points to score System.out.println(answer); if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below } else if (questionNum == 200) { System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } } else if (questionNum == 300) { System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } } else if (questionNum == 400) { System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } } else if (questionNum == 500) { System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . THIS DOES NOT WORK APPARENTLY . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); if (questionNum == 100) { System.out.println(&quot;What programming language does this code run in? &quot;); answer = sc.next(); System.out.println(answer); if (answer == &quot;java&quot;) { score += 100; } } else if (questionNum == 200) { System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } } else if (questionNum == 300) { System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = sc.next(); System.out.println(answer); if (answer == &quot;if-else&quot;) { score += 300; } } else if (questionNum == 400) { System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } } else if (questionNum == 500) { System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = sc.next(); System.out.println(answer); if (answer == &quot;Spring&quot;) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 100 What programming language does this code run in? java Your total score is: 0 . Switch case statements . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input switch (questionNum) { case 100: // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); // if answer is correct, add 100 points to score if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below case 200: System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } case 300: System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } case 400: System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } case 500: System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions (this is important, remember this for later). . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; 1 . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; 2 . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Now how is this useful? . Remember this? . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) 3 . 1. Reference↩ . 2. Reference↩ . 3. Reference↩ . Example in Coding . because what would De Morgan&#39;s law be if it&#39;s not applicable to coding? . This code reads: If it&#39;s not sunny and it&#39;s not cloudy and it&#39;s not snowy and it&#39;s not windy, then bring an umbrella. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!sunny &amp;&amp; !cloudy &amp;&amp; !snowy &amp;&amp; !windy) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . This code is kind of messy, huh? . How about this code? . This code reads: If it&#39;s not sunny or cloudy or snowy or windy, then bring an umbrella. . Better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!(sunny || cloudy || snowy || windy)) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . . A more complicated example... . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // huh??? if (!(!nopineappOnPizza &amp;&amp; !pineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! . Is this better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // if no pineapple on pizza or yes pineapple on pizza... // since there is a pineapple on pizza, then pineapple on pizza is good if ((!pineappOnPizza || !nopineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/07/w3-if-else.html",
            "relUrl": "/java/2022/09/07/w3-if-else.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Console Menu",
            "content": "The following is a console that incorporates our group&#39;s calculators. . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;2 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;3 - Vidhi&#39;s Print a Random Number&quot;); System.out.println(&quot;4 - Modulus Calculator&quot;); System.out.println(&quot;5 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); break; case 2: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 3: Scanner input5; System.out.println(&quot;This option will print a random number from 0 to 1&quot;); double random = (double) (Math.random()); System.out.println(random); break; case 4: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 5: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Lily&#39;s Average Calculator 2 - Vidhi and Riya&#39;s Temp Convertor 3 - Vidhi&#39;s Print a Random Number 4 - Modulus Calculator 5 - William&#39;s F=ma calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Lily Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 22.0 degree Celsius is equal to 295.0 in Kelvin 3: This option will print a random number from 0 to 1 0.2392119484083327 4: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 5: F=ma calculator Enter the mass: 5.0 Enter the accel: 2.0 Force calculator 5.0*2.0=10.0 0: Goodbye, World! . My menu . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Average Calculator&quot;); System.out.println(&quot;2 - Z Score Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; if (selection == 0) { System.out.print(&quot;Goodbye, World!&quot;); quit = true; } else if (selection == 1) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); } else if (selection == 2) { double x = 0; double avg = 0; double standardDeviation = 0; double z = 0; Scanner sc2 = new Scanner(System.in); System.out.println(&quot;Enter x: &quot;); x = sc2.nextDouble(); System.out.println(x); System.out.println(&quot;Enter avg: &quot;); avg = sc2.nextDouble(); System.out.println(avg); System.out.println(&quot;Enter standard deviation: &quot;); standardDeviation = sc2.nextDouble(); System.out.println(standardDeviation); z = (x-avg)/standardDeviation; System.out.println(&quot;Your z score is: &quot; + z); } else { //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Average Calculator 2 - Z Score Calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: Enter x: 10.0 Enter avg: 5.0 Enter standard deviation: 2.0 Your z score is: 2.5 0: Goodbye, World! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/05/w2-menu.html",
            "relUrl": "/java/2022/09/05/w2-menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Jekyll and Liquid",
            "content": "this took me hours to research btw . While I was setting up my fastpages blog, I noticed this interesting line of code in index.html. . . And I thought, hey, this is interesting, what does {{site.baseurl}} do? . After some googling, I found that {{site.baseurl}} wasn’t something in Markdown. Turns out it’s actually Jekyll syntax. . So what does {{site.baseurl}} do? . Basically, baseurl is the directory under the URL of the website. 1 So for example, this blog’s URL is lwu1822.github.io, and the baseurl is fastpages. . So I can just do ![]({{site.baseurl}}/images/diagram.png). Saves a lot of typing. . Pretty cool, huh? 😊 . . Something else I encountered while making this post . To type {{site.baseurl}} in this Markdown file, apparently you have to use the {% raw %} and {% endraw %} template around {{site.baseurl}} . 2 . Like this: . {% raw %} {{site.baseurl}} {% endraw %} . . Also something I encountered just as I was writing the line above . Notice how I was able to write {% endraw %} above? Unfortunately, it’s not that simple to just type it directly into your IDE, like this: . :warning: Warning: Don’t do this, it will break your code: . {% raw %} {% endraw %} {% endraw %} . The reason is because the first {% endraw %} will be interpreted as ending the {% raw %} template. . So if you want to be able to type {% endraw %} in Markdown, you need to do the following 3: . Create a variable, in this example, I’ll name it openTag, and assign it to {%: . {% assign openTag = &#39;{%&#39; %} . | Use the {{ openTag }} variable anytime you want to type text that contains {% in it. . For example, to type the text {% endraw %}, you would do: . {{ openTag }} endraw %} . | . Even more something that I learned . Apparently, you also can’t type {% directly in the IDE, which would also break your code (took me a long time to debug （ꐦ𝅒_𝅒）) . Instead, you have to type: {{ openTag }} . . Things for me to contemplate on: . I noticed on the provided Fastpages Notebook Blog Post, you can add an image without the baseurl. For example, you can specify an image with ![](images/diagram.png). Not sure why that works, but I’m guessing it has something to with Jupyter Notebooks. . . baseurl &#8617; . | Liquid template language &#8617; . | I took the steps from here but quite frankly, I found the explanation a little confusing, so I simplified it as much as I could in this blog &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "relUrl": "/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Alumni Panel",
            "content": "Takeaways . From today’s alumni panel event, I learned about the significance and prevalence of computer science. The skills learned in AP CSA and AP CSP are very applicable and can be used to solve real world problems. However, programmers face many difficulties in their coding career. For instance, Colin described about the constant error messages that are bound to show up while coding, which can leave a negative effect and greatly decrease motivation. One thing that really struck out to me, however, was the importance of google. Basically, any programming question you have can be solved by this very magical tool. Furthermore, PBLs not only occur in this class, but can also be found in colleges. For instance, Colin mentioned that in UCSD’s mechanical engineering, students will be tasked with a hands on project in their freshmen and senior year. The same methodologies still apply - scrum team and agile. Furthermore, not only is coding applied in CS majors, it is also used in other majors. For instance, Allison mentioned that stats majors are also required to program in R. A really cool example of where you could apply your coding knowledge was scripting. If you’re ever frustrated at repeating the same redundant tasks over and over again, hey- maybe try some automation :). Last but not least, a very important part of the event was the discussion of internships. Some tips that were brought up was to build a resume and to create some personal projects that demonstrate your passion for coding. Additionally, interaction with professors and TAs are a good idea to find research and programming opportunities. . . Notes that I took during the event . Challenge with compsci: . Error msg -&gt; keep motivation? | GOOGLE | Ego: People brag about internship Focus on own path | Work on own project | . | Learn computer theory in college (it’s different from high school programming) | Motivation: There’s always someone better than you | Don’t cut corner: Have a mindset to go above and beyond | Getting started There is no rigid structure telling you what to do | Don’t get restricted by your plan - be flexible | . | . Any PBL scenario in college? . UCSD mechanical engineering: 1 hands on project freshman and senior year Need to use scrum and agile flow | . | Study in group and work with other people | Learn what’s the best method to study | . Have you applied CS in your major if your major is not CS? . Convert data type, copy paste, manually -&gt; write script!! ;) | Matlab for mechanical student | Problem solving logic, working with Matlab | Jupyter notebook for technical paper | Stats majors: Program in R | . Existing college students, have you had a job with school/professor . Make a resume, talk with other students, find a way to stand out, what makes you unique? | Interact with a professor, ask if they have space in their labs | Interact with TAs | . Job/internships . Code Ninjas | Northrop Grumman | . Personal projects? . Companies look for personal projects | Have 2 or 3? | Visual projects are great | . Internships: . Have a resume | Know when to apply to internships, companies hire in September + November the year before the next summer | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Primitives",
            "content": "public class AvgCalculator{ public static void main(String[] args) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); } } AvgCalculator.main(null) . Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Mean: 3.0 . What I learned . Primitives include: int, double, boolean . String is not a primitive. . Code: Integer: int a . Double: double a . Boolean: boolean a . String: String a . To enable input, make sure to import the Scanner lirbary: import java.util.Scanner; . . Useful stuff learned while creating calculator: . if and while statements: . If the variable is an integer/double, you can use == . If the variable is a string, you must use .equals . Example: &quot;foo&quot;.equals(variableName) . . Playing with Code from Primitive Data Types . Variables . public class test { public static void main(String[] args) { int x = 5; System.out.println(&quot;This is an integer: &quot; + x); } } test.main(null) . This is an integer: 5 . Input + Output . import java.util.Scanner; public class Scanning { public static void main(String[] args) { Scanner test = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int input = test.nextInt(); System.out.println(input); System.out.println(&quot;Your number is: &quot; + input); } } Scanning.main(null); . Enter a number: 3 Your number is: 3 .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Code snippets",
            "content": "Collapsible Note: do not tab in HTML unless you want whitespace Also very important: Make sure to put an extra line after ``, otherwise, Markdown will not show. [Reference](https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab) &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/28/good-code-snippets.html",
            "relUrl": "/misc/2022/08/28/good-code-snippets.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "code.org Notes",
            "content": "Lesson 2 . Class header: . public class ClassName { } . Main method: . public static void main(String[] args) { } . Lesson 3 . Create an object with: ClassName objectName = new ClassName(); . Lesson 6 . Subclass: Inherits the behaviors and attributes of a superclass . Inheritance: The subclass inherits the behaviors and attributes of the superclass . To extend a class, type: public class [subclass] extends [superclass] . Inside the extended class, you need to create the constructor signature for the subclass, and type super() to call the superclass constructor and methods. . Like this: . public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Lesoon 7 Methods . Methods are defined with: . public void [methodName]() { // code } . These can be later called with an object. . For example, in Lesson 7 #2, I created a method called turnRight(). This is then called by with myPainterPlus.turnRight(); . . . Lesson 9 Loops . While loops: while (condition()) {} . Lesson 10 Conditionals . If statements: if (condition()) {} . If else statements: . if (condition()) { // code } else { // code } . To specify something not happening, use !. . Ex: if (!condition()) {} // if condition is false, proceed with if statement . Lesson 12 Decomposition and Design . Important: Code readability is very important. Also, a method should contain few lines of code (around 1-10). Each method should only be used to perform one task. .",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org.html",
            "relUrl": "/code.org/2022/08/28/code-org.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "code.org Answers",
            "content": "Lesson 2 . 2.1 . EXCEPTION error. No .java files are provided. Probably due to wrong file name. | No, wrong file name. | Yes, Java files must have the .java extension. | There is an error. The p in myPainter.move(); must be capitalized. | Yes, code is case-sensitive. | 2.2 . error: reached end of file while parsing | Need another } to finish code. . Yes, each opening curly brace needs a closing curly brace. | error: not a statement and error: &#39;;&#39; expected, meaning the command syntax is wrong. | Correct syntax: mypainter.move(); . See #3 | Yes, the error is fixed. | 3.1 . Painter starts at top left grid and faces east. | Stops at row 2 column 3, faces south. | Painter moves forward but does not paint because he has ran out. | Error because did not add () at Painter; | Added () |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org-answer.html",
            "relUrl": "/code.org/2022/08/28/code-org-answer.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "APEL Notes",
            "content": "APEL . There are three areas of writing that APEL focuses on: rhetorical analysis, synthesis, and argumentative. . In Tri 1, we are learning rhetorical analysis. . Rhetorical analysis . Thesis . According to Collegeboard’s rubric, the thesis can be located anywhere within your essay. However, it is suggested to write your thesis somewhere in the intro paragraph, preferably as the last sentence. . The thesis must consist of two parts: a purpose verb and the author’s message .",
            "url": "https://lwu1822.github.io/fastpages/apel/2022/08/28/apel.html",
            "relUrl": "/apel/2022/08/28/apel.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Tools",
            "content": "Basic commands . ls: Lists the contents in the current directory . cd [file path]: Move to a directory . pwd: List your current directory . echo &quot;Moving to home directory with the cd command&quot; cd echo &quot;What directory am I in?&quot; pwd echo &quot;Moving to my vscode directory&quot; cd /home/lwu1822/vscode echo &quot;What directory am I in?&quot; pwd echo &quot;What files are within this directory?&quot; ls . Moving to home directory with the cd command What directory am I in? /home/lwu1822 Moving to my vscode directory What directory am I in? /home/lwu1822/vscode What files are within this directory? APCSA APCSP fastpages spring_portfolio test . Variables . To create variables, simply assign a value to a variable name. . Ex: x=5 . Reference variables with $[var] . text=&quot;Hello World!&quot; echo &quot;$text&quot; . Hello World! . Note: Single and double quotes are different! . See example below . text=&quot;Hello World!&quot; echo &quot;$text&quot; echo &#39;$text&#39; . Hello World! $text . Python versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Java versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Playing with some Regex . echo &quot;Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39;&quot; # What this bash script does: # Checks if there is output after grep (searching) for packages starting # with &#39;j&#39; and ending with &#39;s&#39; # First lists all conda packages, then filters to only show the package # names (excludes Version and Build Channel) with the cut command # The grep command uses some fun Regex # ^ means that the character following it (in parenthesis) must start at the # beginning # .*: &quot;.&quot;&quot; means any character, &quot;*&quot; means match the character before it # any number of times -&gt; &quot;.*&quot; means match any character any number of times # $: Character before it (s) must be at the end if conda list | cut -d &quot; &quot; -f 1 | grep &quot;^j.*s$&quot; ; then : else echo &quot;No packages starting with &#39;j&#39; and ending with &#39;s&#39;&quot; fi . Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39; jupyterlab_pygments jupyterlab_widgets . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/lwu1822/.local/share/jupyter/kernels/bash java /home/lwu1822/.local/share/jupyter/kernels/java javascript /home/lwu1822/.local/share/jupyter/kernels/javascript python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . Conda check for Jupyter . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . (I have checked Slack :)) . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$check&quot; fi . python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . . Hacks . To verify tools: . For many packages, you can type the name of the package and then --version, or you can grep from the dpkg -l list . java --version dpkg -l | cut -d &quot; &quot; -f 3 | grep -E &quot;^(java)&quot; . Python 3.9.12 java-common . To verify Conda, you can use the conda list command. I&#39;m not going to do this here because the output is huge, but you can see above where I used regex and grep to search for the specific things I want . main_dir=vscode/ fastpages_dir=fastpages/ cd cd $main_dir/$fastpages_dir ls # git pull origin master . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word .",
            "url": "https://lwu1822.github.io/fastpages/bash/2022/08/26/tools.html",
            "relUrl": "/bash/2022/08/26/tools.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "LaTeX",
            "content": "LaTeX . Fastpages also supports LaTeX! So cool! . This is said to be the most beautiful math equation: . Ready? . Woah $e^{i pi} + 1 = 0$",
            "url": "https://lwu1822.github.io/fastpages/latex/2022/08/25/latex.html",
            "relUrl": "/latex/2022/08/25/latex.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Jupyter notebook post",
            "content": "Intro . Hi! This post will just be me playing around and explaining how to use Jupyter notebook in VSCode. I don&#39;t know about you, but VSCode&#39;s documentation is super long and wordy, so I&#39;ll try to use simple English and incorporate some humor within :) . This page will also include some tips and tricks that I found while using Jupyter Notebook, or some things that I struggled with. . Information on this page will also based on the descriptions on this page . What is Jupyter Notebook?? . For the long and wordy explanations that pop up when you google: Jupyter Notebook . Jupyter Notebook is an environment that allows you to create cells that can contain various types of code, including Python and Markdown. . Now, you might be wondering, why do I need this? . Well, there&#39;s a few reasons: . Jupyter Notebook is interactive. It allows you to move your program around. | What if you want to test a portion of your code? Instead of running the entire thing, you could use Jupyter Notebook to run code snippets. | . . Below is some testing of using Jupyter Notebook. I will add explanations of what these do later. . woah hidden input . print(&quot;peekaboo&quot;) . . peekaboo .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/08/21/jupyter-notebook-1.html",
            "relUrl": "/jupyter/2022/08/21/jupyter-notebook-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Python",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/python.html",
            "relUrl": "/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Java",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloStatic.main(null); . Hello World! .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/java.html",
            "relUrl": "/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "First post",
            "content": "Post #1 . This is a test for my first post. . Hi and welcome :) . Check out my About Me to learn more about me. . This is also a test in blue font. . Why does Comic Sans get so much hate :( .",
            "url": "https://lwu1822.github.io/fastpages/markdown/2022/08/19/post-1.html",
            "relUrl": "/markdown/2022/08/19/post-1.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi, and welcome to my blog! . My name is Lily Wu. I’m a junior at Del Norte High School. . My interests are in STEM, which include programming, cybersecurity, and math. . I’m passionate about learning, and I love to play around with code. . In my free time, I also love to read. Feel free to give me book suggestions! :) . Contacts: . Email: lwu1822@gmail.com . Github . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lwu1822.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Notes . Primitives . Primitives: Includes the data types of int, double, and boolean. . Note: String is not a primitive . Basic code: . Data types: . int [var], double [var], boolean [var], and String [var] . Input: . Scanner [var] = new Scanner(System.in); : Create a scanner object with a name of [var], set it equal to System.in, which is what the user inputs on the keyboard. .",
          "url": "https://lwu1822.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Weekly Work",
          "content": "Week 0 . First post . | Java . | Python . | Jupyter Notebook . | . Week 1 . Bash: Check if tools are installed . | Learnings from code.org . | Java Primitives . | . Week Assignments . 0 First post Java Python Jupyter Notebook . Week Assignments .",
          "url": "https://lwu1822.github.io/fastpages/weekly-work/",
          "relUrl": "/weekly-work/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board . Unit 1: Primitive Types . Exam Weighting: 2.5%-5% . Primitives | . Unit 2: Using Objects . Exam Weighting: 5%-7.5% . Unit 3: Boolean Expressions and if Statements . Exam Weighting: 15%-17.55% . Unit 4: Iteration . Exam Weighting: 17.5%-22.5% . Unit 5: Writing Classes . Exam Weighting: 5%-7.5% . Unit 6: Array . Exam Weighting: 10%-15% . Unit 7: ArrayList . Exam Weighting: 2.5%-7.5% . Unit 8: 2D Array . Exam Weighting: 7.5%-10% . Unit 9: Inheritance . Exam Weighting: 5%-10% . Unit 10: Recursion . Exam Weighting: 5%-7.5% .",
          "url": "https://lwu1822.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lwu1822.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}