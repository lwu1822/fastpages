{
  
    
        "post0": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/09/CSP-w25-unit2_3.html",
            "relUrl": "/2023/03/09/CSP-w25-unit2_3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . FileNotFoundError Traceback (most recent call last) /home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb Cell 5 in &lt;cell line: 22&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; if __name__ == &#34;__main__&#34;: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; # print parameter supplied image &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; green_square = image_data(images=[{&#39;source&#39;: &#34;Internet&#34;, &#39;label&#39;: &#34;Green Square&#34;, &#39;file&#39;: &#34;green-square-16.png&#34;}]) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; image_display(green_square) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; # display default images from image_data() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; default_images = image_data() /home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb Cell 5 in image_display(images) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; def image_display(images): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; for image in images: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2023-03-06-CSP-w25-unit2_2.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; display(Image(filename=image[&#39;filename&#39;])) File ~/anaconda3/lib/python3.9/site-packages/IPython/core/display.py:957, in Image.__init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata, alt) 955 self.unconfined = unconfined 956 self.alt = alt --&gt; 957 super(Image, self).__init__(data=data, url=url, filename=filename, 958 metadata=metadata) 960 if self.width is None and self.metadata.get(&#39;width&#39;, {}): 961 self.width = metadata[&#39;width&#39;] File ~/anaconda3/lib/python3.9/site-packages/IPython/core/display.py:327, in DisplayObject.__init__(self, data, url, filename, metadata) 324 elif self.metadata is None: 325 self.metadata = {} --&gt; 327 self.reload() 328 self._check_data() File ~/anaconda3/lib/python3.9/site-packages/IPython/core/display.py:992, in Image.reload(self) 990 &#34;&#34;&#34;Reload the raw data from file or URL.&#34;&#34;&#34; 991 if self.embed: --&gt; 992 super(Image,self).reload() 993 if self.retina: 994 self._retina_shape() File ~/anaconda3/lib/python3.9/site-packages/IPython/core/display.py:353, in DisplayObject.reload(self) 351 if self.filename is not None: 352 encoding = None if &#34;b&#34; in self._read_flags else &#34;utf-8&#34; --&gt; 353 with open(self.filename, self._read_flags, encoding=encoding) as f: 354 self.data = f.read() 355 elif self.url is not None: 356 # Deferred import FileNotFoundError: [Errno 2] No such file or directory: &#39;images/green-square-16.png&#39; . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/06/CSP-w25-unit2_2.html",
            "relUrl": "/2023/03/06/CSP-w25-unit2_2.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "import java.util.Scanner; Scanner sc = new Scanner(System.in); System.out.println(&quot;First binary?&quot;); String binary = sc.nextLine(); System.out.println(binary); System.out.println(&quot;Second binary?&quot;); String binary2 = sc.nextLine(); System.out.println(binary2); int num = Integer.parseInt(binary, 2); int num2 = Integer.parseInt(binary2, 2); int sum = num + num2; System.out.println(&quot;Total: &quot; + Integer.toBinaryString(sum)); . First binary? 11 Second binary? 10 Total: 101 . import java.util.Scanner; Scanner sc = new Scanner(System.in); System.out.println(&quot;First binary?&quot;); String binary = sc.nextLine(); System.out.println(binary); for (int i = 0; i &lt; binary.length(); i++) { System.out.println(i); System.out.println(binary.split) } . First binary? 100 0 1 2 .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/06/CSA-w25-dataType.html",
            "relUrl": "/2023/03/06/CSA-w25-dataType.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "AP CSA Tri 2 Final Project Blog",
            "content": "The theme of our project was ciphers. Our website consists of features that include a login, an area where the user can view/change their settings, decryption, learning about ciphers, trivia, notes, and quiz. . . The parts that I worked on was the login, JWT, CRUD for users, roles, and part of the log . In the sections below, I will document what I did to create these features and some interesting things that I learned. . Login and JWT . This was the part that was the most frustrating for me. I spent around ten hours trying to get JWT to work. I kept having CORS errors, and I tried a variety of fixes such as changing Access-Control-Allow-Origin in SecurityConfig.java on the backend, and continuously editing the Nginx file. . I guess I can say that what I gained from this was really understanding the Nginx file and JWT. . In the end, I was able to fix the CORS errors by asking Mr. Mortensen. I learned that to save a cookie on the frontend, the most important thing was that you need to redirect to another page. By looking through the debugger in Chrome Dev Tools, apparently the cookie is only added in once the frontend page changes. . This is the critical piece of code on frontend: . . CRUD for users . The part that I worked a main part on this project is users, and I implemented CRUD features onto users. . First is creating users. On the login page, there is a button that allows a user to create an account: . . After that, you can create a user. Enter in an email, password, name, and birthday. I implemented error checking on the frontend through Javascript. My code checks to see the values of the password and confirm password input box, and compares them. If they are not the same, a message is displayed. . function signup() { document.getElementById(&quot;passwordMsg&quot;).innerHTML = &quot;&quot;; var password = document.getElementById(&quot;password&quot;).value; var password2 = document.getElementById(&quot;password2&quot;).value; console.log(password); console.log(password2); if (password == password2) { console.log(&quot;Match&quot;); createUser(password); } else { console.log(&quot;No match&quot;); var p = document.createElement(&quot;p&quot;); var msg = document.createTextNode(&quot;Passwords do not match. Please try again&quot;); p.appendChild(msg); document.getElementById(&quot;passwordMsg&quot;).appendChild(p); } } . A little extra research that I did was to find a way to input a valid date of birth. Clearly, no one is born in the future. Using Javascript, I created a Date object and obtained the first parts of the current date in YYYY-MM-DD format. I then set an attribute on the date input box and used the date as the max day. . As a result, the calendar looks like this: . . The backend also shows that the user that I created (username: z@gmail.com) was successfully created: . . After the user is created, you can login with the new credentials. This is what the homepage looks like, and you can see that on the right, a cookie was sucessfully created. . . . The second aspect of users that I implemented was Read. For read, I accessed the backend url of https://crimebusters.tk/api/findEmail/. This was something that I spent quite some effort in creating, because originally, I did not know how to get information from the cookie. . In the end, I used some code from JwtRequestFilter.java that obtained information from the cookie using HttpServletRequest. All I needed to get was the email. I could then search through the JpaRepository using the email and obtain the person object. With the person object, I had access to all of the information. I could then use getters to obtain user information to display on the Settings page, such as the name, birthday, and user roles. . In the image below, I circled the code in red of how I got the email and subsequently created the person object. . . . In the update section of my user, I sent a POST request to the backend to update a specific user. My code on the backend looks like this: . Optional&lt;Person&gt; person1 = repository.findById(person.getId()); //SO THIS IS THE PIECE OF CODE TO CHANGE TYPES!!!!!! Person person2 = person1.orElse(null); //debugging System.out.println(&quot;person2: &quot; + person2); //update user info only if info is provided if (person.getEmail() != null) { person2.setEmail(person.getEmail()); } if (person.getName() != null) { person2.setName(person.getName()); } if (person.getPassword() != null) { String password = person.getPassword(); password = BCrypt.hashpw(password, BCrypt.gensalt()); person2.setPassword(password); } if (person.getDob() != null) { person2.setDob(person.getDob()); } if (person.getLoginStatus() != null) { person2.setLoginStatus(person.getLoginStatus()); } return repository.save(person2); . A few things that I learned: . First of all, repository.findById(person.getId()) returns an Optional, unlike findByEmail which returns a Person object. This stumped me for awhile because I really really wanted to get the Person object since I couldn’t get information from an Optional. After StackOverflowing, I found that I could create another Person object (person2), and then use person1.orElse(null) to get the object. What’s next is basically using setters to update info onto person 2. The JpaRepository then saves this person 2 object (which is the original person object but modified), and that’s how update works! | I feel like I had something else I learned but all of a sudden I can’t remember. I’ll post here when I do remember (hopefully) (Ohhh I remember now, it had something to do with GetMapping and bad output. I’ll post about this tomorrow because it’s currently 11:28 and I want to sleep :() | . . The last thing that I have is Delete. Sending a delete request using fetch didn’t work for me, so instead, I changed my endpoint on the backend to Get, and sent a get request. . Roles . Now onto the fun stuff. Roles required me to do a lot of outside research. . First of all, the many to many relationship. The tricky part about roles is that sometimes, you want a user to have multiple roles. As a result, you can’t just make a simple roles variable and save it in the database. You need a many to many relationship (because one user can have many roles and a role can have many users). . I watched a helpful video that showed how to implement many to many in Spring Boot. . In my Person POJO: . @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL) @JoinTable( name = &quot;person_person_roles&quot;, joinColumns = @JoinColumn(name = &quot;person_id&quot;, referencedColumnName = &quot;id&quot;), inverseJoinColumns = @JoinColumn(name = &quot;person_role_id&quot;, referencedColumnName = &quot;id&quot;) ) private Set&lt;Personrole&gt; personrole; . In my Personroles POJO: . @ManyToMany(mappedBy = &quot;personrole&quot;, fetch = FetchType.LAZY) private Set&lt;Person&gt; person; . So anyways, at the end, my database looked like this: . . This person_personroles table is called a Join Table. Why do we need this table? The reason is because a many to many relationship actually requires two sided one to many relationships. In this example, the same person_id (29) can be mapped to different person_roles. . As a result, while z@gmail.com only has the role User, . . user a@gmail.com has both the role User and Admin. . . . Now onto the cool part. When the user is not logged in, I created an anonymous user that doesn’t have permission to access certain pages. This was achieved on the backend file of PersonDetailsService.java. By finding the role of the user through JWT, either user, admin, or anonymous role is assigned to the user: . person.getPersonrole().forEach(role -&gt; { //loop through roles //authorities.add(new SimpleGrantedAuthority(role.getEmail())); //create a SimpleGrantedAuthority by passed in role, adding it all to the authorities list, list of roles gets past in for spring security if (role.getRole().equals(&quot;user&quot;)) { authorities.add(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;)); } if (role.getRole().equals(&quot;admin&quot;)) { authorities.add(new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;)); } if (role.getRole().equals(&quot;anonymous&quot;)) { authorities.add(new SimpleGrantedAuthority(&quot;ROLE_ANON&quot;)); } }); . Now in SecurityConfig.java, I added an antMatcher that only permits admin and users to access the log page: . .antMatchers(&quot;/api/log/getlog&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;USER&quot;) . Therefore, when I go to the logs page, I have a cookie (for the anonymous user), but there is a message telling me that I must login. . .",
            "url": "https://lwu1822.github.io/fastpages/2023/02/27/APCSATri2Blog.html",
            "relUrl": "/2023/02/27/APCSATri2Blog.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Night at the Museum",
            "content": "Night at the Museum takes place at the end of every trimester to showcase students’ work from various classes. . The project that I viewed in AP CSP during N@tM is the cat cafe project. The theme of the project was really creative (I might be biased because I like cats :3) and the aesthetics were very pleasing. I played the Purrdle game and left a review on their website. . . . . The other exhibitions that I went to were the 3D Animations classroom and the Photography classroom. . The picture below is one of the projects I liked the most from the 3D Animations classroom. . . This was my favorite photo from the photography class. I liked this photo because of its attention to detail on the orange: . .",
            "url": "https://lwu1822.github.io/fastpages/life/2023/02/26/NatM.html",
            "relUrl": "/life/2023/02/26/NatM.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "5.3-5.6 Blog",
            "content": "5.3 . Different social media platforms are focused towards different age groups. For instance, Facebook is more oriented towards older people while TikTok is focused towards younger age groups. Therefore, content may be biased on these two platforms because they are more suited towards what the age group would like. Although the content may be different, it may be alright for these two platforms to be oriented towards different age groups because two different generations have different preferences and customs. Therefore, being on different platforms would allow them to access content that they are more used to. . Virtual assistants have female voices probably because they are viewed as more soothing. They may also follow typical steoreotypes. There are options to change the virtual assitant voice to a male voice, so that is good. . Algorithms are created on social media platforms in order to keep users on the website. They can find what topics the user is interested in and keep showing posts releated to that topic. . From the HP Computers video, I learned the importance of ensuring that development can be accessible to everyone. Additionally, lots of testing should be conducted in order to make sure that the product does not have any flaws and is not biased. . 5.4 Crowdsourcing . A crowdsourcing idea could be to randomly select computer science students across all AP CSP classes and conduct a survey/test. . With Del Norte, a random sample could again be selected. This ensures a sample that is more representative of the population and can reduce bias. . A data could be a feedback form that allows different people to enter of what they thought about our project. . 5.5 Legal and Ethical Concerns . Notes about licences: Creative Commons Zero v1.0 Universal: All copyright is waived | Open Source MIT License: Allowed to use code in a project (even in your private, closed source code), as long as you give credit to the original creator | Open Source GPL License: Allowed to use code in a project but only in public projects | . | From this lesson, I learned about the importance of copyright. We should check the licenses before we use a piece of software. I think Creative Commons is the license that allows the most access to a person’s work and that making intellectual work open to people is beneficial because it can help people learn. However, I believe it is also important to allow people to retain their rights to what they have created and that credit should be given to the original creator. | Our frontend and backend repositories use the GPL-3.0 license. We chose this license because it allows people to copy the project and use it for educational purposes and learning from it. However, if they distribute it, they need to include the source code (what we made) and give us credit for it. Furthermore, they also need to release it with the GPL-3.0 license. | 5.6 Safe Computing . In our projects, we take in people’s username and password. It is important to encrypt the passwords so that these information are not accessible by a third party. | I’m not a famous person, so I don’t have that much information on the internet. However, a lot of platforms that I use probably have various information about me. This can be seen when you sign up on a website and they provide a long list of terms and agreements that probably includes a statement about how they can save your personal information and use it for various purposes. | Good passwords include a variety of characters and symbols and also upper and lowercase letters. Multifactor authentication requires multiple authentication methods, which can prevent people from logging in just because they have the password. | Symmetric key uses one key for encryption and decryption while assymetric cryptography uses a pair of public and private keys to encrypt and decrypt (different keys are used for the two processes) | When we created our fastpages, we needed to generate SSH keys (which I think uses assymetric cryptography because we generated a public and private key) | I probably encountered phishing schemes by accidently clicking on a spam email. |",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/02/06/CSP-5.3-blog.html",
            "relUrl": "/misc/2023/02/06/CSP-5.3-blog.html",
            "date": " • Feb 6, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "MC Corrections",
            "content": "My score is 48/52. . The question that I got wrong was #9. I thought that num = str.substring(0, 3).length(). Turns out the actual length of num is the entire length of “CompSci”, which is 7. . Another question that I got wrong was #12. I learned that with System.out.println, even if the elements in the ArrayList was changed, System.out.println will print out the original elements, and then change it. Therefore, the first line is “Alex, Bob, Carl”, rather than “Alex, Alex, and Alex” (after change). . I also got #19 wrong. I picked that the method finds the index of the first occurrence of the string. However, since the for loop runs until the end of the string, the last occurrence of the string will be the output. . I got #40 wrong because I selected II and III. However, II is wrong because if the ArrayList’s elements are removed, some elements will be swapped. III works because the loop moves from right to left; therefore, if some elements are removed, the elements to the left of it are not affected. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/31/w20-CSA-MCCorrection.html",
            "relUrl": "/misc/2023/01/31/w20-CSA-MCCorrection.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "AP CSP Trimester 2 Project Plan",
            "content": "The project that I will make for MyToolkit is MyClasses, a feature that can allow students to search for classes and see others’ review of them. . CollegeBoard Criteria . Program Purpose and Function: The purpose of the program is to help students in their course selection process. The function will be to let the student search for the class that they are interested in taking and show a list of reviews that other students have left for the class. Input will be the class that the student searches for and output will be the reviews for that class. . Data Abstraction: In my search feature, I created a list with possible class names. The name of my list is dnClasses, and the data in the list is all of the class names. This allows the search to find if the class that the student inputs exists or not, and also allows the program to see if the class that the student entered matches to the class in the list without regard to case. By ensuring that the class that the student entered is valid, the program can proceed to find class reviews on the backend and allow the student to view the reviews that they wish to see. . . . Managing complexity: The list stores all of the classes at Del Norte. This manages complexity because the program can search through the list to see if one of the classes matches the one that the student enters. Without the list, each class name would have to be stored in a variable and individually compared with the class that the student enters. . Proceduaral Abstraction: The function name is findClass(classInput). This contributes to the functionality of the program by deciding if the program should get data of the class that the student inputted on the backend or if it should output an error message. . . Algorithm Implementation: The function name is findClass(classInput). The function takes in the name of the class that the student is searching for, and repeatedly compares it to the class names in the dnClasses list to see if one of the lists matches (iteration). If there is a match (selection), the classFound boolean variable is set to true. This way, if the class was not found, an error message could be displayed in HTML on the website. Otherwise, if the class was found, the next function, getClassData, would be called. . Testing: The two calls are findClass(&quot;AP Biology&quot;) and findClass(&quot;test&quot;). The first call sends a valid class name, AP Biology. Therefore, the first section of the code is executed and the variable classFound is set to true. The second call sends an invalid class name. classFound is false, and an error message is displayed on the screen. . . The theme of our project is school. Our website consists of features that include a login, an area where the students can input their schedules, gpa, class reviews, and tasks. . . The parts that I worked on was the class review . In the sections below, I will document what I did to create these features and some interesting things that I learned. . Create . The first section is the submit review. Students can enter in a class name, difficulty, hours of homework, days between tests, memorization level, and comments. . . This sends a fetch request using POST to the backend. On the backend, I have an API endpoint called CreateClassReview. This endpoint takes in the body, which includes the username, class name, etc., and creates a ClassReview object and adds it into the database. . Read . This is the place where the student can search for a class review. On the frontend, the class that the student searches for is taken in as a variable. This variable is used to query for the class reviews that are fetched from the backend. All classes are returned from the backend; however, on the frontend, the program searches through each class name until it finds a matches. . Update . My update review consists of a section where students can edit their reviews. On the backend, the code is basically the same as my create endpoint. However, I call the update() method instead of create(), which saves the same object instead of creating a new object. . Delete . Students can also delete a class review. On the backend, the program takes in the username and class name, searches for the specific database entry that corresponds to the students’ input, and then calls the delete() method. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/30/w20-tri2ProjectPlan.html",
            "relUrl": "/misc/2023/01/30/w20-tri2ProjectPlan.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "MC Corrections",
            "content": "My score is 49/50. . The question that I got wrong was #45. The question asks for the benefit of a heuristic approach. I answered that it shouldbe used when the problem can be solved in a reasonable time. The correct answer was that if it cannot be solved in a reasonable time. This is correct because a heuristic approach is used to simplify a complex problem. Usually, these problems would be difficult to solve in a short amount of time. . . Another question that gave me a little bit of trouble is #15. The main issue I had with this problem was that I didn’t understand the code CAN_MOVE. After some time, I realized that CAN_MOVE just means that there was not an obstacle in the specific direction, and that allowed me to select D) as the answer. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/30/w20-CSP-MCCorrection.html",
            "relUrl": "/misc/2023/01/30/w20-CSP-MCCorrection.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "5.2 Blog",
            "content": "People can empower themselves through the digital world by using the resources that are offered digitally. This can come in a variety of forms; for instance, people can use resources online to learn about topics that would have been very hard to access. Other people have also been able to take advantage of social media and create content that many people love. . | Those who are empowered can share their knowledge to help others. This is relevant to the digital world, because anyone can create a blog and start writing what they know. At Del Norte, we can empower each other by working together as a team so that we are able to improve together. We can also help out each other when one is confused. . | It could be possible that red tape can block digital empowerment because lots of paperwork can make things harder to accomplish. For example, in companies, paperwork is needed before something can be developed. This could hinder digital empowerment as projects need to be first approved before they can be created. . |",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/24/CSP-5.2-blog.html",
            "relUrl": "/misc/2023/01/24/CSP-5.2-blog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "5.1 Blog",
            "content": "Coding: The benefits of coding include creating applications that can solve a variety of problems and help improve people’s lives. Computer programming has greatly changed our way of life and often in a good way by making tasks more convenient. However, the downside of code is that it can be utilized to exploit other systems. Coding languages such as Python and JavaScript are commonly used to compromise a system or application and steal data. . | E-books: E-books allow the process of reading to become more convenient. Because people who have devices typically carry them everywhere they go, E-books provide the opportunity to read anywhere. This saves the weight of carrying a book that may be bulky. E-books also helps save trees as no paper is required for a digital book. The downside of E-books is that it increases the amount of screen time that people are exposed to. Especially in a time when we are increasing our device usage time, E-books are another contribution to this. . | Robots: The benefits of robots are that they can be used to either do tasks that simplify a person’s life, or they can be used to do tasks that would be extremely difficult or impossible for a person to do. The danger of robots is that if robots are programmed with AI, there could be potential dangers. This can be seen in movies where robots destroy the human civilization because they have a mind of their own. . | . I agree that games and social media can become very addictive. After all, these forms of entertainment are intentionally developed to capture a person’s attention and keep them on the media. For example, social media is filled with algorithms that identify a person’s interests and select posts and advertisements that align with it. This keeps users on the platform for an extremely long period of time as they scroll away endlessly. In addition, games are also addictive in that they allow people to escape from their real life struggles and immerse themselves in a world in which they can be the hero. The tasks in games are also achievable, providing the dopamine rush that many people desperately crave. This can be dangerous because these media often worsen a person’s escapism, because they can be the person they can not achieve in real life. |",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/24/CSP-5.1-blog.html",
            "relUrl": "/misc/2023/01/24/CSP-5.1-blog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "66 MC questions blog",
            "content": "This is my score: . . I spent about 3 hours on the MC (lost track of time because I took breaks in between) . I got #1 wrong because I thought that num in the for each loop would change the value of the element in the array. However, num is actually assigned a copy of the element, so althought the values of num are changed, the actual elements inside the array do not change. . I got #32 wrong because it made sense to me that lenCount had to reset if the elements were not consecutive anymore. However, I failed to realize that if lenCount was not larger than maxLen, lenCount still needed to be reset, which would not have been the case by selecting D. . No context for #36. . I answered wrong on #50 because I did not realize that i &lt; num1 would mean that 10 is excluded. Therefore, to print 10, the correct answer would be D, which used 20 as the bound. . I gto #52 wrong because the answer of adding a return type to the method looked very appealing. However, this does not fulfill the requirements of the method, which is to update the value of price. Therefore, price += surcharge would be the correct answer. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/23/w19_mc.html",
            "relUrl": "/misc/2023/01/23/w19_mc.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Performance Task Examples Scoring 3",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. •describes the input and output of the program demonstrated in the video. | 1 | The purpose is described accurately with it being entertainment. The function is described in great detail, and the input/output is also correct with input being rock/paper/scissors and output being the outcome status of the game. | . Data Abstraction | 0 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The second picture does not show the data in the list being accessed in the program. | . Managing Complexity | 1 •includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The student explained that without the list, many if statements would be needed to determine if the computer’s output is rock/paper/scisccors. Note CollegeBoard’s rubric states that the list does not manage complexity because if statements would have been “just as easy” to “maintain as lists” | . Procedural Abstraction | 0 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 0 | The student did not describe how the function contributes to the overall function of the program. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The code includes sequencing, selection (if else statements), and iteration (recursive function rpsGame). The steps of the algorithm is also described in great detail. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | Two calls were created which resulted in different outputs (win or lose). | . Reflection: The discrepancy in my scoring is for Managing Complexity. I thought that the list would simplify the code because many if statements would be needed if a list was not used. However, CollegeBoard states that if statements can also manage complexity in this case. . Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The student earned the point by explaining that the purpose is to help you recognize new words and improve your vocabulary. The function was also stated, and the various inputs are described in detail and the output of winning or losing is also noted. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point by including a picture of the list letOfGuessWord and where the elements are called. The contents of the list are also described. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student describes how they managed complexity by noting that a list can store all of the letters in the words. Otherwise, they would need 5 variables to store the letters. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | A procedure is provided with a parameter. The description of the procedure helps explain how it contributes to the functionality of the program. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | Selection (if staements) and iteration (for loops) are included in the procedure. The steps on how the program checks to see if the letter that user inputted is present in the word and whether the user wins or loses is described. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | Two calls are made to the procedure, which have different results of true or false. | . Submission 3 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The purpose is explained (helping with memorization). The function also describes how the states game works, and the input and output are provided. | . Data Abstraction | 0 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The code does not show where data is used from stateList. Note: CollegeBoard also mentions that stateList only contains the name of the state while the student claims that it contains other information such as flag and population. | . Managing Complexity | 0 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The explanation is too vague on how complexity is managed. The student only states that the code “would be extraordinarily complex”, but does not explain how. | . Procedural Abstraction | 0 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 0 | The procedure does not include a parameter, and the second picture does not include a call to the procedure. | . Algorithm Implementation | 0 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 0 | The procedure does not include iteration. | . Testing | 0 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 0 | The calls are not to the updateScreen function, which does not have a parameter. | . Submission 4 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The purpose and function are explained correctly. Lots of input and output are described with the arrow keys for movement and spacebar to catch fish. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The list is provided in the first picture and the explaination clearly states that the elements of the list is to tell the player what type of fish they got. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student correctly explains how the list decreases the amount of variables that would have been needed to keep track of the type of fish caught. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The procedure (clone movement) is shown with the call to the procedure. The student clearly explained how this procedure contributes to the function of the program by stating that it makes the game harder because the fish moves randomly. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The procedure contains selection (if else statement) and iteration (repeat until loop). The steps of the algoirthm are also explained in great detail. | . Testing | 0 •Testing • describes two calls to the selected procedure identified in written response 3c. &lt;Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 0 | The student did not describe the arguments that were passed as parameters. It seems that they were calling other procedures that were not in the picture. | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/22/w19_PT_ExScore3.html",
            "relUrl": "/misc/2023/01/22/w19_PT_ExScore3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "View/Frontend",
            "content": "Invite List . Confirm that you are coming . Name? Confirm . . Link to frontend on Github Pages . Our theme for our project is Chinese New Year. The page that I worked on is an invite list. The invite list is in the from of a table that is generated with information from JSON. For example, an entry looks like this: {&quot;_name&quot;: &quot;Zhang Tianming&quot;, &quot;_age&quot;: 18, &quot;_phoneNum&quot;: &quot;858-123-5692&quot;, &quot;_coming&quot;: true}. Using JavaScript, a table is created with a for each loop that takes the name, age, phone number, and if the guest is coming or not. . This is what the table looks like: . I also created an input box where a user can type their name to confirm that they are coming (Read in CRUD). The JavaScript takes in the name of the person from the input box and then finds the element in the table that has the same id. The code then changes the element’s coming status from Not decided to Yes. . Input box: . Coming status changed: .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/17/w18_wireframe.html",
            "relUrl": "/misc/2023/01/17/w18_wireframe.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Performance Task Examples Scoring 2",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | The student did not describe the purpose of the program. Instead, the student wrote about the program’s function. However, in the portion where they should talk about the function, they wrote something similar to the purpose. The students also wrote the wrong input and output. Input should be the animal and output should be correct/incorrect. | . Data Abstraction | 0 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The student did not include an image that shows the data in the list being used. | . Managing Complexity | 0 •includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The student did not earn the point because the response states that the list manages complexity by “making it more complex”. That is the opposite of what the array is intended to do. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 0 | The response earned the point because the procedure (function) and its functionality is described. Note Collegeboard scored this a 0 because how the algorithm contributes to the overall functionality is not described. | . Algorithm Implementation | 0 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 0 | The response does not describe the algorithm clearly. Although it does summarize what the algorithm does, it is too general. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure and results in either getting a point or a strike. | . Reflection: The discrepancy in my scoring is for Procedural Abstraction. I gave a point because I thought that the student described the functionality of the procedure, but College Board’s rubric states that the procedure has to contribute to the overall function of the program. . Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The student earned the point because the purpose is well stated. It is used for the user to explore their creativity. Next, the function is also stated, and input and output are explained. The input is the words that the user types and the output is the poems. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point because the two photos specify a list that is called in the program. The response also describes what the data in the list is used for (nouns that will be used to generate the poem) | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student manages complexity with a list by explaining that the list is used to store the nouns so that using a random number generator would make selecting the nouns easier than if each noun corresponded to a variable. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The student’s response explained how the procedure contributes to the functionality of creating a poem that has articles or no articles. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response contains if statements and a while loop, and the steps of the algorithm are explained in detail (how a string of words for the poem is created) | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure, creating a poem with articles and one without. | . Submission 3 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | The purpose is not explained. The response focused more on what the program does. The function and input and output are described correctly. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The response includes a picture of a list (firstCharacterList) and a picture of where it is called in a function. The response also explains what firstCharacterList contains. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student manages complexity with a list by explaining that the list helps by being able to iterate through each element to add the values. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The procedure is shown along with the code that calls the procedure. The student’s response explained how this procedure is used to find the winner. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response contains if else statements and a for loop, and the steps of the algorithm are explained (how the winner of a hypothetical battle between two Marvel characters would be determined) in great detail | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure, where the 1st result is a winner and the 2nd result is a tie. | . Submission 4 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The purpose is explained correctly (testing critical thinking skills). The function is also described, and the inputs and outputs are included in the response. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The response includes the list and what it contains, and a picture of the list being called. According to CollegeBoard, the student did not earn the point because although the length of the list is called, the data in the list is not. | . Managing Complexity | 0 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The list is not the only way to manage complexity because a counter variable could be used. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The procedure is shown along with the code that calls the procedure. The student’s response explained how this procedure is used to determine if the user typed in the correct word or letter positions. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response contains if else statements and a repeat 8 times loop, and the steps of the algorithm are explained with what screens will show up at the end. | . Testing | 0 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 0 | The student did not identify the different arguments that is being passed into the procedure. | . Reflection: I gave the student a point in Data Abstraction while Collegeboard gave 0. For Data Abstraction, I thought the student earned the point because they provided a list and a piece of code that got the size of the list. However, CollegeBoard scored this a 0 because the contents of the list need to be accessed. . Although I have not created a specific idea of what I would like to make for my Create Task, from the CollegeBoard rubric, I learned that the program must have input and output, a procedure (function) that includes selection and iteration (and sequencing), and a list that contains data that needs to be used in the code. Overall, the program also should have a purpose, or a problem that the program intends to solve. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/16/w18_PT_ExScore2.html",
            "relUrl": "/misc/2023/01/16/w18_PT_ExScore2.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ZqW...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$ITK...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$pJg...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$nem...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$lS9...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ZqW...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$ITK...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$XvO...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$nem...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$lS9...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZqW4t5yoj5ON3PTm$843bbb7c6dd5582b02aad1bae5f5294d67e76b5594aa4305d685e7ab46421cf5&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$ITKsEacgAbllOj3S$3d7d511f506e3881474a1c75ee99bbf2320851d274044d7121ee3e2e58186d60&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$XvO0WETpmRB0w4Ul$befe10a301f99834e185fa52708e10025f53023979b8ad0cade78cbc80fdfa28&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$nemiLsFRxDPAqGLS$65f9f7da9ccf7c026d8228b6f1791146b39263690eade790df0ac6839504c629&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$lS9RgGSFGfLzDog9$21a8e1de5bb27b3fff50f4ffcc670d1d3b82833ef84db5aa3f6fb7d064e42c1a&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZqW4t5yoj5ON3PTm$843bbb7c6dd5582b02aad1bae5f5294d67e76b5594aa4305d685e7ab46421cf5&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$ITKsEacgAbllOj3S$3d7d511f506e3881474a1c75ee99bbf2320851d274044d7121ee3e2e58186d60&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$XvO0WETpmRB0w4Ul$befe10a301f99834e185fa52708e10025f53023979b8ad0cade78cbc80fdfa28&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$nemiLsFRxDPAqGLS$65f9f7da9ccf7c026d8228b6f1791146b39263690eade790df0ac6839504c629&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$lS9RgGSFGfLzDog9$21a8e1de5bb27b3fff50f4ffcc670d1d3b82833ef84db5aa3f6fb7d064e42c1a&#34;}] toby . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . This was my code originally before the helper hack was present (updated code below). . from datetime import date class Person: def __init__(self, name, classOf, dob): self.name = name self.classOf = classOf self.dob = dob @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property def age(self): #age = self.calculate_age(self.dob) age = self.calculate_age(self.dob) return age def calculate_age(self, born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) if __name__ == &quot;__main__&quot;: u1 = Person(name=&#39;test&#39;, classOf=2024, dob=date(2006, 1, 1)) print(&quot;Name: &quot; + str(u1.name)) print(&quot;Class of: &quot; + str(u1.classOf)) print(&quot;Age: &quot; + str(u1.age)) . Name: test Class of: 2024 Age: 17 . This is the updated code with the helper hack. . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, classOf, uid, password, dob): self._name = name # variables with self prefix become part of the object, self.classOf = classOf self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def age(self): #age = self.calculate_age(self.dob) age = self.calculate_age(self.dob) return age def calculate_age(self, born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Lily Wu&#39;, classOf=2024, uid=&#39;lwu&#39;, password=&#39;12345&#39;, dob=date(2006, 7, 24)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;Getter for age: &quot; + str(u1.age)) . JSON ready string: {&#34;name&#34;: &#34;Lily Wu&#34;, &#34;uid&#34;: &#34;lwu&#34;, &#34;dob&#34;: &#34;07-24-2006&#34;, &#34;age&#34;: 16} Raw Variables of object: {&#39;_name&#39;: &#39;Lily Wu&#39;, &#39;_classOf&#39;: 2024, &#39;_uid&#39;: &#39;lwu&#39;, &#39;_password&#39;: &#39;sha256$E3Rl6FOYWJAIeKOi$f8763dc23b63830211ad41a0d4c135152a16d673c78e3a200383ed98c1f3eee4&#39;, &#39;_dob&#39;: datetime.date(2006, 7, 24)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;calculate_age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Lily Wu, uid=lwu, password=sha256$E3Rl6FOYWJAIeKOi$f8763dc23b63830211ad41a0d4c135152a16d673c78e3a200383ed98c1f3eee4,dob=2006-07-24) Getter for age: 16 . Class for project . Our group project&#39;s theme is Chinese New Year. The class that I created is Food, and the attributes include name, category, and time (amount of time to prepare the dish). I created getters and setters for each attribute. . I created a list called foods that adds food objects. I then created a loop that allows the user to input a food and find what type of dish it is (category) or how much time it takes to preapre it (time). This works by locating the food&#39;s corresponding object in the list and calling its attributes (category or time). . class Food: def __init__(self, name, category, time): self.name = name self.category = category self.time = time @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def category(self): return self._category @category.setter def category(self, category): self._category = category @property def time(self): return self._time @time.setter def time(self, time): self._time = time if __name__ == &quot;__main__&quot;: foods = [] dumplings = Food(&quot;dumplings&quot;, &quot;staple&quot;, 120) foods.append(dumplings) steamedFish = Food(&quot;steamed fish&quot;, &quot;meat&quot;, 120) foods.append(steamedFish) springRolls = Food(&quot;spring rolls&quot;, &quot;appetizer&quot;, 40) foods.append(springRolls) noodles = Food(&quot;noodles&quot;, &quot;staple&quot;, 50) foods.append(noodles) broccoliAndBeef = Food(&quot;broccoli and beef&quot;, &quot;vegetables, meat&quot;, 25) foods.append(broccoliAndBeef) print(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) option = input(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) print(option) while option != &quot;finish&quot;: if option == &quot;category&quot;: print(&quot;Name?&quot;) name = input(&quot;Name?&quot;) print(name) for foodObj in foods: if foodObj.name == name: print(&quot;The category of &quot; + name + &quot; is: &quot; + foodObj.category) if option == &quot;time&quot;: print(&quot;Name?&quot;) name = input(&quot;Name?&quot;) print(name) for foodObj in foods: if foodObj.name == name: print(&quot;The time to prepare &quot; + name + &quot; is: &quot; + str(foodObj.time) + &quot; mins&quot;) print(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) option = input(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) print(option) . Food category or time? Enter &#39;finish&#39; to finish. category Name? dumplings The category of dumplings is: staple Food category or time? Enter &#39;finish&#39; to finish. time Name? dumplings The time to prepare dumplings is: 120 mins Food category or time? Enter &#39;finish&#39; to finish. category Name? noodles The category of noodles is: staple Food category or time? Enter &#39;finish&#39; to finish. time Name? noodles The time to prepare noodles is: 50 mins Food category or time? Enter &#39;finish&#39; to finish. finish .",
            "url": "https://lwu1822.github.io/fastpages/2023/01/10/w18_CSP_OOP.html",
            "relUrl": "/2023/01/10/w18_CSP_OOP.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Performance Task Examples Scoring",
            "content": "•Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. . Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | The student did not describe the purpose of the program. This is an interesting point to take note of, because the connotation of function and purpose are quite similar. However, College Board’s standards explain that the “purpose must address the problem being solved or creative interest being pursued through the program.” | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point because two code segments are provided and identifies the list and what is stored in it. | . Managing Complexity | 0 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The student did not earn the point for this row simply because the list does not help manage complexity. You can replace the call to the list with a string. Something I learned from the rubric is that although a list can be used to manage complexity, this does not mean a list = manages complexity. It has to do something that otherwise would be more tedious to implement | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The response earned the point because the procedure (function) and its functionality is described. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response earned the point because the algorithm includes sequencing, selection, and iteration, and the algorithm is explained | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure | . Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The student earned the point because the purpose is well stated. It is used as entertainment. Next, the function is also stated, and input and output are explained. The input is the keys and mouse clicks. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point because two code segments are provided and identifies the list and what is stored in it. According to CollegeBoard, the first picture fulfills this row because it shows both accessing elements from the list and storing elements into the list. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student manages complexity with a list by explaining that the list is used to store 10800 items, which would be very inefficient to do so with variables. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The response earned the point because the procedure (function) and its functionality is described. The first picture displays the function name replaceList, taking in two parameters: current and replacement. The second picture displays the function being called with replaceList. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response earned the point because the algorithm includes sequencing, selection, and iteration, and the algorithm is explained. The selection is due to if else statements which are nested. The iteration occurs with the loop that repeatedly copies the elements of one list to another. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure. The replaceList function is called two times with different arguments, 1 and 2, and 2 and 1. | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/04/w17_PT_ExScore.html",
            "relUrl": "/misc/2023/01/04/w17_PT_ExScore.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Homework 3.17 - 3.18",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . Problem: Decision Problem: A problem with yes/no answer | Organization Problem: A problem with the goal of finding a best answer | . | Instance: Problem with specific input | Efficiency: How much computing you need for a problem to be resolved Polynomial Efficiency (Good): Proportional amount of time (linear) the more work you do | Exponential Efficiency (Bad): Exponential amount of time the more work you do (ex: double the amount of time) | . | Heuristic Approach: Finding a more efficient optimal solution | Decidable Problem: A decision problem with a solution that always outputs correctly | Undecidable Problem: A decision problem with no solution | . Notes . Code that performs the same task can have a different amount of time that it runs | The more functions you add, the more time it takes to run the code For example, an add function that converts toint and then tostr will take up more seconds than a function that merely adds the functions and returns the value to a print statement (because a print statement can print an integer if that is the only value) | Polynomial creates the least cycles (ex: 3x and (2x)^2) vs exponential which creates more cycles (ex: 3^x) | . . Undecidable problem: Give multiple answers or none | . . Challenge . Try and fix this ineficcient code! Only change the code between the two commented lines. Fully programmed solution will improve your grade, at a minimum show that you tried. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value,array): #-- min = 0 max = len(numlist) - 1 while max &gt;= min: mid = (min + max) // 2 if array[mid] == value: return True elif array[mid] &gt; value: max = mid - 1 else: min = mid + 1 return False #-- starttime = time.time() for i in range(100000): for i in range(len(valuelist)): x = isvalue(valuelist[i],numlist) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . 1.288701057434082 seconds . 3.18 Undecidable Problems . Notes . Undecidable problems occur when a paradox is created, for exaple, a program that produces an error, then reverses it, which results in no error. | . Real life example: Internet connections time out if a website does not load . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernardo&#39;:50 }, &#39;Westview&#39;:{ &#39;DelNorte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernardo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;DelNorte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernardo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;DelNorte&#39;:35, &#39;RanchoBernardo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;DelNorte&#39;:50 } } . Ver 1 . I don&#39;t know how to make the most efficient algorithm to find the best path. This is my code below, which uses nested for loops to find the shortest route to each location (while making sure that they haven&#39;t been reached yet). I also have multiple attempts below that worked and did not work to show that I did try many times (took me 2 hours to figure out lol) . def fastestroute(start,data): drivetime = 0 order = [] #CODE,CODE,CODE order.append(start) travelPlace2 = start for i in range (len(dataset) - 1): shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime drivetime += dataset[travelPlace2][&quot;DelNorte&quot;] start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) print(&quot;The route is: &quot; + str(order)) print(&quot;Total time is: &quot; + str(drivetime)) # &#39;dataset&#39; is the name of the nested key value pair . The route is: [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;, &#39;MtCarmel&#39;] Total time is: 105 . Ver 2 . This was actually my original attempt, which also works but is more inefficient because I copy pasted the for loop to find the shortest route to the locations multiple times. In the version above, I used a nested for loop so that I could reuse the same cold multiple times. . drivetime = 0 def fastestroute(start,data): global drivetime drivetime = 0 global order order = [] #CODE,CODE,CODE order.append(start) travelPlace2 = start shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) print(drivetime) drivetime += dataset[travelPlace2][&#39;DelNorte&#39;] print(drivetime) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . [&#39;DelNorte&#39;, &#39;Westview&#39;] Westview [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;] Poway [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;] RanchoBernardo [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;, &#39;MtCarmel&#39;] MtCarmel 85 105 . Some of my other attempts lol . These did not work but were part of my planning process. . drivetime = 0 def fastestroute(start,data): global drivetime drivetime = 0 global order order = [] #CODE,CODE,CODE order.append(start) travelPlace = start for i in range(4): initialPlace = list(dataset[travelPlace].values()[0]) for j in range(len(dataset[travelPlace])): while initialPlace in order: shortestTime = list(dataset[travelPlace].values())[0] travelPlace = list(dataset[travelPlace].keys())[0] search = list(dataset[travelPlace].keys())[j] if search not in order: if list(dataset[travelPlace].values())[j] &lt; shortestTime: shortestTime = list(dataset[travelPlace].values())[j] travelPlace = list(dataset[travelPlace].keys())[j] order.append(travelPlace) drivetime += shortestTime print(order) print(drivetime) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . [&#39;DelNorte&#39;, &#39;Westview&#39;] 15 [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;] 30 [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;, &#39;Westview&#39;] 45 [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;] 60 . drivetime = 0 def fastestroute(start,data): global drivetime drivetime = 0 global order order = [] #CODE,CODE,CODE order.append(start) mv(start) def mv(travelPlace): global drivetime shortestTime = list(dataset[travelPlace].values())[0] travelPlace = list(dataset[travelPlace].keys())[0] for j in range(len(dataset[travelPlace])): search = list(dataset[travelPlace].keys())[j] if find(search): if list(dataset[travelPlace].values())[j] &lt; shortestTime: shortestTime = list(dataset[travelPlace].values())[j] travelPlace = list(dataset[travelPlace].keys())[j] order.append(travelPlace) drivetime += shortestTime mv(travelPlace) print(order) def find(nextPlace): for i in range(len(order)): if nextPlace == order[i]: return False return True print(drivetime) print(order) #return(drivetime,order) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . RecursionError Traceback (most recent call last) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in &lt;cell line: 41&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; start = &#39;DelNorte&#39; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; data = dataset &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; fastestroute(start, data) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in fastestroute(start, data) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; #CODE,CODE,CODE &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; order.append(start) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; mv(start) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; order.append(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; drivetime += shortestTime &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(order) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; order.append(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; drivetime += shortestTime &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(order) [... skipping similar frames: mv at line 26 (2967 times)] /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; order.append(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; drivetime += shortestTime &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(order) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for j in range(len(dataset[travelPlace])): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; search = list(dataset[travelPlace].keys())[j] &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; if find(search): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; if list(dataset[travelPlace].values())[j] &lt; shortestTime: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; shortestTime = list(dataset[travelPlace].values())[j] /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in find(nextPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; def find(nextPlace): &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; for i in range(len(order)): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; if nextPlace == order[i]: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=31&#39;&gt;32&lt;/a&gt; return False RecursionError: maximum recursion depth exceeded while calling a Python object . def fastestroute(start,data): drivetime = 0 order = [] #CODE,CODE,CODE for i in range(len(dataset)): place = list(dataset.keys())[i] shortestTime = list(dataset[place].values())[0] travelPlace = &quot;&quot; for j in range(len(dataset[place])): if list(dataset[place].values())[j] &lt; shortestTime: shortestTime = list(dataset[place].values())[j] travelPlace = list(dataset[place].keys())[j] if travelPlace != &quot;&quot;: order.append(travelPlace) drivetime += shortestTime print(drivetime) print(order) #return(drivetime,order) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . 80 [&#39;Del Norte&#39;, &#39;RanchoBernrdo&#39;, &#39;Poway&#39;] . Grading: . Challenge Homework . .15 pts for attempt | .65 for attempt | . .20 pts for complete | .70 for complete | . .25 pts for above and beyond | .75 pts for above and beyond | .",
            "url": "https://lwu1822.github.io/fastpages/homework1718",
            "relUrl": "/homework1718",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 9",
            "content": "Team members: Lily Wu, William Wu, Vidhi Kulkarni, Riya Patil, Saathvika Ajith . Hack 1 . public class Cat { // two attributes protected boolean hasTail; protected int numLegs; // two argument constructor public Cat(boolean hasTail, int numLegs) { this.hasTail = hasTail; this.numLegs = numLegs; } } . public class CalicoCat extends Cat { // calico cat is a type of cat so it can inherit the attributes of Cat // creates a furType variable which is unique for a calico cat protected String furType; public CalicoCat(boolean hasTail, int numLegs, String furType) { super(hasTail, numLegs); this.furType = furType; } } . Hack 2 . public class Cat { protected boolean hasTail; protected int numLegs; public Cat(boolean hasTail, int numLegs) { this.hasTail = hasTail; this.numLegs = numLegs; } // all cats meow public void sayMeow() { System.out.println(&quot;meow&quot;); } } . public class CalicoCat extends Cat { protected String furType; public CalicoCat(boolean hasTail, int numLegs, String furType) { super(hasTail, numLegs); this.furType = furType; } // calico cat says meow differently, method overriding @Override public void sayMeow() { System.out.println(&quot;meow meow RAWR&quot;); } } . Hack 3 . public class Cat { protected boolean hasTail; protected int numLegs; public Cat(boolean hasTail, int numLegs) { this.hasTail = hasTail; this.numLegs = numLegs; } public void sayMeow() { System.out.println(&quot;meow&quot;); } // cats are cute ;) public void funFacts() { System.out.println(&quot;cute&quot;); } } . public class ToygerCat extends Cat { // method overloading: 2 methods with the same name but different arguments public void food(String food1) { System.out.println(&quot;Toyger eats &quot; + food1); } public void food(String food1, String food2) { System.out.println(&quot;Toyger eats &quot; + food1 + &quot; and &quot; + food2); } // method overriding: additional fun fact, overrides the funFacts method in the superclass @Override public void funFacts() { System.out.println(&quot;cute and looks like a toy tiger&quot;); } } . Notes . Inheritance can be used to save what would otherwise be repetitive code. The base class (superclass) can have methods and attributes that are the same with all subclasses. The subclass extends the superclass. Basically, the superclass is the general outline of something (such as a cat), while the subclass is a specific version of the superclass (such as calico cat). . The syntax to extend a superclass is public class subclass extends superclass. . The constructor of a subclass can also utilize the constructor of the superclass using the super() keyword, while also having its own extra arguments. . The subclass can access all of the methods in the superclass. However, if you want to override the superclass&#39;s method, you can type the same method name in the subclass. The @Override annotation will indicate that the method is overriding the superclass&#39;s method. . Inheritance hiearchies help visualize superclasses and subclasses. . Reference: The object of the class or inherited class . Polymorphism: . Method overriding occurs when the method in the subclass overrides the method in the subclass. . method overloading, occurs when you have muliple methods in a class with the same name. If they have a different number of parameters, a different method will be called depending on the number of arguments you provide. . Other words for method overriding: Runtime polymorphism, dynamic binding, dynamic method dispatch. . Other words for method overloading: Compile time polymorphism, static polymorphism . Early binding: Compiler decides which method to call (method overloading) . Late binding: Method decide at runtime (method overriding) . Object: Superclass of other classes . toString(): Outputs the attributes of an object and changes a string object to a string . equals(): Compares two strings .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/13/w16_unit9InheritanceNotes.html",
            "relUrl": "/2022/12/13/w16_unit9InheritanceNotes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "CompSci/Technical Business Panel",
            "content": "Takeaways . Today’s panel featured two speakers, Kathyleen Beveridge and Kris Porter, who talked about their journey in the field of project management and software engineering. One thing that struck out to me in this event was the importance of computer science and how it is applicable to many other fields, such as business/finance. As senior director of marketing, Kathyleen spends time communicating with developers to create products that customers would want. This brings me to the next point that I found really interesting, which is that the similarities between HP, Qualcomm, and Thermo Fisher Scientific is that all of them serve to help create technology and products that will help people (as can be seen in their mission statements). I think this is really cool because this means that as a software engineer, you get to be part of the effort that helps improve the lives of people around the world. Something else that really stood out to me was Kris’s emphasis of continuous learning. I think this is especially relevant because our modern world is extremely fast paced, and to be caught up, it’s necessary to keep learning and growing in knowledge, especially in programming when things are continuously changing and inventions are rapidly being produced. Besides, it’s also fun to learn new things ;). Altogether, today’s panel allowed me to learn about software engineering in the real world and what to expect in the workplace. . Notes that I took during the event . Speaker: Kathyleen Beveridge . Santa Clara university (bachelor), MBA at USC | Maya Angelou: My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style. | Investment banker at Wells Fargo, stock broker -&gt; switched to high tech at HP, then to Qualcomm, then Thermo Fisher Scientific (biotech) | Similarities in mission statements between companies: Creating technology, products, and services that helps people and creating what people around the world want | Qualcomm chips were in 99% cell phones in the world | Developing product goes through stages before commercialization Ask for voice of sales, voice of customers | . Speaker: Kris Porter . Software Engineer: SRE, DevOps, Infrastructure engineer | UCLA in Electrical Engineering | Researched Embedded Networked Sensors, opened up software engineering (learned Linux) | Worked at startup with email marketing automation, working as DevOps | Then worked at NBC Universal, streaming media infrastructure | Qualcomm for six years, DevOps, automation, monitoring | Work at Twitter, work on GraphQL | Spent time in securing networks | Emphasize continous learning: CCNA, Machine learning and deep learning, Python, Data structure, Algorithm and System Design (for interview), Twitter University | Projects: Streaming media infrastructure, analytics infrastructure (LocationSmart at Qualcomm), add GraphQL component at data centers at Twitter Moving REST API to GraphQL | . Q &amp; A: . Agile methodology: Technical: Different companies have different versions of Agile For example: Qualcomm: Planned work in 2-3 days meeting, created a roadmap for any project Sprints: Plan what you can do in a shorter amount of time (ex: 1 month) Very important skillset for tech | Python, Machine Learning framework: TensorFlow | GitLab with 100k repositories, using machine learning algorithm to figure out downloads | Nontechnical: Data scientist: Join frontend database to predict customer demand and sales Example: Use database to predict demand during vaccine orders | Most important skill to have in tech industry? Continuous learning (learning how to learn), you will probably learn a new programming language at each company you work for Don’t worry about what you see on the news . Be adaptable, life can be like a zigzag path . | Biggest challenge in tech industry + how overcome? Silicon Valley tech interviews: Timed random tests: Solve a problem in 30-45 min, code should compile . | Twitter University? Formal training of systems because things built are private Learn to navigate through the code . | How will learning to code help in business? Coding teaches you how to problem solve and critical thinking, why did you reach the conclusion that you did? . | Interested in learning/exploring? Web3, AWS, Google Cloud . | How coding help in investment/finance? Algorithms and patterns can help with stock | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/12/13/w16_blog.html",
            "relUrl": "/misc/2022/12/13/w16_blog.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Write any extra notes you have here . Simulations: Abstractions that mimic things that occur in the real world, you can use simulations to calculate things that you can&#39;t test in the real world . May contain bias because some real world elements can not be factored in . Use random number generators to simulate randomness and variability. Applications: Rolling a dice, flipping a coin, spinners . Contains varying set of values to demonstrate the variableness of real world phenomenon . Some details may need to be simplified within a simulation . | Random number generator: You can use the random library: import random . | . Hack #2 - Functions Classwork . import random x = random.randint(1, 100) print(x) . 26 . def mycloset(): myclothes = [&quot;red shoes&quot;, &quot;green pants&quot;, &quot;tie&quot;, &quot;belt&quot;] trash = random.choice(myclothes) print(&quot;Throwing away &quot; + trash) myclothes.remove(trash) print(&quot;My clothes: &quot; + str(myclothes)) mycloset() . Throwing away tie My clothes: [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;belt&#39;] . Bonus . def mycloset(): myclothes = [&quot;red shoes&quot;, &quot;green pants&quot;, &quot;tie&quot;, &quot;belt&quot;] extraclothes = [&quot;white socks&quot;, &quot;polka dot socks&quot;] choice = input(&quot;Add or remove clothes? &quot;) print(&quot;Add or remove clothes? &quot;) print(choice) if choice == &quot;add&quot;: addItem = random.choice(extraclothes) print(&quot;Adding item &quot; + addItem + &quot;...&quot;) myclothes.append(addItem) print(&quot;My clothes: &quot; + str(myclothes)) if choice == &quot;remove&quot;: trash = random.choice(myclothes) print(&quot;Throwing away &quot; + trash) myclothes.remove(trash) print(&quot;My clothes: &quot; + str(myclothes)) mycloset() . Add or remove clothes? add Adding item polka dot socks... My clothes: [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;tie&#39;, &#39;belt&#39;, &#39;polka dot socks&#39;] . Check in . Answer: 3 . Coin flip activity . import random def coinflip(): #def function randomflip = random.randint(0, 2) #picks either 0 or 2 randomly (50/50 chance of either) if randomflip == 0 or randomflip == 1: #assigning 0 and 1 to be heads--&gt; if 0 or 1 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 2: #assigning 2 to be tails--&gt; if 2 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Heads Heads Heads Tails Heads . Hack #3 - Binary Simulation Problem . import random def randomnum(): # function for generating random int ranNum = random.randint(0, 255) return ranNum def converttobin(n): # function for converting decimal to binary numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if n - binary[i] &gt;= 0: n -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; return output def survivors(binary): # function to assign position survivorstatus = [&quot;Jiya&quot;, &quot;Shruthi&quot;, &quot;Noor&quot;, &quot;Ananya&quot; , &quot;Peter Parker&quot;, &quot;Andrew Garfield&quot;, &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;] for i in range(0, len(survivorstatus)): if binary[i] == &quot;0&quot;: print(survivorstatus[i] + &quot; is a zombie&quot;) else: print(survivorstatus[i] + &quot; is not a zombie&quot;) # replace the names above with your choice of people in the house ranNum = randomnum() binaryNum = converttobin(ranNum) survivors(binaryNum) . Jiya is a zombie Shruthi is a zombie Noor is not a zombie Ananya is not a zombie Peter Parker is not a zombie Andrew Garfield is a zombie Tom Holland is a zombie Tobey Maguire is a zombie . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . import random print(&quot;Dice roll to see which player goes first (highest number goes first)&quot;) def rollDice(): dice = random.randint(1, 6) return dice player1 = rollDice() player2 = rollDice() print(&quot;Player 1&#39;s roll is: &quot; + str(player1)) print(&quot;Player 2&#39;s roll is: &quot; + str(player2)) if (player1 &gt; player2): print(&quot;Player 1 goes first&quot;) elif player2 &gt; player1: print(&quot;Player 2 goes first&quot;) else: rollDice() . Dice roll to see which player goes first (highest number goes first) Player 1&#39;s roll is: 1 Player 2&#39;s roll is: 5 Player 2 goes first . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | What library can be used when creating a simulation? answer | . random | | What code would you use to simulate a coin flip using the random library? (Use 0 and 1 to represent heads/tails) answer | . random.randint(0, 1) | | import random questions = [ &quot;A researcher gathers data about the effect of Advanced Placement classes on students&#39;&quot; + &quot;success in college and career, and develops a simulation to show how a sequence of AP&quot; + &quot;classes affect a hypothetical student&#39;s pathway.Several school administrators are&quot; + &quot;concerned that the simulation contains bias favoring high-income students, however.&quot; + &quot; n1. The simulation is an abstraction and therefore cannot contain any bias&quot; + &quot; n2. The simulation may accidentally contain bias due to the exclusion of details&quot; + &quot; n3. If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation&quot; + &quot; n4. The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&quot;, &quot;Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? n &quot; + &quot; n1. No, it&#39;s not a simulation because it does not include a visualization of the results.&quot; + &quot; n2. No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&quot; + &quot; n3. Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&quot; + &quot; n4. Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&quot;, &quot;Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks&quot; + &quot;their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation?&quot; + &quot; n1. Realistic sound effects based on the material of the baseball bat and the velocity of the hit&quot; + &quot; n2. A depiction of an audience in the stands with lifelike behavior in response to hit accuracy&quot; + &quot; n3. Accurate accounting for the effects of wind conditions on the movement of the ball&quot; + &quot; n4. A baseball field that is textured to differentiate between the grass and the dirt&quot;, &quot;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights&quot; + &quot;and in different environmental conditions.What are advantages of running the simulation versus an actual experiment?&quot; + &quot; n1. The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&quot; + &quot; n2. The simulation can be run more safely than an actual experiment&quot; + &quot; n3. The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&quot; + &quot; n4. The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&quot; + &quot; n* this question has 2 correct answers, answer with a comma and space in between (ex: a, b)&quot;, &quot;What library can be used when creating a simulation?&quot;, &quot;What code would you use to simulate a coin flip using the random library? (Use 0 and 1 to represent heads/tails)&quot; ] answers = [[&quot;2&quot;], [&quot;4&quot;], [&quot;3&quot;], [&quot;2, 4&quot;, &quot;4, 2&quot;], [&quot;random&quot;], [&quot;random.randint(0, 1)&quot;] ] order = random.sample(range(0, len(questions)), len(questions)) for i in range (0, len(questions)): storage = questions[i] storageAnswer = answers[i] questions[i] = questions[order[i]] answers[i] = answers[order[i]] questions[order[i]] = storage answers[order[i]] = storageAnswer number = 0 score = 0 def questionloop(): for question in questions: global number print(question) usrAnswer = input(question) print(&quot;Enter answer: &quot; + usrAnswer) answercheck(usrAnswer) number += 1 print(&quot;Your score is: &quot; + str(score) + &quot;/&quot; + str(len(questions))) if score/len(questions) &gt;= 0.7: print(&quot;Congrats! You passed!&quot;) else: print(&quot;You did not pass. Try again.&quot;) def answercheck(usrAnswer): for i in range (0, len(answers[number])): if usrAnswer == answers[number][i]: print(&quot;Correct!&quot;) global score score += 1 return print(&quot;Incorrect!&quot;) questionloop() . Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? 1. No, it&#39;s not a simulation because it does not include a visualization of the results. 2. No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. 3. Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. 4. Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. Enter answer: 3 Incorrect! A researcher gathers data about the effect of Advanced Placement classes on students&#39;success in college and career, and develops a simulation to show how a sequence of APclasses affect a hypothetical student&#39;s pathway.Several school administrators areconcerned that the simulation contains bias favoring high-income students, however. 1. The simulation is an abstraction and therefore cannot contain any bias 2. The simulation may accidentally contain bias due to the exclusion of details 3. If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation 4. The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. Enter answer: 2 Correct! Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heightsand in different environmental conditions.What are advantages of running the simulation versus an actual experiment? 1. The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. 2. The simulation can be run more safely than an actual experiment 3. The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. 4. The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. * this question has 2 correct answers, answer with a comma and space in between (ex: a, b) Enter answer: 4, 2 Correct! Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and askstheir software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? 1. Realistic sound effects based on the material of the baseball bat and the velocity of the hit 2. A depiction of an audience in the stands with lifelike behavior in response to hit accuracy 3. Accurate accounting for the effects of wind conditions on the movement of the ball 4. A baseball field that is textured to differentiate between the grass and the dirt Enter answer: 3 Correct! What library can be used when creating a simulation? Enter answer: random Correct! What code would you use to simulate a coin flip using the random library? (Use 0 and 1 to represent heads/tails) Enter answer: random.randint(0, 1) Correct! Your score is: 5/6 Congrats! You passed! . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... . I made a book recommender based on the genre that the person likes. The quiz first asks some questions to identify the person&#39;s preferred genre based on the greatest number of answer choices they selected (A corresponds to action, B corresponds to thriller, C corresponds to tragedy, and D corresponds to fantasy). . This is pretty basic right now; but I wanted to create something to solve a problem in my life. I like reading books and sometimes it&#39;s hard for me to find a good one so I thought that making a book recommender would be cool. . questions = [ &quot;What do you look for in movies?&quot; + &quot; n A. Something with a lot of action!! Otherwise it&#39;s too boring&quot; + &quot; n B. Something that keeps me at the edge of my seat&quot; + &quot; n C. Something sentimental! I love sad stories :3&quot; + &quot; n D. It must have magic!&quot;, &quot;What do you like most in a book?&quot; + &quot; n A. A fast paced story. I don&#39;t care if there are plot holes. Just give me the action!&quot; + &quot; n B. Plot twists are a MUST&quot; + &quot; n C. I LOVE BOOKS WITH A SAD ENDING&quot; + &quot; n D. Anything mythical! Take me to a land far, far away.&quot;, &quot;What do you hate most about in a book?&quot; + &quot; n A. Slow stories BORE ME TO DEATH&quot; + &quot; n B. I can&#39;t stand predictable plots&quot; + &quot; n C. I will cry if everyone gets a happy ending&quot; + &quot; n D. If the setting is in the modern world&quot;, &quot;Do you have a favorite genre?&quot; + &quot; n A. Dystopian&quot; + &quot; n B. Thriller&quot; + &quot; n C. Tragedy&quot; + &quot; n D. Fantasy&quot; ] aCounter = 0 bCounter = 0 cCounter = 0 dCounter = 0 for i in range(len(questions)): print(questions[i]) answer = input(questions[i]) print(&quot;Answer: &quot; + answer) if (answer == &quot;A&quot;): aCounter += 1 if (answer == &quot;B&quot;): bCounter += 1 if (answer == &quot;C&quot;): cCounter += 1 if (answer == &quot;D&quot;): dCounter += 1 if (aCounter &gt; bCounter and aCounter &gt; cCounter and aCounter &gt; dCounter): print(&quot;Your genre is dystopian&quot;) print(&quot;Recommended books: Legend, The Hunger Games&quot;) if (bCounter &gt; aCounter and bCounter &gt; cCounter and bCounter &gt; dCounter): print(&quot;Your genre is thriller&quot;) print(&quot;Recommended books: One of us is Lying, Sherlock Holmes&quot;) if (cCounter &gt; aCounter and cCounter &gt; bCounter and cCounter &gt; dCounter): print(&quot;Your genre is tragedy&quot;) print(&quot;Recommended books: Salt to the Sea, The Fault in our Stars&quot;) if (dCounter &gt; aCounter and dCounter &gt; bCounter and dCounter &gt; cCounter): print(&quot;Your genre is fantasy&quot;) print(&quot;Recommended books: Lord of the Rings, The Hobbit&quot;) . What do you look for in movies? A. Something with a lot of action!! Otherwise it&#39;s too boring B. Something that keeps me at the edge of my seat C. Something sentimental! I love sad stories :3 D. It must have magic! Answer: C What do you like most in a book? A. A fast paced story. I don&#39;t care if there are plot holes. Just give me the action! B. Plot twists are a MUST C. I LOVE BOOKS WITH A SAD ENDING D. Anything mythical! Take me to a land far, far away. Answer: C What do you hate most about in a book? A. Slow stories BORE ME TO DEATH B. I can&#39;t stand predictable plots C. I will cry if everyone gets a happy ending D. If the setting is in the modern world Answer: C Do you have a favorite genre? A. Dystopian B. Thriller C. Tragedy D. Fantasy Answer: C Your genre is tragedy Recommended books: Salt to the Sea, The Fault in our Stars .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/13/w16_CSP3.16LessonNotebook.html",
            "relUrl": "/2022/12/13/w16_CSP3.16LessonNotebook.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Decimal To Binary Converter",
            "content": "import java.util.Scanner; public class DecimalToBinaryConverter { int numOfBinary = 8; int[] binary = new int[numOfBinary]; String output = &quot;&quot;; public int fillArray(int counter) { if (counter == numOfBinary) { return 0; } binary[counter] = (int)Math.pow(2, numOfBinary - 1 - counter); return fillArray(counter + 1); } public int decimalToBinary(int number, int counter) { if (counter == numOfBinary) { return 0; } if (number - binary[counter] &gt;= 0) { number -= binary[counter]; output += &quot;1&quot;; } else { output += &quot;0&quot;; } return decimalToBinary(number, counter + 1); } public static void main(String[] args) { DecimalToBinaryConverter number = new DecimalToBinaryConverter(); number.fillArray(0); Scanner input = new Scanner(System.in); System.out.println(&quot;What number would you like to convert to decimal?&quot;); int num = input.nextInt(); System.out.println(num); number.decimalToBinary(num, 0); System.out.println(num + &quot; converted to binary is: &quot; + number.output); } } DecimalToBinaryConverter.main(null) . What number would you like to convert to decimal? 25 25 converted to binary is: 00011001 . Notes . Recursive method: Method that calls itself repeatedly . Consists of two parts: Base case and recursive call | Base case: The value that is returned when the recursion stops | . Recursive methods use a call stack that keeps track of the recursive function being called until the base case is reached. . Difference between recursion and iteration . Iteration executes code through a loop (ex: for loop, while loop), while recursion uses function calls . Binary search . The most important thing about binary search is that the data must be sorted i.e. from least to greatest. Binary search is more efficient than linear search. . Linear recursion is when a function calls itself only once. An example is shown below. . import java.util.Scanner; public class Demo { public static int addNumAndConst(int num1, int num2) { if (num1 == 1 &amp;&amp; num2 == 0) { return num1 + num2; } return num1 + num2 + addNumAndConst(1, 0); } public static void main(String[] args) { System.out.println(addNumAndConst(5, 3)); } } Demo.main(null) . 9 . Selection sort finds the minimum element and attaches it to the sorted part. . Merge sort divides the array into two halves and repeatedly does so. The merge() function is then used to merge them together. .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/12/w16_unit10DecimalToBinary.html",
            "relUrl": "/2022/12/12/w16_unit10DecimalToBinary.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 3.15 Random Values Student Copy",
            "content": "Purpose/Objectives: Teach student how to implement randomness into their code to make their code simulate real life situations. . In this lesson students will learn: . How to import random to python | How to use random with a list or number range | How to code randomness in everyday scenarios | . Summary (comprehensive notes are below) . Random values: Created using a mathematical algorithm that gives equal probability for generating numbers | . ADD YOUR ADDITIONAL NOTES HERE: . Examples of where random variables can be applied: Games, statistical sampling, and cryptography. . What are Random Values? . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring . Each Result from randomization is equally likely to occur Using random number generation in a program means each execution may produce a different result . What are Examples of Random outputs in the world? Add a few you can think of. . Ex: Marbles | . Why do we need Random Values for code? . Random values can be used in coding: . import random random_number = random.randint(1,100) print(random_number) . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . Real Life Examples: Dice Roll . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot; + str(roll)) . Challenge #1 . Write a function that will a simulate a coinflip and print the output . import random def coinflip(): result = [&quot;heads&quot;, &quot;tails&quot;] print(random.choice(result)) coinflip() . tails . EXTRA: Create a function that will randomly select 5 playing Cards and check if the 5 cards are a Royal Flush . NOTE: I didn&#39;t finish this extra challenge because I didn&#39;t have enough time. . cards = [] for suit in range(4): print(suit) for i in range(1, 14): pass . 0 1 2 . Homework . Given a random decimal number convert it into binary as Extra convert it to hexidecimal as well. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/12/12/w16_CSP3.15LessonNotebook.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/w16_CSP3.15LessonNotebook.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 3.14 Libraries Lesson",
            "content": "Purpose: Help students streamline and make their coding experience easier through built in packages and methods from a library Objective: By the end of the lesson, students should be able to fluently use methods from the turtle and math packages, and be able to look up documentation for any python package and us it. . Summary (comprehensive notes are below) . Library: Allows the user to import methods that can perform functions that would be complicated to code The entire package can be imported or just a single method from the package. To import a single method from a package, type from package name import method name . | Import a library as a user provided name: import name as user input name . | To import all methods from a library, type from name import * . | . fill in the blanks! . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick google search. methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word front, followed by the package name, then the word import, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use *. . To import a method as an easier name, just do what we did first, add the word as, and write the name you would like to use that package as. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | import numpy from numpy import sqrt import numpy as np . Challenge 2: Turtle . Turtle is a python python library which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a graphics package to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with vscode. Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Documentation Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn&#39;t mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it . Commands . forward(pixels) | . right(degrees) | . left(degrees) | . setpos(x,y) | . speed(speed) | . pensize(size) | . pencolor(color) | . Note: Color should be within quotes, like &quot;brown&quot;, or &quot;red&quot; . . from turtle import * oogway = Turtle() . Challenge 3: Math . The math package allows for some really cool mathematical methods! . methods Action . ceil(x) | return next highest integer (ex: 10.1 -&gt; 11) | . floor(x) | rounds to largest integer less than or equal to x | . factorial(x) | returns the factorial | . gcd(x,y) | returns the greatest common denominator of x and y, no decimals | . lcm(x,y) | returns the least common multiple of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . from math import * print(&quot;Enter 1st number&quot;) num1 = float(input(&quot;Enter 1st number&quot;)) print(num1) print(&quot;Enter 2nd number&quot;) num2 = float(input(&quot;Enter 2nd number&quot;)) print(num2) print(&quot;Number 1 rounded up: &quot; + str(ceil(num1))) print(&quot;Number 2 rounded up: &quot; + str(ceil(num2))) print(&quot;Number 1 rounded down: &quot; + str(floor(num1))) print(&quot;Number 2 rounded down: &quot; + str(floor(num2))) print(&quot;LCM: &quot; + str(lcm(floor(num1), floor(num2)))) print(&quot;GCM: &quot; + str(gcd(ceil(num1), ceil(num2)))) print(&quot;Factorial of num1: &quot; + str(factorial(floor(num1)))) print(&quot;Factorial of num2: &quot; + str(factorial(floor(num2)))) print(&quot;Square root of 1: &quot; + str(sqrt(num1))) #print(&quot;Number 1 rounded up: &quot; + str()) . Enter 1st number 1.2 Enter 2nd number 2.6 Number 1 rounded up: 2 Number 2 rounded up: 3 Number 1 rounded down: 1 Number 2 rounded down: 2 LCM: 2 GCM: 1 Factorial of num1: 1 Factorial of num2: 2 Square root of 1: 1.0954451150103321 . Homework: Putting it all together(complete only after the random values lesson) . Option 1: Create a python program which generates a random number between 1 and 10, and use turtle to draw a regular polygon with that many sides. As a hint, remember that the total sum of all the angles in a polygon is (the number of sides - 2) * 180. Note: a regular polygon has all sides and angles the same size. Paste a screenshot of the code and the drawing from repl.it . Option 2: use the &quot;datetime&quot; package, and looking up documentation, create a program to generate 2 random dates and find the number of days between . Extra ideas: customize the settings, draw a picture, or something else! . Option 1 . Option 2 . from datetime import date import datetime import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } month1 = random.choice(list(days_dictionary.keys())) day1Max = days_dictionary.get(month1) day1 = random.randint(1, day1Max) year1 = input(&quot;year&quot;) print(&quot;random day: &quot; + str(month1) + &quot;/&quot; + str(day1) + &quot;/&quot; + str(year1)) month2 = random.choice(list(days_dictionary.keys())) day2Max = days_dictionary.get(month2) day2 = random.randint(1, day2Max) print(&quot;random day: &quot; + str(month2) + &quot;/&quot; + str(day2) + &quot;/&quot; + str(year1)) datetime1 = datetime.datetime(int(year1), int(month1), int(day1)) datetime2 = datetime.datetime(int(year1), int(month2), int(day2)) global diffDay diffDay = str(datetime2 - datetime1) diffDay = int(diffDay.partition(&quot;,&quot;)[0].partition(&quot;days&quot;)[0]) if int(diffDay) &lt; 0: diffDay *= -1 print(&quot;The number of days between the given range of dates is: &quot; + str(diffDay) + &quot; days&quot;) . random day: 1/13/2000 random day: 4/12/2000 The number of days between the given range of dates is: 90 days .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/12/12/w16_CSP3.14LessonNotebook.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/w16_CSP3.14LessonNotebook.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Homework",
            "content": "from datetime import date import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } day1 = int(input(&quot;Input a day&quot;)) month1 = int(input(&quot;Input a month&quot;)) year1 = input(&quot;Input a year&quot;) print(&quot;user day: &quot; + str(month1) + &quot;/&quot; + str(day1) + &quot;/&quot; + year1) month2 = random.choice(list(days_dictionary.keys())) day2Max = days_dictionary.get(month2) day2 = random.randint(1, day2Max) print(&quot;random day: &quot; + str(month2) + &quot;/&quot; + str(day2) + &quot;/&quot; + year1) global numDay numDay = int(days_dictionary.get(month1)) - day1 for i in range (month1 + 1, month2 + 1): numDay += days_dictionary.get(month1) month1 += 1 numDay -= (days_dictionary.get(month2) - day2) print(str(numDay)) . user day: 1/1/2000 random day: 5/14/2000 133 . Note . I just realized that I probably should have used the datetime library. Below is the edited code. . from datetime import date import datetime import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } day1 = int(input(&quot;Input a day&quot;)) month1 = int(input(&quot;Input a month&quot;)) year1 = int(input(&quot;Input a year&quot;)) print(&quot;user day: &quot; + str(month1) + &quot;/&quot; + str(day1) + &quot;/&quot; + str(year1)) month2 = random.choice(list(days_dictionary.keys())) day2Max = days_dictionary.get(month2) day2 = random.randint(1, day2Max) print(&quot;random day: &quot; + str(month2) + &quot;/&quot; + str(day2) + &quot;/&quot; + str(year1)) datetime1 = datetime.datetime(year1, month1, day1) datetime2 = datetime.datetime(year1, month2, day2) diffDay = str(datetime2 - datetime1) print(&quot;The number of days between the given range of dates is: &quot; + diffDay.partition(&quot;,&quot;)[0]) . user day: 1/1/2000 random day: 8/13/2000 The number of days between the given range of dates is: 225 days .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/12/w16_3.14-15HW.html",
            "relUrl": "/2022/12/12/w16_3.14-15HW.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "AP CSP Vocab",
            "content": "Bits: The smallest unit of data that a computer stores. Include 0 and 1. (Binary) . Bytes: 8 bits grouped together. An example is that an IP address consists of four bytes, each separated by a decimal. A decimal number can also be expressed in binary as a byte. . | Hexadecimal: Uses base 16 Hexadecimal numbers range from 0-9, and the remaining six digits are in letters (A = 10, B = 11, C, D, E, F, etc.) . | Unsigned integer: Nonnegative integer, while a signed integer can be both positive and negative. . Unsigned integer can be represented in regular binary . To represent a signed integer, add another digit in front of the binary number. The digit is either 0 or 1, with 0 being positive and 1 being negative. . For example, +6 is 0110 in binary, while -6 is 1110 . | Floating point: Decimal numbers are approximated by binary fractions. Many different decimal numbers may share the same binary fraction. Therefore, rounding errors can occur sometimes when performing Python calculations. . | ASCII: A character encoding (American) . | Unicode: International encoding standard for text | RGB: Contains views for red, blue, and green, range from 0-255 | . Lossy permanently deletes certain information, while lossless does not. . . Variables: Abstractions that store values (numbers, boolean values, strings) Variables are categorized based on data type, which typically includes: integer, double/float, string, and booleans. | List: Contains elements | Dictionaries: Consist of key value pairs | . The homework example above demonstrates the use of lists and variables in Python. The album and song variable takes in a string input which is converted into an integer. The album list consists of lists and tuples, which are used to separate albums and songs. . Python . Variables . Assigning variables: variable name = value . Why use variables? . Variables help to manage complexity by storing values. They can have descriptive names that indicate what the variable does. Furthermore, variables can be reused throughout the program, and if the value needs to be changed, only the variable assignment needs to be changed, while the rest of the code can remain the same. . Lists . Assigning a list to a variable example: myList = [1, 2, 3] . Add elements to a list with: list.append(element) . Dictionaries . Create a dictionary with this syntax: dictionary name = {key:value} . Algorithm: A set of instructions to do a certain task . Selection: Determines which parts of codes are ran based on if they evaluate to true or false. Used with if statements. . Conditional: Different code statements are executed based of if they evaluate to true or false (boolean expressions (See 3.5)) . Conditionals . Below is an example of an if else statement that relates to binary . This should be pretty straightforward in demonstrating what an if statement is, so I&#39;m not going to do a code example for an if statement. Check the code cell below the next to see an example of a elif. . binaryString = input(&quot;Enter your binary string in 8 digits&quot;) if binaryString[0:1] == 1: print(&quot;Your binary number is greater than or equal to 128&quot;) else: print(&quot;Your binary number is less than 128&quot;) . Your binary number is less than 128 . weather = &quot;rainy&quot; if weather == &quot;sunny&quot;: print(&quot;Remember to bring a hat&quot;) elif weather == &quot;windy&quot;: print(&quot;Go fly a kite!&quot;) else: print(&quot;Remember to bring an umbrella&quot;) . Remember to bring an umbrella . Sequencing: The order in which an algorithm runs. . Selection: Algorithms figure out whether to execute a boolean statement (if statement) . Iteration: Loop (ex: for, while) . See here for a coding example demonstrating sequencing, selection, and iteration. . Coding example . The code below converts a decimal number into binary. This demonstrates sequencing, selection, and iteration. . Sequencing: First, the binary numbers are appended to the binary list. Next, each binary number is subtracted from the inputted decimal number provided that the input number &gt; the binary number. If that is the case, a &quot;1&quot; will be added to the binary string; otherwise, a &quot;0&quot; will be added. | Selection: The if statement determines if a &quot;1&quot; or a &quot;0&quot; is added to the binary string. | Iteration: Two for loops are present; the first adds binary numbers to the list and the second adds a 1 or a 0 to the binary string. | . Furthermore, this code segment demonstrates concatenating strings. As you can see in the example below, the output string is either appended to 1 or 0 depending on if the power of 2 fits in the number. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 . Expressions . Expressions are values that can be combined to be interpreted into a new value. . The usual mathematical symbols apply, the main difference is that the symbol for exponents is **, not ^. . The coding example here demonstrates how to use the ** (exponent). . Booleans . Booleans have 2 values: True and False. . Note: All of the code cells on this blog demonstrate boolean expressions and selections. Check a JavaScript version to see boolean expressions and iteration. . Relational Operators . ==, !=, &gt;, &lt;, &gt;=, &lt;= . Relational/comparison operators can compare numbers, but they can also be used to compare strings. The later a letter is, the greater its value. . For example, as you can see in the code below, print(b &gt; a) outputs as true, because in alphabetical order, b is after a. . a = &quot;a&quot; b = &quot;b&quot; print(b &gt; a) . True . Logical operators . and, or, not . In Python, and is &amp;&amp;, or is ||, and not is ! . x = 5 y = 5 z = 3 if x == 5 and y == 5: print(&quot;x and y are equal to 5&quot;) if x == 5 or z == 5: print(&quot;Either x or z is equal to 5&quot;) if not x == 3: print(&quot;x is not equal to 3&quot;) . x and y are equal to 5 Either x or z is equal to 5 x is not equal to 3 . . You can create truth tables with logical operators. . A truth table lists all the possible True/False values that two booleans (P and Q is the convention) can take. These True/False values are then used to evaluate a third expression to see if all cases are true. . An example below is an application of DeMorgan&#39;s Law. . def checkDeMorgans(): if not a or not b == (not (a and b)): print(&quot;DeMorgan&#39;s Law is true&quot;) a = True b = True checkDeMorgans() a = False b = True checkDeMorgans() a = True b = False checkDeMorgans() a = False b = False checkDeMorgans() . DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true . Strings . Psuedocode: Using common language to write out code. Good for planning purposes and helps other people understand what you intend to do with the code. . Index: Represents the position of an array. . Length: How long something is. For example, the length of a string is the number of characters it has. . Python . Length: len(value you want to find length of) . Substring syntax in Python: string[start index:end index - 1] . In this code, the substring takes an individual character from the binary string and calculates its values based on the base two power place it is in. . This can show specific characters in a string, which are the individual letters/numbers. . Below is an example of traversing through a string. . message = &quot;StRiNG&quot; for i in range(0, len(message)): print(message[i]) . S t R i N G . You can also change a string to uppercase or lowercase with the upper() and lower functions. . msg = &quot;dEfaUlt stRinG&quot; print(msg) print(msg.upper() + &quot; now uppercase&quot;.upper()) print(msg.lower() + &quot; now lowercase&quot;.lower()) . dEfaUlt stRinG DEFAULT STRING NOW UPPERCASE default string now lowercase . Nested Conditionals . Nested conditionals are essentially conditionals within conditionals. . Below is an example of nested if statements in Python . num = int(input(&quot;Enter a number&quot;)) print(&quot;Enter a number: &quot; + str(num)) if num &gt; 0: print(&quot;Your number is positive&quot;) if num &gt; 50: print(&quot;Your number is also greater than 50&quot;) else: print(&quot;Your number is negative&quot;) if num &lt; -50: print(&quot;Your number is also less than -50&quot;) . Enter a number: 60 Your number is positive Your number is also greater than 50 . Use iteration to simplify your code and to prevent manually repeating code over and over again. . Iteration: . While loop: while condition: . See the code cell below for an example of iterating through a list using a while loop. . myList = [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] i = 0 while i &lt; len(myList): print(myList[i]) i += 1 . apples oranges bananas . break . i = 0 while (i &lt; 5): print(i) if i == 3: break i+= 1 . 0 1 2 3 . Procedural abstraction . Procedural abstraction provides a name for a task without showing what the actual task does, ex: a function . def addNum(num1, num2): return num1 + num2 sum = addNum(5, 3) print(sum) . 8 . Lists . Lists: Collections that store data, can use loops to iterate through them | . Python: list name = [element 1 , element 2 ] . Index: Specify the location where a list element is found, usually starts at 0 Note: In AP CSP, list indexes start at 1 | . Example: myList = [0, 1, 2] . print(myList[0]) will output 0 . Below is an example of using different methods for lists: . myList = [1, 2, 3] print(&quot;Element at index 1 in myList: &quot; + str(myList[1])) var1 = myList[0] print(&quot;Value of var1 (element at index 0) &quot; + str(var1)) myList.insert(1, 1.5) print(&quot;Inserting 1.5 into list at index 1... &quot; + str(myList)) myList.append(4) print(&quot;Adding the value 4: &quot; + str(myList)) myList.remove(4) myList.remove(1) print(&quot;Removing element 1 and 4... &quot; + str(myList)) . Element at index 1 in myList: 2 Value of var1 (element at index 0) 1 Inserting 1.5 into list at index 1... [1, 1.5, 2, 3] Adding the value 4: [1, 1.5, 2, 3, 4] Removing element 1 and 4... [1.5, 2, 3] . Iteration: . While loop: while condition: . See the code cell below for an example of iterating through a list using a while loop. . myList = [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] i = 0 while i &lt; len(myList): print(myList[i]) i += 1 . apples oranges bananas . For loop (iterate through lists): for element name in list name: . Recursive loop: Recursive loops call themselves by calling the function name again . Note: Don&#39;t do the code below, will run forever . def recursive_function(): recursive_function . . You can put a dictionary in a list, below is an example: . Note: When you are printing a dictionary by its key, specify the key name in brackets []. . Example: myList = {&quot;myKey&quot;:&quot;myValue&quot;}, to print out the value, do: print(myList[&quot;myKey&quot;]) . myList = [{1: &quot;red&quot;, 2: &quot;blue&quot;}, {1: &quot;purple&quot;, 2: &quot;green&quot;}] print(&quot;Printing the first dictionary in myList: &quot; + str(myList[0])) print(&quot;Printing the second dictionary in myList: &quot; + str(myList[1])) print(&quot;Printing the second key in the first dictionary in myList: &quot; + str(myList[0][2])) . Printing the first dictionary in myList: {1: &#39;red&#39;, 2: &#39;blue&#39;} Printing the second dictionary in myList: {1: &#39;purple&#39;, 2: &#39;green&#39;} Printing the second key in the first dictionary in myList: blue . Procedures . Procedure: Programming instructions, can have parameters/return values . | Parameters: The input value in a procedure/function . | Arguments: The values of the parameters when they are called. . | Modularity: Separating functions into many pieces for better organization and to decompose a larger problem so that many parts of the code work to perform one function. . | Procedural Abstraction: Gives a name (tells you what the task does) but does not show how a task is done. It takes in parameters and may execute different statements (selection) depending on the parameter. It is used to decompose a large problem by providing a solution to a smaller problem. . | . Calling Procedures . Procedure call interrupts the code and executes the code inside the procedure. After that finishes, the program moves back to where it originally was when it called the procedure. . A procedure may return a value, but it does not need to do so . Calling a procedure: procedure name(arguments) . Developing Procedures . When making a procedure, make sure to do the following: . Give the procedure a descriptive name | Note what parameters are needed | Note any required data | Determine if the procedure returns a value or just simply does something | . JavaScript notes . function name(parameters) {}: Creates a function . . Library: Allows the user to import methods that can perform functions that would be complicated to code The entire package can be imported or just a single method from the package. To import a single method from a package, type from package name import method name . | Import a library as a user provided name: import name as user input name . | To import all methods from a library, type from name import * . | . . Packages example: numpy, datetime, turtle . Math . Below is an example of using the math package . from math import * print(&quot;Enter 1st number&quot;) num1 = float(input(&quot;Enter 1st number&quot;)) print(num1) print(&quot;Enter 2nd number&quot;) num2 = float(input(&quot;Enter 2nd number&quot;)) print(num2) print(&quot;Number 1 rounded up: &quot; + str(ceil(num1))) print(&quot;Number 2 rounded up: &quot; + str(ceil(num2))) print(&quot;Number 1 rounded down: &quot; + str(floor(num1))) print(&quot;Number 2 rounded down: &quot; + str(floor(num2))) print(&quot;LCM: &quot; + str(lcm(floor(num1), floor(num2)))) print(&quot;GCM: &quot; + str(gcd(ceil(num1), ceil(num2)))) print(&quot;Factorial of num1: &quot; + str(factorial(floor(num1)))) print(&quot;Factorial of num2: &quot; + str(factorial(floor(num2)))) print(&quot;Square root of 1: &quot; + str(sqrt(num1))) #print(&quot;Number 1 rounded up: &quot; + str()) . Enter 1st number 1.3 Enter 2nd number 2.5 Number 1 rounded up: 2 Number 2 rounded up: 3 Number 1 rounded down: 1 Number 2 rounded down: 2 LCM: 2 GCM: 1 Factorial of num1: 1 Factorial of num2: 2 Square root of 1: 1.140175425099138 . Below is an example that utilizes the random library . import random print(random.randint(1, 10)) # prints a random number between 1 and 10 . 8 . Simulations: Abstractions that mimic things that occur in the real world, you can use simulations to calculate things that you can&#39;t test in the real world May contain bias because some real world elements can not be factored in Use random number generators to simulate randomness and variability. Applications: Rolling a dice, flipping a coin, spinners . | Random number generator: You can use the random library: import random . | . Problem: Decision Problem: A problem with yes/no answer | Organization Problem: A problem with the goal of finding a best answer | . | Instance: Problem with specific input | Efficiency: How much computing you need for a problem to be resolved Polynomial Efficiency (Good): Proportional amount of time (linear) the more work you do | Exponential Efficiency (Bad): Exponential amount of time the more work you do (ex: double the amount of time) | . | Heuristic Approach: Finding a more efficient optimal solution | Decidable Problem: A decision problem with a solution that always outputs correctly | Undecidable Problem: A decision problem with no solution | .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/09/CSPVocab.html",
            "relUrl": "/2022/12/09/CSPVocab.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: Programming instructions, can have parameters/return values . Parameters: The input value in a procedure/function . Arguments: The values of the parameters when they are called. . Modularity: Separating functions into many pieces for better organization and to decompose a larger problem so that many parts of the code work to perform one function. . Procedural Abstraction: Gives a name (tells you what the task does) but does not show how a task is done. It takes in parameters and may execute different statements (selection) depending on the parameter. It is used to decompose a large problem by providing a solution to a smaller problem. . What are some other names for procedures?: . Other words for procedures are function/method. . Why are procedures effective?: . Procedures help split up the code into many parts. You can create functions that contain many lines of code, and then assign the function a specific name. This makes it easier when debugging because you can single out a specific function that is going wrong and debug them. . Additional Notes . 3.12 Calling Procedures . Procedure call interrupts the code and executes the code inside the procedure. After that finishes, the program moves back to where it originally was when it called the procedure. . A procedure may return a value, but it does not need to do so . Calling a procedure: procedure name(arguments) . 3.13 Developing Procedures . When making a procedure, make sure to do the following: . Give the procedure a descriptive name | Note what parameters are needed | Note any required data | Determine if the procedure returns a value or just simply does something | . JavaScript notes . function name(parameters) {}: Creates a function . Challenge 1 below: Add the command that will call the procedure. . decimal = 7 def convertToBinary(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; return(output) conversion = convertToBinary(decimal) print(conversion) . 00000111 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . def findMax(numberA, numberB): if numberA &gt; numberB: print(&quot;Maximum is: &quot; + str(numberA)) else: print(&quot;Maximum is: &quot; + str(numberB)) def findMin(numberA, numberB): if numberA &lt; numberB: print(&quot;Minimum is: &quot; + str(numberA)) else: print(&quot;Minimum is: &quot; + str(numberB)) findMin(3, 5) findMax(3, 5) . Minimum is: 3 Maximum is: 5 . JavaScript Version . function findMax(numberA, numberB) { if (numberA &gt; numberB) { console.log(&quot;Maximum is: &quot; + numberA); } else { console.log(&quot;Maximum is: &quot; + numberB); } } function findMin(numberA, numberB) { if (numberA &lt; numberB) { console.log(&quot;Minimum is: &quot; + numberA); } else { console.log(&quot;Minimum is: &quot; + numberB); } } findMax(3, 5); findMin(3, 5); . Maximum is: 5 Minimum is: 3 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . Comments . My code below uses Python. To convert the characters into ASCII, I used the ord() function. I then created my own decimal to binary converter with the asciiToBinary() function (procedure), using different code than the binary converter I made in Challenge 1. . While I was searching how to convert characters into ASCII, I also wondered if there was a Python function that convert decimal to binary. I found that the bin() function could do the task, so below, I did the same homework using the bin() function. . binaryList = [] def charToAscii(letter): ascii = ord(letter) asciiToBinary(ascii) def asciiToBinary(ascii): binaryNum = 0; count = 0; binaryString = &quot;&quot;; while binaryNum &lt; ascii: binaryNum = 2**count count += 1 count -= 1 while (ascii &gt; 0 and count &gt;= 0): if ascii &gt;= 2**count: ascii -= (2**count) binaryString += &quot;1&quot; count -= 1 else: binaryString += &quot;0&quot; count -= 1 count += 1 if count &gt; 0: while count &gt; 0: binaryString += &quot;0&quot; count -= 1 binaryString = binaryString[1:len(binaryString)] binaryList.append(binaryString) charToAscii(&quot;A&quot;) charToAscii(&quot;P&quot;) charToAscii(&quot;C&quot;) charToAscii(&quot;S&quot;) charToAscii(&quot;P&quot;) print(&quot;&#39;APCSP&#39; in binary is&quot;) print(binaryList) . &#39;APCSP&#39; in binary is [&#39;1000001&#39;, &#39;1010000&#39;, &#39;1000011&#39;, &#39;1010011&#39;, &#39;1010000&#39;] . Using bin() . well this used up much fewer lines of code :P . binaryList = [] def charToAscii(letter): ascii = ord(letter) asciiToBinary(ascii) def asciiToBinary(ascii): binaryString = bin(ascii) binaryString = binaryString[2:len(binaryString)] binaryList.append(binaryString) charToAscii(&quot;A&quot;) charToAscii(&quot;P&quot;) charToAscii(&quot;C&quot;) charToAscii(&quot;S&quot;) charToAscii(&quot;P&quot;) print(&quot;&#39;APCSP&#39; in binary is&quot;) print(binaryList) . &#39;APCSP&#39; in binary is [&#39;1000001&#39;, &#39;1010000&#39;, &#39;1000011&#39;, &#39;1010011&#39;, &#39;1010000&#39;] . JavaScript version . I was also curious to see if I could make a JavaScript version of the homework assignment. I learned that the JavaScript function that converts characters to ASCII is .charCodeAt(0), and the function that converts ASCII to binary is toString(2). Below is my code. . &lt;p id=&quot;binary&quot;&gt;&lt;/p&gt; &lt;script&gt; const numOfBinary = 8; let binary = []; let ascii = &quot;&quot;; function charToAscii(letter) { ascii = letter.charCodeAt(0); asciiToBinary(ascii); } function asciiToBinary(ascii) { binary.push(ascii.toString(2)); } charToAscii(&quot;A&quot;); charToAscii(&quot;P&quot;); charToAscii(&quot;C&quot;); charToAscii(&quot;S&quot;); charToAscii(&quot;P&quot;); document.getElementById(&quot;binary&quot;).innerHTML = &quot;&#39;APCSP&#39; in binary is&quot; + &quot;&lt;br&gt;&quot; + binary; &lt;/script&gt; . .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/08/w15_CSP3.12-13LessonNotebook.html",
            "relUrl": "/2022/12/08/w15_CSP3.12-13LessonNotebook.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Notes . Array: Stores a collection of primitive data | Element: A value in the array | Index: The position where an element is, starting from 0 | . . To create a 2D Array, type data type[][] name = new data type[num row][num column] . You can identify the length of an array with .length. . The example below accesses the last element in an array using .length. This is especially useful for when you are not sure of the sizes of an array. . public class TwoDArray{ public static void main(String[] args) { int[][] arr = {{1, 2, 3}, {4, 5, 6}}; System.out.println(arr[arr.length - 1][arr[arr.length-1].length - 1]); } } TwoDArray.main(null) . 6 . To iterate through a 2D array, nested for loops are extremely useful. Below is an exmpale; . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[1][2] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); arr[2][1] = &quot;Athens&quot;; System.out.println(arr[2][1]); } } Test.main(null); . Change Austin to Athens and print! Athens . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! for (int row = 0; row &lt; arr.length; row++) { for (int col = 0; col &lt; arr[row].length; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(); } } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); int length = 0; int max = 0; for (int row = 0; row &lt; arr.length; row++) { for (int col = 0; col &lt; arr[row].length; col++) { length = arr[row][col].length(); if (length &gt; max) { max = length; longest = arr[row][col]; } } } System.out.println(longest); } } Test.main(null); . Use nested for loops to find the longest or shortest string! Cincinnati . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. . 2017 FRQ #4a . 1st attempt . public static Position findPosition(int num, int[][] intArr) { for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { if (intArr[row][col] == num) { return } } } return null; } . Comments . I graded my first attempt a 4/5 because I did not know how to return an object since the method type is of class Position. The way to do so is: return new Position(row, col);, which returns a Position object with the row and column location of the number. Below is my correction: . public static Position findPosition(int num, int[][] intArr) { for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { if (intArr[row][col] == num) { return new Position(row, col); // correction } } } return null; } . 4b . 1st attempt . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] arr = {}; for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { arr[row][col] = findPosition(intArr[row][col] + 1, intArr); } } return arr; } . Comments . I graded my first attempt a 3/4 because I did not create the 2D array correctly. Since the successor array has the same dimension as the integer array, the dimensions of the successor array needed to be specified with Position[][] arr = new Position[intArr.length][intArr[0].length];. Below is my correction. . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] arr = new Position[intArr.length][intArr[0].length]; // correction for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { arr[row][col] = findPosition(intArr[row][col] + 1, intArr); } } return arr; } . . int height = 3; int spaceCounter = 0; int leafCounter = 0; int trunkSpace = height - 1; String[][] tree = new String[height][2*(2*height-1)-1]; for (int i = 0; i &lt; tree.length; i++) { leafCounter = 0; int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else if (j % 2 != 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot; &quot;; } else { tree[i][j] = &quot; &quot;; } } } for (int i = 0; i &lt; tree.length; i++) { for (int j = 0; j &lt; tree[i].length; j++) { System.out.print(tree[i][j]); } System.out.println(); } . * * * * * * * * * . import java.util.Scanner; Scanner input = new Scanner(System.in); System.out.println(&quot;How tall would you like your tree to be?&quot;); int height = input.nextInt(); System.out.println(height); int leafCounter = 0; int trunkSpace = height - 1; String[][] tree = new String[height + height - 1][2*(2*height-1)-1]; for (int i = 0; i &lt; tree.length - (height-1); i++) { leafCounter = 0; int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else { tree[i][j] = &quot; &quot;; } } } for (int i = tree.length - (height-1); i &lt; tree.length; i++) { int maxLeaf = 3; leafCounter = 0; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; 2 * height - 1 -3) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else { tree[i][j] = &quot; &quot;; } } } for (int i = 0; i &lt; tree.length; i++) { for (int j = 0; j &lt; tree[i].length; j++) { System.out.print(tree[i][j]); } System.out.println(); } . How tall would you like your tree to be? 5 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/12/06/w15_unit8LessonNotebook.html",
            "relUrl": "/jupyter/2022/12/06/w15_unit8LessonNotebook.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Lists: Collections that store data, can use loops to iterate through them | . Python: list name = [element 1 , element 2 ] . Index: Specify the location where a list element is found, usually starts at 0 Note: In AP CSP, list indexes start at 1 | . Example: myList = [0, 1, 2] . print(myList[0]) will output 0 . . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] ← x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1 | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Use iteration to simplify your code and to prevent manually repeating code over and over again. . Iteration: . While loop: while condition: . See the code cell below for an example of iterating through a list using a while loop. . myList = [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] i = 0 while i &lt; len(myList): print(myList[i]) i += 1 . apples oranges bananas . For loop (iterate through lists): for element name in list name: . Recursive loop: Recursive loops call themselves by calling the function name again . Note: Don&#39;t do the code below, will run forever . def recursive_function(): recursive_function . . You can put a dictionary in a list, below is an example: . Note: When you are printing a dictionary by its key, specify the key name in brackets []. . Example: myList = {&quot;myKey&quot;:&quot;myValue&quot;}, to print out the value, do: print(myList[&quot;myKey&quot;]) . myList = [{1: &quot;red&quot;, 2: &quot;blue&quot;}, {1: &quot;purple&quot;, 2: &quot;green&quot;}] print(&quot;Printing the first dictionary in myList: &quot; + str(myList[0])) print(&quot;Printing the second dictionary in myList: &quot; + str(myList[1])) print(&quot;Printing the second key in the first dictionary in myList: &quot; + str(myList[0][2])) . Printing the first dictionary in myList: {1: &#39;red&#39;, 2: &#39;blue&#39;} Printing the second dictionary in myList: {1: &#39;purple&#39;, 2: &#39;green&#39;} Printing the second key in the first dictionary in myList: blue . . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . . Ver 1 . Below is my quiz that does not use randomization. It has 6 questions, and some questions have more than 3 answer choices. At the end of the quiz, a score will be displayed with a message saying whether the user has passed or not. . questions = [ &quot;What is the method that adds an element to the end of the list?&quot;, &quot;What is a method that can be used to edit a list?&quot;, &quot;T/F: Lists can contain many items in the form of tuples or hash maps.&quot;, &quot;Give an example of an iteration loops&quot;, &quot;Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number?&quot;, &quot;Write out the code that will create a list called &quot;myList &quot; and store the numbers: 1, 2, 3 (you can write it in any order)&quot; ] answers = [[&quot;append&quot;, &quot;.append&quot;, &quot;.append()&quot;], [&quot;insert&quot;, &quot;append&quot;, &quot;remove&quot;], [&quot;T&quot;, &quot;true&quot;, &quot;True&quot;], [&quot;for&quot;, &quot;recursion&quot;, &quot;while&quot;], [&quot;0&quot;, &quot;2&quot;, &quot;3&quot;, &quot;zero&quot;, &quot;two&quot;, &quot;three&quot;, &quot;Zero&quot;, &quot;Two&quot;, &quot;Three&quot;], [&quot;myList = [1, 2, 3]&quot;, &quot;myList = [1, 3, 2]&quot;,&quot;myList = [2, 1, 3]&quot;,&quot;myList = [2, 3, 1]&quot;,&quot;myList = [3, 1, 2]&quot;,&quot;myList = [3, 2, 1]&quot;] ] number = 0 score = 0 def questionloop(): for question in questions: global number print(question) usrAnswer = input(&quot;Enter answer:&quot;) print(&quot;Enter answer: &quot; + usrAnswer) answercheck(usrAnswer) number += 1 print(&quot;Your score is: &quot; + str(score) + &quot;/&quot; + str(len(questions))) if score/len(questions) &gt;= 0.7: print(&quot;Congrats! You passed!&quot;) else: print(&quot;You did not pass. Try again.&quot;) # IMPORTANT: rem pass def answercheck(usrAnswer): for i in range (0, len(answers[number])): if usrAnswer == answers[number][i]: print(&quot;Correct!&quot;) global score score += 1 return print(&quot;Incorrect!&quot;) questionloop() . What is the method that adds an element to the end of the list? Enter answer: .append Correct! What is a method that can be used to edit a list? Enter answer: remove Correct! T/F: Lists can contain many items in the form of tuples or hash maps. Enter answer: wrong answer Incorrect! Give an example of an iteration loops Enter answer: for Correct! Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number? Enter answer: Zero Correct! Write out the code that will create a list called &#34;myList&#34; and store the numbers: 1, 2, 3 (you can write it in any order) Enter answer: myList = [3, 2, 1] Correct! Your score is: 5/6 Congrats! You passed! . Ver #2 . In this version of the quiz, I imported the random library to randomize the questions. All of the other features remain the same. . import random questions = [ &quot;What is the method that adds an element to the end of the list?&quot;, &quot;What is a method that can be used to edit a list?&quot;, &quot;T/F: Lists can contain many items in the form of tuples or hash maps.&quot;, &quot;Give an example of an iteration loops&quot;, &quot;Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number?&quot;, &quot;Write out the code that will create a list called &quot;myList &quot; and store the numbers: 1, 2, 3 (you can write it in any order)&quot; ] answers = [[&quot;append&quot;, &quot;.append&quot;, &quot;.append()&quot;], [&quot;insert&quot;, &quot;append&quot;, &quot;remove&quot;], [&quot;T&quot;, &quot;true&quot;, &quot;True&quot;], [&quot;for&quot;, &quot;recursion&quot;, &quot;while&quot;], [&quot;0&quot;, &quot;2&quot;, &quot;3&quot;, &quot;zero&quot;, &quot;two&quot;, &quot;three&quot;, &quot;Zero&quot;, &quot;Two&quot;, &quot;Three&quot;], [&quot;myList = [1, 2, 3]&quot;, &quot;myList = [1, 3, 2]&quot;,&quot;myList = [2, 1, 3]&quot;,&quot;myList = [2, 3, 1]&quot;,&quot;myList = [3, 1, 2]&quot;,&quot;myList = [3, 2, 1]&quot;] ] order = random.sample(range(0, len(questions)), len(questions)) for i in range (0, len(questions)): storage = questions[i] storageAnswer = answers[i] questions[i] = questions[order[i]] answers[i] = answers[order[i]] questions[order[i]] = storage answers[order[i]] = storageAnswer number = 0 score = 0 def questionloop(): for question in questions: global number print(question) usrAnswer = input(question) print(&quot;Enter answer: &quot; + usrAnswer) answercheck(usrAnswer) number += 1 print(&quot;Your score is: &quot; + str(score) + &quot;/&quot; + str(len(questions))) if score/len(questions) &gt;= 0.7: print(&quot;Congrats! You passed!&quot;) else: print(&quot;You did not pass. Try again.&quot;) def answercheck(usrAnswer): for i in range (0, len(answers[number])): if usrAnswer == answers[number][i]: print(&quot;Correct!&quot;) global score score += 1 return print(&quot;Incorrect!&quot;) questionloop() . What is a method that can be used to edit a list? Enter answer: remove Correct! What is the method that adds an element to the end of the list? Enter answer: .append Correct! Give an example of an iteration loops Enter answer: for Correct! Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number? Enter answer: Zero Correct! T/F: Lists can contain many items in the form of tuples or hash maps. Enter answer: wrong answer Incorrect! Write out the code that will create a list called &#34;myList&#34; and store the numbers: 1, 2, 3 (you can write it in any order) Enter answer: myList = [3, 2, 1] Correct! Your score is: 5/6 Congrats! You passed! . Extra . Below is the quiz that I made with JavaScript. You can go forward and backwards to try out different questions, and you can type in answer. The check button will give you feedback on if your answer is right or wrong. . . Check Back Next . This is my code: . &lt;p id=&quot;question&quot;&gt;&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;answerBox&quot;&gt; &lt;button onclick=&quot;check()&quot;&gt;Check&lt;/button&gt; &lt;br&gt; &lt;br&gt; &lt;button onclick=&quot;backQuestion()&quot;&gt;Back&lt;/button&gt; &lt;button onclick=&quot;nextQuestion()&quot;&gt;Next&lt;/button&gt; &lt;p id=&quot;feedback&quot;&gt;&lt;/p&gt; &lt;script&gt; let questions = [&quot;What is the method that adds an element to the end of the list?&quot;, &quot;What is a method that can be used to edit a list?&quot;, &quot;T/F: Lists can contain many items in the form of tuples or hash maps.&quot;, &quot;Give an example of an iteration loop&quot;, &quot;Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number?&quot;, &quot;Write out the code that will create a list called &quot;myList &quot; and store the numbers: 1, 2, 3 (you can write it in any order)&quot; ]; let answers = [[&quot;append&quot;, &quot;.append()&quot;, &quot;.append&quot;], [&quot;insert&quot;, &quot;append&quot;, &quot;remove&quot;], [&quot;T&quot;, &quot;true&quot;, &quot;True&quot;], [&quot;for&quot;, &quot;recursion&quot;, &quot;while&quot;], [&quot;0&quot;, &quot;2&quot;, &quot;3&quot;, &quot;zero&quot;, &quot;two&quot;, &quot;three&quot;, &quot;Zero&quot;, &quot;Two&quot;, &quot;Three&quot;], [&quot;myList = [1, 2, 3]&quot;, &quot;myList = [1, 3, 2]&quot;,&quot;myList = [2, 1, 3]&quot;,&quot;myList = [2, 3, 1]&quot;,&quot;myList = [3, 1, 2]&quot;,&quot;myList = [3, 2, 1]&quot;] ]; let i = 0; document.getElementById(&quot;question&quot;).innerHTML = questions[0]; function nextQuestion() { if (i &lt; questions.length - 1){ document.getElementById(&quot;feedback&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;answerBox&quot;).value = &quot;&quot;; i++; } document.getElementById(&quot;question&quot;).innerHTML = questions[i]; } function backQuestion() { if (i &gt; 0){ document.getElementById(&quot;feedback&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;answerBox&quot;).value = &quot;&quot;; i--; } document.getElementById(&quot;question&quot;).innerHTML = questions[i]; } function check() { var response = document.getElementById(&quot;answerBox&quot;).value; for (let multiA = 0; multiA &lt; answers[i].length; multiA++) { if (response == answers[i][multiA]) { document.getElementById(&quot;feedback&quot;).innerHTML = &quot;Correct&quot;; return; } } document.getElementById(&quot;feedback&quot;).innerHTML = &quot;Incorrect&quot;; } &lt;/script&gt; . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot;) grocery_list.append(&quot;artichoke&quot;) print(grocery_list[6]) # Insert the item eggs as the third item of the list grocery_list.insert(2, &quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[6] # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichoke [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichoke&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichoke&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] decimalList = [] def binary_convert(binary): sum = 0; for binaryNum in binarylist: for i in range (0, 8): binaryDigit = binaryNum[i:i + 1:1] if binaryDigit == &quot;1&quot;: sum += 2 ** (7 - i) decimalList.append(sum) sum = 0 #use this function to convert every binary value in binarylist to decimal #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results binary_convert(binarylist) for decimalNum in decimalList: if decimalNum &lt; 100: decimalList.remove(decimalNum) print(decimalList) . [170, 150, 236, 209, 129] .",
            "url": "https://lwu1822.github.io/fastpages/homework/",
            "relUrl": "/homework/",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 7 Homework",
            "content": "Notes . ArrayLists: Dynamic size that allows you to add and remove elements. . ArrayLists are classes while Arrays are objects. This means that ArrayLists have many methods. Arrays also store primitive data while ArrayLists store object references. ArrayLists use wrapper classes instead of primitives. . To use ArrayLists, make sure to import with the import java.util.ArrayList statement. . import java.util.ArrayList; public class Demo{ public static void main(String[] args) { ArrayList&lt;String&gt; fruits = new ArrayList&lt;String&gt;(); fruits.add(&quot;apple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pears&quot;); fruits.add(&quot;oranges&quot;); for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } Demo.main(null) . apple pineapple pineapple pears oranges . On the other hand, I can also traverse through ArrayLists using a for each loop. . import java.util.ArrayList; public class Demo{ public static void main(String[] args) { ArrayList&lt;String&gt; fruits = new ArrayList&lt;String&gt;(); fruits.add(&quot;apple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pears&quot;); fruits.add(&quot;oranges&quot;); for (String fruit : fruits) { System.out.println(fruit); } } } Demo.main(null) . apple pineapple pineapple pears oranges . Objects . There is a way to compare if two objects have the same attributes using the .equals() method. However, you need to first override the method to do so. . Below is an example: . To override the .equals() method, you need to create the method that takes in an object. In this example, the object is the format of Object obj. In the .equals() method, Object obj refers to test2. Next, obj needs to be typecasted to the class, in this case ObjectTest, for comparison to work. The return statement checks to see if the attributes of the two objects are equal. Note: this refers to test1 . public class ObjectTest { String attribute1; String attribute2; // IMPORTANT: forgot to specify String in parameters // see https://www.daniweb.com/programming/software-development/threads/346224/identifier-expected-in-constructor-definition // youtube reference for comparing objects: https://www.youtube.com/watch?v=X2AjBFZfFCY public ObjectTest(String attribute1, String attribute2) { this.attribute1 = attribute1; this.attribute2 = attribute2; } @Override public boolean equals(Object obj) { ObjectTest test = (ObjectTest)obj; return this.attribute1.equals(test.attribute1) &amp;&amp; this.attribute2.equals(test.attribute2); } public static void main(String[] args) { ObjectTest test1 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); ObjectTest test2 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); if (test1.equals(test2)) { System.out.println(&quot;Same attributes&quot;); } } } ObjectTest.main(null) . Same attributes . Hack 1 . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; testArray = new ArrayList&lt;Integer&gt;(); testArray.add(1); testArray.add(2); System.out.println(testArray.size()); } } hack1.main(null); . 2 . Hack 2 . import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i = 0; i &lt; color.size(); i++) { if (color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ . [green box, blue water] . Hack 3 . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int number : num) { sum += number; } System.out.println(sum); . 9 . Extra . Below is a binary search algorithm that is focused on unit 7.5 Searching. Binary search works by minimizing the amount of times that the code needs to search through the arraylist in order to find the index where the specific element lies. . For example, in the code below, I created an ArrayList called numberList. The elements in numberList are: [1, 3, 15, 28, 57, 73, 99]. . The number that I want to find (secretNum) is 73. Binary searching works by comparing the number in the middle of the ArrayList (28) with the secretNum (73). If the middle number is smaller, binary searching will then search in the middle of the ArrayList from 57 to 99. The middle number is 73, which is at index 5. . The reason why binary searching is more efficient is that if a for loop is used to iterate through each number in the array, then in this example, the numbers in the ArrayList need to be searched 6 times before reaching the secretNum of 73. With binary searching, the algorithm only needs to search 2 times (once in the middle of the ArrayList, the second time in the middle between 57 and 99). . ArrayList&lt;Integer&gt; numbersList = new ArrayList&lt;&gt;(); // numbersList: [1, 3, 15, 28, 57, 73, 99] numbersList.add(1); numbersList.add(3); numbersList.add(15); numbersList.add(28); numbersList.add(57); numbersList.add(73); numbersList.add(99); int secretNum = 73; int low = 0; int high = numbersList.size() - 1; int index = -1; int middle = 0; boolean done = false; while (!done) { int middle = (low + high)/2; if (numbersList.get(middle) &gt; secretNum) { high = middle - 1; } else if (numbersList.get(middle) &lt; secretNum) { low = middle + 1; } else if (numbersList.get(middle) == secretNum) { index = middle; done = true; } } System.out.println(secretNum + &quot; is located at index: &quot; + index); . 73 is located at index: 5 . Quizizz . . Reflection: . The question that I got wrong on my first attempt was: . You must type _____ at the top of your java file in order to use an ArrayList. (Hint: it is a imported package) . I originally thought the answer was import java.util.Arrays;, but this is for arrays, not arraylists. The correct answer is import java.util.ArrayList;. .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/04/w14_unit7ArrayListNoteAndHW.html",
            "relUrl": "/2022/12/04/w14_unit7ArrayListNoteAndHW.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Unit 3 Notes",
            "content": "Learnings . DeMorgan&#39;s Law: !(a || b) = (!a &amp;&amp; !b) and !(a &amp;&amp; b) = (!a || !b) . Compound Boolean Expression . Compound boolean expressions include AND (&amp;&amp;), OR (||), and NOT (!). . Truth tables . Truth tables display all the possible results for boolean expressions. . Below is the truth table for &amp;&amp; and ||: . P Q P&amp;&amp;Q . true | true | true | . true | false | false | . false | true | false | . false | false | false | . . P Q P Q . true | true | true | . true | false | true | . false | true | true | . false | false | false | . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/01/w14_unit3Notes.html",
            "relUrl": "/2022/12/01/w14_unit3Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 1 Notes",
            "content": "Learnings . The main thing I learned for unit 1 is the idea of wrapper classes. Wrapper classes help make objects out of primitives, allowing access to many methods. For example, the wrapper class of int is Integer. . Notes . Casting: Changes the primitive data type . Casting is useful in division because if two integers are divided, the places after the decimal are truncated without rounding. To have an accurate division, type cast the integers with (double) to retain the decimal. . To round a number and return the result as an integer, add 0.5 to the number and then typecast it to an integer ((int)). . int a = 1; int b = 3; System.out.println(&quot;Dividing two integers: &quot; + a/b); double quotient = (double)a/(double)b; System.out.println(&quot;Dividing two doubles (originally integers): &quot; + quotient); System.out.println(); // truncating double c = 5.5; System.out.println(&quot;The value of double c is: &quot; + c); System.out.println(&quot;Truncating double c: &quot; + (int)c); // rounding int roundedNum = (int)(c+0.5); System.out.println(&quot;Rounding double c: &quot; + roundedNum); . Dividing two integers: 0 Dividing two doubles (originally integers): 0.3333333333333333 The value of double c is: 5.5 Truncating double c: 5 Rounding double c: 6 . Wrapper classes . Wrapper classes create objects out of primitives. The wrapper class capitalizes the first letter of the primitive data type and writes out the entire word. For example, the wrapper class of int is Integer. . Because wrapper classes create objects, there are many methods that can be used (shown in the code below). . Note: ArrayLists can only use wrapper classes; they can not use primitives. . toString(): Notice how Integer must be used, while int creates an error. . Integer test = 5; String test2 = test.toString(); System.out.println(test2); . 5 . int test = 5; // PROBLEM!! String test2 = test.toString(); System.out.println(test2); . | String test2 = test.toString(); int cannot be dereferenced . Concatenation . Concatenation combines multiple strings together into one string. . Concatenation can be used with the plus sign: + or with the concat() method. . Below is an example of concatenation using +: . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello + &quot; &quot; + world); . hello world . Below is an example of concatenation using concat() . The syntax is: concat(second string to add on to first string) . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello.concat(world)); . helloworld . Math . One of the Math methods that will be used frequently is random(). Math.random() returns a random number between 0 and 1, including 0 but excluding 1. . System.out.println(Math.random()); . 0.0758836497465144 .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/01/w14_unit1Notes.html",
            "relUrl": "/2022/12/01/w14_unit1Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "AP CSP Unit 3 Sections 5-7",
            "content": "3.5 Booleans Expressions . Vocab . Booleans . Booleans have 2 values: True and False. . Note: All of the code cells on this blog demonstrate boolean expressions and selections. Check a JavaScript version to see boolean expressions and iteration. . Relational Operators . ==, !=, &gt;, &lt;, &gt;=, &lt;= . Relational/comparison operators can compare numbers, but they can also be used to compare strings. The later a letter is, the greater its value. . For example, as you can see in the code below, print(b &gt; a) outputs as true, because in alphabetical order, b is after a. . a = &quot;a&quot; b = &quot;b&quot; print(b &gt; a) . True . Logical operators . and, or, not . In Python, and is &amp;&amp;, or is ||, and not is ! . x = 5 y = 5 z = 3 if x == 5 and y == 5: print(&quot;x and y are equal to 5&quot;) if x == 5 or z == 5: print(&quot;Either x or z is equal to 5&quot;) if not x == 3: print(&quot;x is not equal to 3&quot;) . x and y are equal to 5 Either x or z is equal to 5 x is not equal to 3 . . You can create truth tables with logical operators. . A truth table lists all the possible True/False values that two booleans (P and Q is the convention) can take. These True/False values are then used to evaluate a third expression to see if all cases are true. . An example below is an application of DeMorgan&#39;s Law. . def checkDeMorgans(): if not a or not b == (not (a and b)): print(&quot;DeMorgan&#39;s Law is true&quot;) a = True b = True checkDeMorgans() a = False b = True checkDeMorgans() a = True b = False checkDeMorgans() a = False b = False checkDeMorgans() . DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true . Order of operations . Relational operators are evaluated first (ex: &gt;, &lt;), while logical operators are evaluated afterwards (ex: and, or, not) . 3.6 Conditionals . Vocab . Algorithm: A set of instructions to do a certain task . Selection: Determines which parts of codes are ran based on if they evaluate to true or false. Used with if statements. . Conditional: Different code statements are executed based of if they evaluate to true or false (boolean expressions (See 3.5)) . Conditionals . Below is an example of an if else statement that relates to binary . This should be pretty straightforward in demonstrating what an if statement is, so I&#39;m not going to do a code example for an if statement. Check the code cell below the next to see an example of a elif. . binaryString = input(&quot;Enter your binary string in 8 digits&quot;) if binaryString[0:1] == 1: print(&quot;Your binary number is greater than or equal to 128&quot;) else: print(&quot;Your binary number is less than 128&quot;) . Your binary number is less than 128 . weather = &quot;rainy&quot; if weather == &quot;sunny&quot;: print(&quot;Remember to bring a hat&quot;) elif weather == &quot;windy&quot;: print(&quot;Go fly a kite!&quot;) else: print(&quot;Remember to bring an umbrella&quot;) . Remember to bring an umbrella . 3.7 Nested Conditionals . Nested conditionals are essentially conditionals within conditionals. . Below is an example of nested if statements in Python . num = int(input(&quot;Enter a number&quot;)) print(&quot;Enter a number: &quot; + str(num)) if num &gt; 0: print(&quot;Your number is positive&quot;) if num &gt; 50: print(&quot;Your number is also greater than 50&quot;) else: print(&quot;Your number is negative&quot;) if num &lt; -50: print(&quot;Your number is also less than -50&quot;) . Enter a number: 60 Your number is positive Your number is also greater than 50 .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/01/w14_CSPUnit3.5-7NoteAndHW.html",
            "relUrl": "/2022/12/01/w14_CSPUnit3.5-7NoteAndHW.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . . I added an input to take in a decimal number to convert to binary . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = int(input(&quot;Enter num&quot;)) print(&quot;Binary of num &quot; + str(num) + &quot; is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of num 32 is: 100000 . Below are some other versions of a decimal to binary converter that I made. . Version #1 . This version creates a list that stores the powers of 2 (from 2^0 to 2^7). Each number in the list is subtracted from the input decimal number if the decimal number is larger, and 1s and 0s are added accordingly to the binary string based on if the power of 2 is subtracted or not. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; return output; num = int(input(&quot;Enter a number&quot;)) print(str(num) + &quot; in binary is: &quot; + convert(num)) . 32 in binary is: 00100000 . Version #2 (Extra) . In this version, I created a different binary calculator that could repeatedly perform binary conversions. Once the user finishes entering all of the decimal numbers, the user can enter &quot;y&quot; to exit, and the calculator will display all of the conversions. . def binaryCalc(num): binaryNum = 0; count = 0; binaryString = &quot;&quot;; while binaryNum &lt; num: binaryNum = 2**count count += 1 #print(count) # count = 5 count -= 1 while (num &gt; 0 and count &gt;= 0): if num &gt;= 2**count: num -= (2**count) binaryString += &quot;1&quot; count -= 1 else: binaryString += &quot;0&quot; count -= 1 count += 1 #print(&quot;Count&quot; + str(count)) if count &gt; 0: while count &gt; 0: binaryString += &quot;0&quot; count -= 1 #print(&quot;binary&quot; + binaryString) return binaryString binaryList = [] def saveBinary(binary): binaryList.append(binary) end = False while (end == False): num = int(input(&quot;Enter a number: &quot;)) print(&quot;Enter a number&quot;) print(num) calculation = binaryCalc(num) saveBinary(calculation) response = input(&quot;Would you like to stop? y/n&quot;) print(&quot;Would you like to stop? y/n&quot;) print(response) if (response == &quot;y&quot;): end = True print(&quot;History: &quot; + str(binaryList)) . Enter a number 25 Would you like to stop? y/n n Enter a number 128 Would you like to stop? y/n n Enter a number 234 Would you like to stop? y/n y History: [&#39;011001&#39;, &#39;10000000&#39;, &#39;011101010&#39;] . . Lesson activities . print(&quot;True:&quot;,4 == 4) print(&quot;True:&quot;,1 &gt; 0) print(&quot;False:&quot;,7 &lt; 3) print(&quot;True:&quot;,5 != 6) print(&quot;False:&quot;,7 &gt;= 8) print(&quot;True:&quot;,3 &lt;= 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; == &quot;as&quot;) print(&quot;False&quot;,True &lt;= False) print(&quot;False:&quot;,[2,3,1] != [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &lt; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &gt; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] &gt;= [1,&#39;a&#39;]) print(&#39;&#39;) . True: True True: True False: False True: True False: False True: True True: True False False False: False True: True False: False True: True . print(&quot;True:&quot;, True or False) print(&quot;False:&quot;, not True) print(&quot;True:&quot;, True and True) print(&quot;False:&quot;, not True) print(&quot;False:&quot;, True and False) print(&quot;True:&quot;, not False) . True: True False: False True: True False: False False: False True: True . print( 3 &gt;= 3 and 4 &lt; 6 or 5 != 7 ) . True . age = 20 ; if (age &gt;= 70): print(&quot;Old&quot;) else: print(&quot;Not that old&quot;) if (age &gt; 50): print(&quot;You have lived for more than half a century&quot;) elif (age == 50): print(&quot;You have lived for half a century&quot;) else: print(&quot;You have lived for less than half a century&quot;) if (age &gt;= 21): print(&quot;You are old enough to drink&quot;) else: print(&quot;You are not old enough to drink&quot;) if (age &gt;= 18): print(&quot;You are old enough to vote&quot;) else: print(&quot;You are not old enough to vote&quot;) . Not that old You have lived for less than half a century You are not old enough to drink You are old enough to vote . def function(x, y, z): if(x &gt; y): #Code here if(x &gt; z): print(&quot;x is greater than y and z&quot;) #Code here else: print(&quot;x is greater than y but not z&quot;) #Code here else: if(x &gt; z): print(&quot;x is greater than z but not y&quot;) #Code here else: print(&quot;x is less than y and z&quot;) #Code here function(1, 2, 3) . x is less than y and z .",
            "url": "https://lwu1822.github.io/fastpages/week%2013/2022/11/30/w14_CSPUnit3.5-3.6LessonAndHW.html",
            "relUrl": "/week%2013/2022/11/30/w14_CSPUnit3.5-3.6LessonAndHW.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit 1-10 Vocab",
            "content": "Casting: Changes the primitive data type . Casting is useful in division because if two integers are divided, the places after the decimal are truncated without rounding. To have an accurate division, type cast the integers with (double) to retain the decimal. . To round a number and return the result as an integer, add 0.5 to the number and then typecast it to an integer ((int)). . int a = 1; int b = 3; System.out.println(&quot;Dividing two integers: &quot; + a/b); double quotient = (double)a/(double)b; System.out.println(&quot;Dividing two doubles (originally integers): &quot; + quotient); System.out.println(); // truncating double c = 5.5; System.out.println(&quot;The value of double c is: &quot; + c); System.out.println(&quot;Truncating double c: &quot; + (int)c); // rounding int roundedNum = (int)(c+0.5); System.out.println(&quot;Rounding double c: &quot; + roundedNum); . Dividing two integers: 0 Dividing two doubles (originally integers): 0.3333333333333333 The value of double c is: 5.5 Truncating double c: 5 Rounding double c: 6 . Wrapper classes . Wrapper classes create objects out of primitives. The wrapper class capitalizes the first letter of the primitive data type and writes out the entire word. For example, the wrapper class of int is Integer. . Because wrapper classes create objects, there are many methods that can be used (shown in the code below). . Note: ArrayLists can only use wrapper classes; they can not use primitives. . toString(): Notice how Integer must be used, while int creates an error. . Integer test = 5; String test2 = test.toString(); System.out.println(test2); . 5 . int test = 5; // PROBLEM!! String test2 = test.toString(); System.out.println(test2); . | String test2 = test.toString(); int cannot be dereferenced . Concatenation . Concatenation combines multiple strings together into one string. . Concatenation can be used with the plus sign: + or with the concat() method. . Below is an example of concatenation using +: . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello + &quot; &quot; + world); . hello world . Below is an example of concatenation using concat() . The syntax is: concat(second string to add on to first string) . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello.concat(world)); . helloworld . Math . One of the Math methods that will be used frequently is random(). Math.random() returns a random number between 0 and 1, including 0 but excluding 1. . System.out.println(Math.random()); . 0.28141796409418807 . Compound Boolean Expression . Compound boolean expressions include AND (&amp;&amp;), OR (||), and NOT (!). . Truth tables . Truth tables display all the possible results for boolean expressions. . Below is the truth table for &amp;&amp; and ||: . P Q P&amp;&amp;Q . true | true | true | . true | false | false | . false | true | false | . false | false | false | . . P Q P Q . true | true | true | . true | false | true | . false | true | true | . false | false | false | . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Comparing . Numbers . Numbers can be compared using ==. Numbers can always be compared with == because they are primitive types and not objects. . int a = 5; int b = 5; if (a == b) { System.out.println(&quot;a = b&quot;); } . a = b . Strings . There are two ways to compare strings: == and .equals(). . You can use == to compare strings when they are declared like this: String name = &quot;string&quot;; . An example is shown below: . String a = &quot;foo&quot;; String b = &quot;foo&quot;; if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } . The two strings are equal . However, if your two strings are objects, you can not use == to compare them (see below): . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are not equal . Instead, you need to use .equals() to compare the two string objects. . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a.equals(b)) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are equal . Note: a and b are different objects, but they contain the same string of foo, which is what .equals() checks for. . Objects . There is a way to compare if two objects have the same attributes using the .equals() method. However, you need to first override the method to do so. . Below is an example: . To override the .equals() method, you need to create the method that takes in an object. In this example, the object is the format of Object obj. In the .equals() method, Object obj refers to test2. Next, obj needs to be typecasted to the class, in this case ObjectTest, for comparison to work. The return statement checks to see if the attributes of the two objects are equal. Note: this refers to test1 . public class ObjectTest { String attribute1; String attribute2; // IMPORTANT: forgot to specify String in parameters // see https://www.daniweb.com/programming/software-development/threads/346224/identifier-expected-in-constructor-definition // youtube reference for comparing objects: https://www.youtube.com/watch?v=X2AjBFZfFCY public ObjectTest(String attribute1, String attribute2) { this.attribute1 = attribute1; this.attribute2 = attribute2; } @Override public boolean equals(Object obj) { ObjectTest test = (ObjectTest)obj; return this.attribute1.equals(test.attribute1) &amp;&amp; this.attribute2.equals(test.attribute2); } public static void main(String[] args) { ObjectTest test1 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); ObjectTest test2 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); if (test1.equals(test2)) { System.out.println(&quot;Same attributes&quot;); } } } ObjectTest.main(null) . Same attributes . for loops . For loops help with iteration. With for loops, you can specify how many times you want to repeat through something. . The syntax is: for (1; 2; 3){} (numbers explained below) . 1: Initialize a variable and set it equal to a certain value | 2: Create a conditional with the variable in 1 | 3: Set an increment for the variable | . Putting it all together, a for loop might look like this: . for (int i = 1; i &lt;= 5; i++) { System.out.println(&quot;The value of i is: &quot; + i); } . The value of i is: 1 The value of i is: 2 The value of i is: 3 The value of i is: 4 The value of i is: 5 . for each loops . for each loops are mainly used to iterate through arrays. An example is shown below: . int[] num = {1, 2, 3}; for (int numbers : num) { System.out.println(numbers); } . 1 2 3 . Class . What I learned . Static methods are used mainly for convenience. If you create a regular method, you need to create an object to execute the method. However, an object does not need to be created to access a static method. . Below is a piece of code that illustrates many parts of a class. . public class Person { private int age; private int height; public Person(){ } public int getAge() { return this.age; } public void setAge(int age) { this.age = age; } public int getHeight() { return this.height; } public void setHeight(int height) { this.height = height; } public static void main(String[] args) { Person person1 = new Person(); person1.setAge(20); person1.setHeight(65); System.out.println(&quot;person1&#39;s age is: &quot; + person1.getAge()); System.out.println(&quot;person1&#39;s height is: &quot; + person1.getHeight()); } } Person.main(null) . person1&#39;s age is: 20 person1&#39;s height is: 65 . Explanation of items in the code . A class is like a blueprint for an object. In this case, the class is Person (names of classes by convention have the first letter capitalized). The Person class has an empty constructor. Common things found in a class are getters and setters. Getters are created with getvariable name, and setters are created with setvariable name. In both cases, the first letter of the variable name should be capitalized, as in accordance with Java variable naming conventions. Getters and setters are used to protect your data so that you do not assign unintended values to your variables. Lastly, the this keyword is used to refer to the declared variables. this is used to differentiate between the declared variables and the variables that are passed into a method as parameters and who may have the same name. . Static vs nonstatic . In short, to access a variable from a static method, the variable must be declared with static. . static variables can be accessed in both static and nonstatic methods. nonstatic variables can only be accessed in nonstatic methods . public class staticDemo{ static int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . 5 . This will produce an error because there is no static! . public class staticDemo{ int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . | System.out.println(staticVar); non-static variable staticVar cannot be referenced from a static context . Static variables can be accessed in nonstatic methods! . public class staticDemo{ static int staticVar = 5; public void printVar() { System.out.println(staticVar); } public static void main(String[] args) { staticDemo a = new staticDemo(); a.printVar(); } } staticDemo.main(null) . 5 . Tester methods . Tester methods can be used to test if your code is working the way you want it to work. . Inheritance . public class Cat{ public boolean hasTail() { return true; } public void sayMeow() { System.out.println(&quot;Meow!&quot;); } } . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return super.hasTail(); } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); cat1.sayMeow(); System.out.println(&quot;Tabby cat fur type: &quot; + cat1.furType()); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Meow! Tabby cat fur type: striped Tabby cat has tail? true . In the example above, the superclass is Cat, while the subclass is TabbyCat. Extends helps save time from copying and pasting code. TabbyCat has access to all of the methods in Cat, but also has its specific method, furType(). The super keyword calls the superclass. . One interesting thing is that if the subclass has the same method as the superclass, the subclass&#39;s method will override the superclass. This is called polymorphism. See below: . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return false; // oof } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Tabby cat has tail? false . During compilation though, the hasTail() method will be looked for in the Cat class. Only during run time, the method will be resolved to the TabbyCat object. This is called late binding (using overriding) . Something very cool in Java is that you can have methods with the same name, as long as they have different parameters. This would result in overloading. . toString() . toString changes the value into a String object . Integer x = 5; System.out.println(&quot;Data type of x is: &quot; + x.toString().getClass().getSimpleName()); . Data type of x is: String . hashCode() . hashCode returns the hash code for an object. If obj1.equals(obj2), then obj1.hashCode() == obj2.hashCode(); . String text = new String(&quot;foo&quot;); String text2 = new String(&quot;foo&quot;); if (text.equals(text2)) { System.out.println(text.hashCode() == text2.hashCode()); } . true .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/29/w14_unit1-10Vocab.html",
            "relUrl": "/2022/11/29/w14_unit1-10Vocab.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "AP CSP Unit 3 Sections 3-4",
            "content": "Vocab . The three important vocab words for AP CSP are sequencing, selection, and iteration. . Sequencing: The order in which an algorithm runs. . Selection: Algorithms figure out whether to execute a boolean statement (if statement) . Iteration: Loop (ex: for, while) . See here for a coding example demonstrating sequencing, selection, and iteration. . 3.3 Expressions . Expressions are values that can be combined to be interpreted into a new value. . The usual mathematical symbols apply, the main difference is that the symbol for exponents is **, not ^. . The coding example here demonstrates how to use the ** (exponent). . 3.4 Strings . Psuedocode: Using common language to write out code. Good for planning purposes and helps other people understand what you intend to do with the code. . Index: Represents the position of an array. . Length: How long something is. For example, the length of a string is the number of characters it has. . Python . Length: len(value you want to find length of) . Substring syntax in Python: string[start index:end index - 1] . In this code, the substring takes an individual character from the binary string and calculates its values based on the base two power place it is in. . This can show specific characters in a string, which are the individual letters/numbers. . Below is an example of traversing through a string. . message = &quot;StRiNG&quot; for i in range(0, len(message)): print(message[i]) . S t R i N G . You can also change a string to uppercase or lowercase with the upper() and lower functions. . msg = &quot;dEfaUlt stRinG&quot; print(msg) print(msg.upper() + &quot; now uppercase&quot;.upper()) print(msg.lower() + &quot; now lowercase&quot;.lower()) . dEfaUlt stRinG DEFAULT STRING NOW UPPERCASE default string now lowercase . Coding example . The code below converts a decimal number into binary. This demonstrates sequencing, selection, and iteration. . Sequencing: First, the binary numbers are appended to the binary list. Next, each binary number is subtracted from the inputted decimal number provided that the input number &gt; the binary number. If that is the case, a &quot;1&quot; will be added to the binary string; otherwise, a &quot;0&quot; will be added. | Selection: The if statement determines if a &quot;1&quot; or a &quot;0&quot; is added to the binary string. | Iteration: Two for loops are present; the first adds binary numbers to the list and the second adds a 1 or a 0 to the binary string. | . Furthermore, this code segment demonstrates concatenating strings. As you can see in the example below, the output string is either appended to 1 or 0 depending on if the power of 2 fits in the number. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/29/w14_CSPUnit3.3-4NoteAndHW.html",
            "relUrl": "/2022/11/29/w14_CSPUnit3.3-4NoteAndHW.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "AP CSP Unit 3 Sections 1-2",
            "content": "Homework . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album = input() song = input() print(&quot;Playing &quot; + &quot; &quot;&quot; + str(albums[int(album)-1][3][int(song)-1][1]) + &quot; &quot;&quot;) . Playing &#34;Welcome to my Nightmare&#34; . Extra . The following code displays information of the album from the list using JavaScript and HTML. . &lt;table id=&quot;list&quot;&gt; &lt;tr&gt; &lt;th&gt;Album name&lt;/th&gt; &lt;th&gt;Artist&lt;/th&gt; &lt;th&gt;Year&lt;/th&gt; &lt;th&gt;Tracks&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script&gt; albums = [[&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, [ [1, &quot;Welcome to my Nightmare&quot;], [2, &quot;Devil&#39;s Food&quot;], [3, &quot;The Black Widow&quot;], [4, &quot;Some Folks&quot;], [5, &quot;Only Women Bleed&quot;] ] ], [&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, [ [1, &quot;Can&#39;t Get Enough&quot;], [2, &quot;Rock Steady&quot;], [3, &quot;Ready for Love&quot;], [4, &quot;Don&#39;t Let Me Down&quot;], [5, &quot;Bad Company&quot;], [6, &quot;The Way I Choose&quot;], [7, &quot;Movin&#39; On&quot;], [8, &quot;Bad Seagull&quot;] ] ], [&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ [1, &quot;I Turned to Stone&quot;], [2, &quot;Keeping a Rendezvous&quot;], [3, &quot;Reaper of the Glory&quot;], [4, &quot;She Used Me Up&quot;] ] ], [&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ [1, &quot;Pulling the Rug&quot;], [2, &quot;Psycho&quot;], [3, &quot;Mayhem&quot;], [4, &quot;Kentish Town Waltz&quot;] ] ] ]; var table = document.getElementById(&quot;list&quot;); //var row = table.insertRow(1); //var row2 = table.insertRow(2); for (let i = 0; i &lt; albums.length; i++) { var row = table.insertRow(i+1); for (let j = 0; j &lt; albums[i].length; j++) { var cell1 = row.insertCell(j); if (j == 3) { for (let k = 0; k &lt; albums[i][3].length; k++ ) cell1.innerHTML += albums[i][3][k][0] + &quot; &quot; + albums[i][3][k][1] + &quot;&lt;br&gt;&quot;; } else { cell1.innerHTML = albums[i][j]; } } } &lt;/script&gt; . Album name Artist Year Tracks . . Ignore this, this is just testing JavaScript . albums = [[&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, [ [1, &quot;Welcome to my Nightmare&quot;], [2, &quot;Devil&#39;s Food&quot;], [3, &quot;The Black Widow&quot;], [4, &quot;Some Folks&quot;], [5, &quot;Only Women Bleed&quot;] ] ], [&quot;Bad Company&quot;, &quot;Alice Cooper&quot;, 1975, [ [1, &quot;Welcome to my Nightmare&quot;], [2, &quot;Devil&#39;s Food&quot;], [3, &quot;The Black Widow&quot;], [4, &quot;Some Folks&quot;], [5, &quot;Only Women Bleed&quot;] ] ], ]; console.log(albums[1]); . [ &#39;Welcome to my NightmareBad Company&#39;, &#39;Alice Cooper&#39;, 1975, [ [ 1, &#39;Welcome to my Nightmare&#39; ], [ 2, &#39;Devil &#39;s Food&#39; ], [ 3, &#39;The Black Widow&#39; ], [ 4, &#39;Some Folks&#39; ], [ 5, &#39;Only Women Bleed&#39; ] ] ] . . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value for i in range(0, len(data)): if data[i] &lt; 100: print(str(i) + &quot; &quot; + str(data[i])) if data[i] &gt; 200: print(str(i) + &quot; &quot; + str(data[i])) . 2 4 4 308 6 5 9 306 . . Vocab . 3.1 Variables and Assignment . Variables: Abstractions that store values (numbers, boolean values, strings) Variables are categorized based on data type, which typically includes: integer, double/float, string, and booleans. | List: Contains elements | Dictionaries: Consist of key value pairs | . The homework example above demonstrates the use of lists and variables in Python. The album and song variable takes in a string input which is converted into an integer. The album list consists of lists and tuples, which are used to separate albums and songs. . Python . Variables . Assigning variables: variable name = value . Why use variables? . Variables help to manage complexity by storing values. They can have descriptive names that indicate what the variable does. Furthermore, variables can be reused throughout the program, and if the value needs to be changed, only the variable assignment needs to be changed, while the rest of the code can remain the same. . Lists . Assigning a list to a variable example: myList = [1, 2, 3] . Add elements to a list with: list.append(element) . Dictionaries . Create a dictionary with this syntax: dictionary name = {key:value} . JavaScript . Variables . Defining variables: . var variable name = value | const variable name = value | let variable name = value | . Boolean . Receive a true/false output from a boolean with: Boolean(conditional) . List . const list name = [elements] . Newlines can also be used in a list for increased readability: . const name = [ element 1, element 2 ] . . 3.2 Data Abstraction . Data abstraction: Simplifies code by hiding unnecessary information. An example of using data abstraction is lists, which are able to store multiple values. Lists can be more useful than variables in that you can have one list that stores multiple values which would otherwise have needed multiple variables to store them. | . Python . Lists . Data abstraction: Simplifies code by hiding unnecssary information. An example of using data abstraction is lists, which are able to store multiple values. Lists can be more useful than variables in that you can have one list that stores multiple values which would otherwise have needed multiple variables to store them. . Code: . name = [element 1 , element 2] . Elements can also be separated by newlines to increase readability: . name = [ element 1, element 2 ] . | id(list name): Each list has an id that can be displayed . | list name += [element] or list name.append(element): Add an element to the list . | . Iterating through lists . for variable 1, variable 2 in list name: . Miscellaneous . string.split(): Split each word of a string into an element in a list | &quot;&quot;.join(list name): Join elements of a list into a string | . JavaScript . Functions . To make a function, you need to specify a function name and parameters: function name(parameter 1, parameter 2){} . def binaryCalc(num): binaryNum = 0; count = 0; binaryString = &quot;&quot;; while binaryNum &lt; num: binaryNum = 2**count count += 1 #print(count) # count = 5 count -= 1 while (num &gt; 0 and count &gt;= 0): if num &gt;= 2**count: num -= (2**count) binaryString += &quot;1&quot; count -= 1 else: binaryString += &quot;0&quot; count -= 1 count += 1 #print(&quot;Count&quot; + str(count)) if count &gt; 0: while count &gt; 0: binaryString += &quot;0&quot; count -= 1 #print(&quot;binary&quot; + binaryString) return binaryString binaryList = [] def saveBinary(binary): binaryList.append(binary) firstCalc = binaryCalc(25) saveBinary(firstCalc) secondCalc = binaryCalc(128) saveBinary(secondCalc) thirdCalc = binaryCalc(234) saveBinary(thirdCalc) print(binaryList) . [&#39;011001&#39;, &#39;10000000&#39;, &#39;011101010&#39;] .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/28/w14_CSPUnit3.1-2NoteAndHW.html",
            "relUrl": "/2022/11/28/w14_CSPUnit3.1-2NoteAndHW.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / . the symbol for modulus is % . an algorithm is a sequence of steps that does a specific task . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for num in numlist: if int(num) % 3 == 0: print( num + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 . Challenge . Using JavaScript and HTML frontend: . &lt;p id=&quot;binary&quot;&gt;&lt;/p&gt; &lt;script&gt; let num = 25; // change 25 to binary const numOfBinary = 8; // 8 bits (2^8 = 256, 256 possible numbers from 1-255) const binary = []; let output = &quot;&quot; // add powers of 2 to the binary array for (let i = 0; i &lt; numOfBinary; i++) { binary.push(2**(numOfBinary - 1 - i)); } // subtract powers of 2 from num (value = 25) and add 0s or 1s to the binary string accordingly for (let i = 0; i &lt; binary.length; i++) { if (num - binary[i] &gt;= 0) { num -= binary[i]; output += &quot;1&quot;; } else { output += &quot;0&quot;; } } document.getElementById(&quot;binary&quot;).innerHTML = &quot;Output&quot; + String(output); &lt;/script&gt; . . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is combining values together Length is how long a particular value is. For example, in a string, the length is the number of characters. A substring is a part of a string . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names : print(name) print(&quot;Length of &quot; + name + &quot;: &quot; + str(len(name))) length(names) . jaden Length of jaden: 5 max Length of max: 3 dylan Length of dylan: 5 orlando Length of orlando: 7 . Challenge . Using JavaScript and HTML frontend: . &lt;p id=&quot;list&quot;&gt;&lt;/p&gt; &lt;script&gt; const names = [&quot;jaden&quot;, &quot;max&quot;, &quot;dylan&quot;, &quot;orlando&quot;]; for (name of names) { document.getElementById(&quot;list&quot;).innerHTML += String(name) + &quot;&lt;br&gt;&quot; + &quot;Length of &quot; + String(name) + &quot;: &quot; + String(name.length) + &quot;&lt;br&gt;&quot;; } &lt;/script&gt; . . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/11/18/w14_CSPLesson-expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/w14_CSPLesson-expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "FRQ 1",
            "content": "Explanation of code . Files overview . There are 3 files: APCalendar.java, Year.java, and CalendarApiController.java. APCalendar.java contains the methods that provide the functions of the calendar, Year.java is the POJO to get information from the APCalendar class, and CalendarApiController.java controls the REST API. . How the code works . Calendar data can be accessed through the URI. The endpoints are specified with @GetMapping in CalendarApiController.java. Within each endpoint, a Year object is created and the setYear method is called. Within the Year class, you can see which setters are called. These setters then call methods in the APCalendar class, which are programmed to output things such as if a given year is a leap year, the day of the week of a day, how many days since January 1st a given day of the year is, etc. . . What I learned . Within the APCalendar class, there were many methods that required multiple parameters, such as dayOfYear or numberOfLeapYears. I originally had a little trouble in getting these parameters as input in the endpoint, and after some research, I found that the syntax in the endpoint is something like this: /{var1}/{var2}/{etc}. Then, to specify multiple PathVariables, simply split them apart with commas, like this: &lt;code&gt;@PathVariable int var, @PathVariable int var2&lt;/code&gt;. . Using the debugger . The debugger not only helped me in debugging code; it also helped me to learn how the code works. One thing that I was confused about was what the toString() method did in Year.java. By running the debugger on the tester, (as seen below), . I learned that there is a default toString() method. This is overriden in the Year class. The System.out.println automatically calls the toString() method, which is why an output in JSON format is shown when the tester is run. . . Using Postman . .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/16/frq1PBL.html",
            "relUrl": "/2022/11/16/frq1PBL.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Binary Color",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Learnings from code: . When I first looked at the code for the binary table, I was confused with some of the syntax. Below is a documentation of things that I learned and an explanation of the code. . Many buttons have an id. This id is later used in Javascript. Furthermore, this: {{ i }} is liquid syntax. The i is referred from the for loop, whose syntax is this: {% for i in (start-num .. end-num). . Looking at the first button, there is a function called add. This results in calling the add function in JavaScript. Within the function, the getBits function is called and stored within the variable binary. This function takes the current values of the binary (the 0s or 1s underneath the light bulbs) and stores it into a variable called bits. Next, the variable decimal takes binary and converts it from base 2 into decimal. . The next part is confusing. Within the if statement, n &gt; 0 means that the +1 button was pressed, while the else statement means that the -1 button was pressed. The decimal of the binary value is then set to a certain number. In decimal = MAX === decimal ? 0 : decimal += n, MAX === decimal is a boolean expression which says that if true, the first option before : will run, and if false, the second option will run. MAX, as defined in the constructor, is equal to 255. Therefore, the code is saying that if the decimal (remember that the decimal is equivalent to the value of the 0s and 1s underneath the light bulbs) number is equal to 255, then when you add 1, turn the decimal number into 0 (since the maximum is 8 bits, 2^8 = 256, binary starts from 0, so maximum number is 255). However, if the decimal number is not equal to MAX, just add 1 to decimal. Same thing in the else part of the loop, only this time, it refers to if the -1 button is clicked. If decimal is 0, when the -1 button is clicked, go back to 255, otherwise, just decrease by 1. . After that, the decimal number is converted to binary and stored in the binary variable. To convert to binary, the decimal_2_base function is ran. Within the function, something new that I saw was the do while loop. I learned that the difference between this loop and the while loop was that the while loop would run only if the condition is fulfilled. The do while loop will always run once, and then if the condition in the while portion is fulfilled, the loop will run again. Within the loop, the variable digit is assigned to be equal to the remainder of the decimal number and the base, which when passed into the decimal_2_base function, was 2. digit is then passed into the variable conversion as a string. The next piece of code that I was confused about was ~~(decimal / base);. This is the same as Math.floor(), but runs faster. This piece of code devices the two variables decimal and base, and rounds to the largest integer that is less than or equal to the value. . For example, if decimal = 5, and base = 2, ~~(decimal / base) = ~~(2.5) which will round down to 2. .",
            "url": "https://lwu1822.github.io/fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://lwu1822.github.io/fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Unit 6 Array",
            "content": "Notes . Arrays store one data type and has a fixed size. . The syntax to create an array is: data type[] name = new data type[num]. This creates an array with constructors. . The other way to create an array is to pre-initialize it. To do this, type data type[] name = {elements}. . The element of arrays can be accessed through the index. . Errors . ArrayIndexOutOfBoundsException: Arrays can be iterated through loops. If the loop accesses an index that the array does not have, this error can occur. An example is listed below: . int[] numbers = {1, 2, 3}; for (int i = 0; i &lt;= numbers.length; i++) { // uh-oh System.out.println(numbers[i]); } . 1 2 3 . java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 at .(#17:4) . In the example above, the code failed because the for loop iterates from i = 0 to i = 3. The array does not contain an element at index 3. Therefore, the code needs to be altered below: . int[] numbers = {1, 2, 3}; for (int i = 0; i &lt; numbers.length; i++) { // uh-oh System.out.println(numbers[i]); } . 1 2 3 . for each loop . A for each loop is especially useful to traverse through an array. An example is shown below: . int[] numbers = {1, 2, 3}; int sum = 0; for (int num : numbers) { // uh-oh sum += num; } System.out.println(sum); . 6 . #3a . public void addMembers(String[] names, int gradYear) { for (int i = 0; i &lt; names.length; i++) { memberInfo member = new MemberInfo(names[i], gradYear, true); memberList.add(member); } } . Comments: . My solution matched up with the official solutions. Something that I could have used though, would be the for each loop to iterate through each element in the array. . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(n, gradYear, true); memberList.add(member); } } . . Hacks . Hack 1 . int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length(); i+=2) { System.out.println(arrayOne[i]); } . Hack 2 . B .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/09/w12_unit6HW.html",
            "relUrl": "/2022/11/09/w12_unit6HW.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "AP CSP Finals",
            "content": "Below is my score on the Trimester 1 AP CSP Finals. . . This was the question that I got wrong: . . Why I chose the answer: I confused WWW with HTTP. HTTP is a protocol, but WWW is not. . | Correct answer: The correct answer is that WWW is an information system that consists of linked pages, programs, and files. The Internet is a network that can access the World Wide Web. . Reviewing the 4.1 Daily Video 2, I reviewed that the Internet helps connect the computer networks, while WWW is the “network of linked data and programs, running over the Internet”. WWW uses the protocol HTTP. . | . There were also a few questions that I got correct, but I did not fully understand them. Looking at the solutions, my train of thought was about the same as the explanations, but I will include them below for future reference and review. . . My reasoning: I know that four bits in binary is equivalent to 2^4 = 16 values. Since there were 8 directions, I just assumed that each direction would be stored as a value. | . . My reasoning: I knew from before that binary was the fundamental bits that could store information (0s and 1s). However, I just think it is really interesting that all data can be stored in binary, from strings to colors to audio. | . . Note: This one I had no idea, so I guessed on the answer that sounded most correct. . | What I learned: Analog data changes continuously, while digital is discrete. Therefore, digital data would be sampled at regular intervals (not continuous) to approximate the runner’s position. . | .",
            "url": "https://lwu1822.github.io/fastpages/life/2022/11/08/w12_CSPFinalCorrection.html",
            "relUrl": "/life/2022/11/08/w12_CSPFinalCorrection.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "AP CSA Finals",
            "content": "Below is my score on the Trimester 1 AP CSA Finals. My score is 35/40. . . . These were the questions that I got wrong: . . Why I chose the wrong answer: I overlooked the word always in the question, which was why I also selected 1 as the correct answer (since if data does not contain 5, there would be an error). . | What I learned: Since the question says always, 1 would not be correct because if the one element in data is 5, there would not be an error. . | . . . Why I chose the wrong answer: I mistakenly believed that Math.random() produced a number between 0 and 1, inclusive. I also failed to realize that choice A could return an index of -1, which would produce an error. . | What I learned: Math.random() produces a random number between 0 and 1, but not including 1. Furthermore, the (int) type conversion does not round; therefore, myList.size() multiplied by a random decimal number will always result in a product less than myList.size() by at least 1, which will be enough for the maximum index number, which is always 1 less than the size of the list. . | . . . Why I chose the wrong answer: I was not familiar with the .add method. I was actually on the right track; however, when I went through the for loop the first time, I assumed that baboon would always be at index of 1, leading me to choose D instead of B. . | What I learned: Make sure to iterate through the entire for loop until the condition is false. . | . . . Why I chose the wrong answer: I did not understand that both the reference parameter and the actual parameter are aliases. . | What I learned: Passing a reference parameter results in it and the actual parameter being aliases to the same object. Therefore, changes made in the mystery method will also appear in values. Replacing the element of one index after the current index with the sum of the element in the current and subsequent index will result in the answer choice of C. . | . . . Why I chose the wrong answer: I forgot to check the second part of the OR conditional, where k&lt;4. . | What I learned: Since k is always less than 4, there would be an infinite loop. . | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/11/08/w12_CSAFinalCorrection.html",
            "relUrl": "/cb/2022/11/08/w12_CSAFinalCorrection.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Night at the Museum",
            "content": "Night at the Museum takes place at the end of every trimester to showcase students’ work from various classes. There were many exhibitions that you could view, the ones that I went to were the 3D Animations classroom, ceramics, and AP Studio Art rooms. . In the ceramics class, there were a lot of creative items that included mugs and other containers, such as this item which had the design of ocean waves: . . My favorite piece from the ceramics classroom was a mug in the shape of a dragon: . . The artwork in the AP Studio Art classroom had a lot of variety. Some that I found interesting were this drawing of a cat. . . Another piece of artwork that I really liked was this drawing of an eye because of how realistic it looked. . . I also went to the 3D Animations classroom to view their projects. Seeing the donuts were really cool and I felt a sense of familiarity with them because I have also taken the class. . . For APCSA, our team presented our crime prevention project. Another group’s project that I went to see was teamcoders’s Codehoots, which tested Java in a Kahoot style format. . For APCSA, our team presented our dictionary project. Another group’s project that I enjoyed playing around with was the Swag Team’s “Math Games”. The game that I played with was their blackjack game, and i won both rounds :) .",
            "url": "https://lwu1822.github.io/fastpages/life/2022/11/07/w12_NatM.html",
            "relUrl": "/life/2022/11/07/w12_NatM.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "World Crime News Table",
            "content": "News News Link Source .",
            "url": "https://lwu1822.github.io/fastpages/crimebusters/news",
            "relUrl": "/crimebusters/news",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Unit 5 Writing Classes",
            "content": "Notes . What I learned . Static methods are used mainly for convenience. If you create a regular method, you need to create an object to execute the method. However, an object does not need to be created to access a static method. . Polymorphism: This is used with Java extends. When a method in the subclass has the same name as the superclass, the subclass&#39;s method will override the superclass&#39;s. . Late binding results in overriding, or using the specific subclass&#39;s method during run time. On the other hand, if two methods have the same name but different parameters, using one method over the other would be called overloading. . private vs protected: Private only allows access within the class, while protected allows access in the same package or subclasses. . Below is a piece of code that illustrates many parts of a class. . public class Person { private int age; private int height; public Person(){ } public int getAge() { return this.age; } public void setAge(int age) { this.age = age; } public int getHeight() { return this.height; } public void setHeight(int height) { this.height = height; } public static void main(String[] args) { Person person1 = new Person(); person1.setAge(20); person1.setHeight(65); System.out.println(&quot;person1&#39;s age is: &quot; + person1.getAge()); System.out.println(&quot;person1&#39;s height is: &quot; + person1.getHeight()); } } Person.main(null) . person1&#39;s age is: 20 person1&#39;s height is: 65 . Explanation of items in the code . A class is like a blueprint for an object. In this case, the class is Person (names of classes by convention have the first letter capitalized). The Person class has an empty constructor. Common things found in a class are getters and setters. Getters are created with getvariable name, and setters are created with setvariable name. In both cases, the first letter of the variable name should be capitalized, as in accordance with Java variable naming conventions. Getters and setters are used to protect your data so that you do not assign unintended values to your variables. Lastly, the this keyword is used to refer to the declared variables. this is used to differentiate between the declared variables and the variables that are passed into a method as parameters and who may have the same name. . Access modifiers . public allows visibility outside of the declared class, while private only allows visibility within the class. . public class Access{ public int x = 5; } public class AccessTwo { public static void main(String[] args) { Access variableDemo = new Access(); System.out.println(variableDemo.x); } } AccessTwo.main(null) . 5 . Compare with this: . public class Access{ private int x = 5; // x is private } public class AccessTwo { public static void main(String[] args) { Access variableDemo = new Access(); System.out.println(variableDemo.x); } } AccessTwo.main(null) . | System.out.println(variableDemo.x); x has private access in Access . On the other hand, protected allows access only in the same package and subclasses. . public class Access{ protected int x = 5; // x is private } public class AccessTwo extends Access { public static void main(String[] args) { AccessTwo variableDemo = new AccessTwo(); System.out.println(variableDemo.x); } } AccessTwo.main(null) . 5 . Static vs nonstatic . In short, to access a variable from a static method, the variable must be declared with static. . static variables can be accessed in both static and nonstatic methods. nonstatic variables can only be accessed in nonstatic methods . public class staticDemo{ static int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . 5 . This will produce an error because there is no static! . public class staticDemo{ int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . | System.out.println(staticVar); non-static variable staticVar cannot be referenced from a static context . Static variables can be accessed in nonstatic methods! . public class staticDemo{ static int staticVar = 5; public void printVar() { System.out.println(staticVar); } public static void main(String[] args) { staticDemo a = new staticDemo(); a.printVar(); } } staticDemo.main(null) . 5 . Tester methods . Tester methods can be used to test if your code is working the way you want it to work. . Inheritance . public class Cat{ public boolean hasTail() { return true; } public void sayMeow() { System.out.println(&quot;Meow!&quot;); } } . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return super.hasTail(); } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); cat1.sayMeow(); System.out.println(&quot;Tabby cat fur type: &quot; + cat1.furType()); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Meow! Tabby cat fur type: striped Tabby cat has tail? true . In the example above, the superclass is Cat, while the subclass is TabbyCat. Extends helps save time from copying and pasting code. TabbyCat has access to all of the methods in Cat, but also has its specific method, furType(). The super keyword calls the superclass. . One interesting thing is that if the subclass has the same method as the superclass, the subclass&#39;s method will override the superclass. This is called polymorphism. See below: . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return false; // oof } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Tabby cat has tail? false . During compilation though, the hasTail() method will be looked for in the Cat class. Only during run time, the method will be resolved to the TabbyCat object. This is called late binding (using overriding) . Something very cool in Java is that you can have methods with the same name, as long as they have different parameters. This would result in overloading. . Abstract classes . Objects can not be created from abstract classes. Abstract classes serve as a blueprint that other classes can extend from. . abstract class AbstractCat { public void sayMeow() { System.out.println(&quot;meow&quot;); } } . class TabbyCatAbstract extends AbstractCat{ public String furType() { return &quot;striped&quot;; } public static void main(String[] args) { TabbyCatAbstract tabbycat = new TabbyCatAbstract(); System.out.println(tabbycat.furType()); } } TabbyCatAbstract.main(null) . striped . toString() . toString changes the value into a String object . Integer x = 5; System.out.println(&quot;Data type of x is: &quot; + x.toString().getClass().getSimpleName()); . Data type of x is: String . hashCode() . hashCode returns the hash code for an object. If obj1.equals(obj2), then obj1.hashCode() == obj2.hashCode(); . String text = new String(&quot;foo&quot;); String text2 = new String(&quot;foo&quot;); if (text.equals(text2)) { System.out.println(text.hashCode() == text2.hashCode()); } . true . Big O notation . Big O provides the worst case time complexity of an algorithm. It is written in the format of O(n), where n is the size of the input. The worst case time complexity is taken in that say if the function was 2n+3, you would write it as O(n) because as n increases, the 3 becomes less important. . The Big O notation for hash maps is O(1), which is the fastest possible running time. Binary search is O(logn). A single loop is O(n), while a nested loop is O(n^2). . 2019 FRQ #2 . Initial attempt . public class StepTracker { private int numDay; private int activeSteps; private int totalSteps; private int numActiveDays; public StepTracker(int steps) { activeSteps = steps; } public int activeDays() { return numActiveDays; } public double averageSteps() { return totalSteps/numDay; } public void addDailySteps(int steps) { totalSteps += steps; numDay++; if (steps &gt;= activeSteps) { numActiveDays++; } } } . Comments: . In the method averageSteps(), I did not do a type conversion to double in my return statement. A type conversion is needed because totalSteps and numDay are integers. . I also did not account for when numDay = 0, because the return statement can not be divided by 0. Therefore, an if statement is needed to return an average step of 0. . Corrections: . public class StepTracker { private int numDay; private int activeSteps; private int totalSteps; private int numActiveDays; public StepTracker(int steps) { activeSteps = steps; } public int activeDays() { return numActiveDays; } public double averageSteps() { if (numDay == 0) { // corrections return 0.0; } else { return (double) totalSteps/numDay; } } public void addDailySteps(int steps) { totalSteps += steps; numDay++; if (steps &gt;= activeSteps) { numActiveDays++; } } } .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/25/w9_unit5Class.html",
            "relUrl": "/2022/10/25/w9_unit5Class.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 6",
            "content": "Notes . int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length; i+=2) { System.out.println(arrayOne[i]); } . 1 5 9 . int[] myNumbers = new int[] {5, 3, 4, 1, 2}; int i = 0; int min = 0; public void arraySorter(int[] array) { for (int i = 1; i &lt; array.length+1; i++) { for (int j = 0; j &lt; array.length; j++) { if (i == array[j]) { System.out.println(i); } } } } arraySorter(myNumbers); . 1 2 3 4 5 .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/24/w10_unit6JavaHacks.html",
            "relUrl": "/2022/10/24/w10_unit6JavaHacks.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Crime Safety Quiz",
            "content": "Crime Safety Quiz . Note: Unfortunately, this quiz requires the use of backend Spring framework, which was deployed on AWS. The AWS instance has shutdown, which means that the quiz does not work anymore. . This is the repository that contains the backend code that uses Spring. . This is the code that was used to create the table. . Quiz yourself on crime safety! . What this project does: This is a quiz that tests players on how much they understand about crime safety. It is in a table that records the number of times each answer choice is selected. The answer choices are connected to the backend using the Spring Framework. The number of times users selected the answer choices are saved in a MYSQL database. After the user selects one of the answer choices, there will also be feedback given on whether the user selected the right or wrong answer choice. . . Note: If the table shows an error of TypeError: Failed to fetch https://crimebusters.nighthawkcoding.ml/api/quiz/, see if using a VPN works :) . . Question A B C D .",
            "url": "https://lwu1822.github.io/fastpages/crimebusters/quiz",
            "relUrl": "/crimebusters/quiz",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Unit 4 Iteration",
            "content": "Learnings . The do while loop: I learned that the difference between this loop and the while loop was that the while loop would run only if the condition is fulfilled. The do while loop will always run once, and then if the condition in the while portion is fulfilled, the loop will run again. . int i = 0; do { System.out.println(&quot;i is: &quot; + i); i++; }while (i &lt; 0); . i is: 0 . Compare the code above with the while loop below: . int i = 0; while (i &lt; 0) { System.out.println(&quot;i is: &quot; + i); // no output } . Notes . for loops . For loops help with iteration. With for loops, you can specify how many times you want to repeat through something. . The syntax is: for (1; 2; 3){} (numbers explained below) . 1: Initialize a variable and set it equal to a certain value | 2: Create a conditional with the variable in 1 | 3: Set an increment for the variable | . Putting it all together, a for loop might look like this: . for (int i = 1; i &lt;= 5; i++) { System.out.println(&quot;The value of i is: &quot; + i); } . The value of i is: 1 The value of i is: 2 The value of i is: 3 The value of i is: 4 The value of i is: 5 . for each loops . for each loops are mainly used to iterate through arrays. An example is shown below: . int[] num = {1, 2, 3}; for (int numbers : num) { System.out.println(numbers); } . 1 2 3 . while loops . The syntax of a while loop looks like this: . while (condition) { } . Everytime the while loop executes, it first checks the condition. If the condition is true, the code inside the loop is ran. After the code finishes, the while loop checks again with the condition. . for loops . The syntax of a for loop looks like this: . for (initialize variable; condition; change variable) { } . Every time the for loop executes, it checks the condition. If the condition is true, the code inside the for loop is ran. After the code finishes running, the variable is incremented by the amount specified. . . There can also be nested iteration (ex: for loop within for loop) . for each loop . The syntax for a for-each loop looks like this: . for (dataType item : array){ } . This is especially useful for iterating through arrays. . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letterIndividual = &quot;&quot;; public CaesarCipher(String msg) { for (int i = 0; i &lt; msg.length(); i++) { letterIndividual = msg.substring(i, i+1); if (letterIndividual.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letterIndividual.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letterIndividual.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } if (letterIndividual.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null) . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/21/w9_unit4Iteration.html",
            "relUrl": "/2022/10/21/w9_unit4Iteration.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "JavaScript Fetch API",
            "content": "Below is a table created using HTML. The table displays the word bright, and its definition, which was taken from an API. The API was called using JavaScript Fetch. . Word Definition .",
            "url": "https://lwu1822.github.io/fastpages/api/2022/10/21/w9_dictionaryFEJSFetchAPITable.html",
            "relUrl": "/api/2022/10/21/w9_dictionaryFEJSFetchAPITable.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Unit 5 Writing Classes Hacks (Work In Progress)",
            "content": "public class Cow { private String cowType; private String sound; private int numMilkings; public Cow(){ this.numMilkings = 0; this.cowType = null; this.sound = null; } public Cow (String cowType, String sound) { this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public Cow(String cowType, String sound, int numMilikings) { this.numMilkings = numMilikings; this.cowType = cowType; this.sound = sound; } public void setcowType(String cowType) { this.cowType = cowType; } public String getcowType() { return cowType; } public void toString() { } public static void main(String[] args) { Cow firstCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); Cow secondCow = new Cow(); Cow thirdCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;, 100); firstCow.setcowType(&quot;a&quot;); firstCow.getcowType(); System.out.println(firstCow.getcowType()); } } Cow.main(null) . a .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/20/w9_unit5ClassHack.html",
            "relUrl": "/2022/10/20/w9_unit5ClassHack.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Dictionary Feedback (Work In Progress)",
            "content": "Dictionary Feedback (Work In Progress) . Feedback page for our APCSP dictionary project! . Please answer yes or no to the following questions on how satisfied you were with our project. Thank you! :) . Question Yes No .",
            "url": "https://lwu1822.github.io/fastpages/teamberries/feedback",
            "relUrl": "/teamberries/feedback",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Class Lesson Notes",
            "content": "Unit 1 Primitives . Note: Credit to Period 1&#39;s Primitives presentation for the information below . What are primitives? . Primitives include certain data types, such as integer, doubles, booleans, char, float, and long. Primitive names typically start with a lowercase letter, and if needed, subsequent words start with an uppercase letter. . To switch between primitive data types, casting can be used. . There are 5 types of operators: +=, -=, *=, /=, and %= and an increment and decrement operator: ++ and --. . Scanners . To take in input in java, the Scanner class needs to be first imported with import java.util.Scanner;. Next, a scanner object can be created with Scanner object name = new Scanner(System.in). To take in input, specify the data type that the scanner takes in with scanner.nextdata type . Unit 2 Objects . What are objects? . Objects are instances of a class. There are three steps to create an object: declaration, instantiation, and initialization. Declaration is specified through a type followed by the variable name. Instantiation instantiates the object with the new keyword. Initialization occurs the name of the constructor method is specified after the new keyword. . Creating objects . The syntax to create objects is: Class-name object-name = new constructor-name . Methods . Methods are defined with a return type (int, bool, etc. or void (no return type)) and the method name. . Static vs non static . A static method can only access other static methods, while a nonstatic method can access both static and nonstatic methods. . Math class . Important methods: Math.abs, Math.random() . Unit 4 Iteration . while loops . The syntax of a while loop looks like this: . while (condition) { } . Everytime the while loop executes, it first checks the condition. If the condition is true, the code inside the loop is ran. After the code finishes, the while loop checks again with the condition. . for loops . The syntax of a for loop looks like this: . for (initialize variable; condition; change variable) { } . Every time the for loop executes, it checks the condition. If the condition is true, the code inside the for loop is ran. After the code finishes running, the variable is incremented by the amount specified. . . There can also be nested iteration (ex: for loop within for loop) . for each loop . The syntax for a for-each loop looks like this: . for (dataType item : array){ } . This is especially useful for iterating through arrays. . Unit 5 Writing Classes . What are classes? . Classes are the blueprints for objects. They contain instance variables, constructors, and methods. Objects are instances of classes. . Access modifiers . public: Can be accessed in classes outside of the declaring class . private: Can only be accessed in the declaring class . Getters and setters . Getters help make variables read only. Setters allow write only permissions. . The syntax for getters is: . public data-type getName . Unit 6 Arrays . What are arrays? . Arrays can only be used to store one data type. They are different from ArrayLists in that they are not as flexible; the size of an array is fixed. . To create an array, you can either use constructors (dataType[] arrayName = new dataType[numerOfItems]), or you can use pre-initiliazed arrays (dataType[] arrayName = {elements}) . Traversing arrays . Arrays can be traversed using a for or while loop. . ArrayIndexOutOfBoundsException: This occurs when the loop tries to access a nonexistant index in the array. . for each loop . The syntax is: . for (dataType i : arrayName) { // code } . This is usually used to iterate through each item in the for each loop. .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/17/w8_classLessonNotes.html",
            "relUrl": "/2022/10/17/w8_classLessonNotes.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Unit 2 Using Objects",
            "content": "Learnings . This unit had some very important learnings for me. The first thing that I learned was that if two strings are created in the format of String string1 = new String(&quot;string&quot;), the .equals() method should be used to compare them. . The second thing that I learned was that there is a way to compare if the attributes of two objects are the same using the .equals() method. However, this requires some manual overriding of the .equals() method because by default, .equals() works the same as ==, which compares the object memory address. You can still compare if two objects are the same object with ==. . Notes . Objects are instances of a class. There are three steps to create an object: declaration, instantiation, and initialization. Declaration is specified through a type followed by the variable name. Instantiation instantiates the object with the new keyword. Initialization occurs the name of the constructor method is specified after the new keyword. . Creating objects . The syntax to create objects is: Class-name object-name = new constructor-name . Methods . Methods are defined with a return type (int, bool, etc. or void (no return type)) and the method name. . Static vs non static . A static method can only access other static methods, while a nonstatic method can access both static and nonstatic methods. . Math class . Important methods: Math.abs, Math.random() . Comparing . Numbers . Numbers can be compared using ==. Numbers can always be compared with == because they are primitive types and not objects. . int a = 5; int b = 5; if (a == b) { System.out.println(&quot;a = b&quot;); } . a = b . Strings . There are two ways to compare strings: == and .equals(). . You can use == to compare strings when they are declared like this: String name = &quot;string&quot;; . An example is shown below: . String a = &quot;foo&quot;; String b = &quot;foo&quot;; if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } . The two strings are equal . However, if your two strings are objects, you can not use == to compare them (see below): . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are not equal . Instead, you need to use .equals() to compare the two string objects. . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a.equals(b)) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are equal . Note: a and b are different objects, but they contain the same string of foo, which is what .equals() checks for. . Objects . There is a way to compare if two objects have the same attributes using the .equals() method. However, you need to first override the method to do so. . Below is an example: . To override the .equals() method, you need to create the method that takes in an object. In this example, the object is the format of Object obj. In the .equals() method, Object obj refers to test2. Next, obj needs to be typecasted to the class, in this case ObjectTest, for comparison to work. The return statement checks to see if the attributes of the two objects are equal. Note: this refers to test1 . public class ObjectTest { String attribute1; String attribute2; // IMPORTANT: forgot to specify String in parameters // see https://www.daniweb.com/programming/software-development/threads/346224/identifier-expected-in-constructor-definition // youtube reference for comparing objects: https://www.youtube.com/watch?v=X2AjBFZfFCY public ObjectTest(String attribute1, String attribute2) { this.attribute1 = attribute1; this.attribute2 = attribute2; } @Override public boolean equals(Object obj) { ObjectTest test = (ObjectTest)obj; return this.attribute1.equals(test.attribute1) &amp;&amp; this.attribute2.equals(test.attribute2); } public static void main(String[] args) { ObjectTest test1 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); ObjectTest test2 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); if (test1.equals(test2)) { System.out.println(&quot;Same attributes&quot;); } } } ObjectTest.main(null) . Same attributes . 1a . Initial attempt: . Comments: I started off alright; however, I was soon stuck at the for loop part. I knew that I had to use a for loop to perform iteration that will compare the substring to secret, but I did not know how to compare to certain characters within a string. After looking at part of the answers, I found that the program utilized the substring() method, which I did not know what it did. After some googling, I applied my knowledge to the code below in my second attempt. . public int scoreGuess(String guess) { int substring; int length = guess.length(); int score; for () score = substring * length * length; } . Second attempt . Comments: This attempt mostly matched the answer key. One thing that I did wrong, however, was that in my comparison in the if statement, I used == instead of .equals. I have seen .equals() before, but I have never used it, so once again, I had to do some googling. I learned that if you want to compare two objects, you would need to use the .equals() method. In this case, secret is an object, as indicated by this line of code: private String secret; . public int scoreGuess(String guess) { int length = guess.length(); int count; int score; for (int i = 0; i &lt; (secret.length() - (length - 1)); i++) { if (guess == secret.substring(i, length)) { count++; length++; } } score = count * length * length; return score; } . Correction: . public int scoreGuess(String guess) { int length = guess.length(); int count; int score; for (int i = 0; i &lt; (secret.length() - (length - 1)); i++) { if (guess.equals(secret.substring(i, length))) { count++; length++; } } score = count * length * length; return score; } . . 1b . Initial attempt: . Comments: I made this a lot more complicated than it needed to be 😳 . Mistakes: I forgot that objects do not need to be created within the findBetterGuess method since findBetterGuess and scoreGuess are in the same class. . Looking at the answer, I learned about the method called compareTo(), which allowed for comparison between strings. compareTo() returns an integer, in which if the integer is smaller than 0, the first string is alphabetically smaller than the second string. If the integer is greater than 0, the first string is alphabetically greater than the second string. If the integer is equal to 0 you guessed it , both strings are the same. . public String findBetterGuess(String guess1, String guess2) { WordMatch string1 = new WordMatch(guess1); WordMatch string2 = new WordMatch(guess2); int score1 = string1.scoreGuess(guess1); int score2 = string2.scoreGuess(guess2); if (score1 &gt; score2) { return guess1; } else if (score1 &lt; score2) { return guess2; } else { int smallGuess = Math.min(guess1.length(), guess2.length()); for (int i = 0; i &lt; smallGuess; i++) { String individualCh1 = guess1.substring(i, i); String individualCh2 = guess2.substring(i, i); int chNum1 = individualCh1.indexOf(individualCh1); int chNum2 = individualCh2.indexOf(individualCh2); if (chNum1 &gt; chNum2) { return guess1; break; } if (chNum2 &gt; chNum1) { return guess2; break; } } } } . Correction . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/16/w8_unit2Objects.html",
            "relUrl": "/2022/10/16/w8_unit2Objects.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "4.1 The Internet (AP CSP)",
            "content": "What is the Internet? . The Internet was developed to allow computers to communicate with each other. They do so by sending packets that consist of 0s and 1s. The packet includes the source and destination. . Computer system: Devices that are used for a similar purpose | Computer network: Computers that are connected to each other in order to communicate | Packet switching: The message that the computer sends is broken into many packets. These can be sent in a random order and are put in the original order once they arrive at the destination device. | Path: The journey (I couldn’t think up of a better word) of a packet from source to destination | Routing: Routers determine the best path to send a packet from source to destination | Bandwidth: The amount of data that can be sent in a network Units include bits per second | . . A protocol is the rules that determine how a packet is sent from source to destination. . There are many protocol models, such as OSI, and TCP/IP. . . TCP/IP model layers: . Application: Includes web servers and DNS DNS translates an IP address to a web URL that is easy for us to remember Protocols: HTTP, HTTPS | Transport: Protocols: TCP, UDP TCP: Slow, but reliable UDP: Fast, but unreliable | Internet: Consists of source and destination IP address, used for transportation of data The internet is scalable, it includes LANs and WANs | Network access: Deals with the hardware, associated with getting the information from binary Protocols: Ethernet NICs (Network interface cards) use the network access protocol and contain a MAC address (used to identify hardware) | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/10/16/w8_CB_4-1.html",
            "relUrl": "/cb/2022/10/16/w8_CB_4-1.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Spring Boot",
            "content": "JPA . JPA (Java Persistence API) allows access to data between Java objects. JPA includes many types of implementations, the most popular being Hibernate, which allows abstraction for object relational mapping (ORM). ORM allows a Java class to be mapped to a database. . The architecture of JPA includes several features such as Entity, which persistence objects within the database. . Repository . Spring Data JPA provides abstraction for Hibernate. It provides simplification by using the repository to access databases, which removes the need to use SQL. . A repository must extend from one of the three following repositories: JPARepository, PagingAndSortingRepository, or CrudRepository. Most of the time, it is extended to JPARepository . In the repository file, th interface is written as: public interface repository name extends JpaRepository&lt;&gt;. The question is, what does &lt;&gt; mean? . In &lt;&gt;, there are two generics that need to be configured. The first is the entity, and the second is the data type for the id. . How to create a Spring Boot JPA (In Progress) . First, create a file titled name.java. Within the file, mark the class as an Entity with @Entity, and mark the id with @Id. In addition, create getters and setters for each variable. . Controller . Create a file titled nameController.java. Use @RestController to mark the class as a controller .",
            "url": "https://lwu1822.github.io/fastpages/backend/2022/10/10/w7_springBoot.html",
            "relUrl": "/backend/2022/10/10/w7_springBoot.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Code Corrections",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . Changes: Change str(i) to str(i+1) since the index of an array starts at 0. . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: # Changed print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . Printing odd numbers . Change i=0 to i=1 to start at the odd number of 1 and not the even number of 0. . odd = [] i = 1 while i &lt;= 10: odd.append(i) i += 2 print(odd) . [1, 3, 5, 7, 9] . Change the modulo from 0 to 1 (odd numbers divide by 2 result in a remainder of 1) . numbers = [0,1,2,3,4,5,6,7,8,9,10] odd = [] for i in numbers: if (numbers[i] % 2 == 1): odd.append(numbers[i]) print(odd) . [1, 3, 5, 7, 9] . Printing a multiple of 2 and 5 . Add a simple elif statement so that if the number is divisible by 5, the program moves out of the if statement and does not repeat even if it is divisible by 2. . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) item = input(&quot;Please select an item from the menu&quot;) print(item) total = menu[item] print(&quot;The price of &quot; + item + &quot; is &quot; + str(total)) #code should add the price of the menu items selected by the user print(&quot;Your total price is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. burger The price of burger is 3.99 Your total price is: $3.99 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu. Enter &#39;done&#39; to finish&quot;) item = input(&quot;Please select an item from the menu&quot;) print(item) while item != &quot;done&quot;: total += menu[item] item = input(&quot;Please select an item from the menu&quot;) print(item) #code should add the price of the menu items selected by the user print(&quot;Your total price is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Enter &#39;done&#39; to finish burger burger fries drink done Your total price is: $10.96 . Hacks . Possible errors could pertain to first finding an API that provides a reverse dictionary, and then connecting it from frontend to backend. Other errors could occur when the reverse dictionary can not find a word based on the user&#39;s inputted definition or if the reverse dictionary outputs incorrect words. . | Test cases could be testing out each individual section of the code, for instance, first testing out one specific word before testing any input. By limiting the testing to one specific thing, we can first focus on the specific before expanding to the general. . | .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/09/w7_codeCorrection.html",
            "relUrl": "/2022/10/09/w7_codeCorrection.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "API with Jupyter Notebook",
            "content": "import requests url = &quot;https://dictionary-by-api-ninjas.p.rapidapi.com/v1/dictionary&quot; querystring = {&quot;word&quot;:&quot;bright&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;cc6d770f58msh120c53d95d27c68p1d2955jsn1898ff4fa031&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dictionary-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) wordDefinition = response.json().get(&#39;definition&#39;) word = response.json().get(&#39;word&#39;) print(&quot;Word: &quot;) print(word) print() print(&quot;Definition: &quot;) print(wordDefinition) . Word: bright Definition: See Brite, v. i. 1. Radiating or reflecting light; shedding or having much light; shining; luminous; not dark. The sun was bright o&#39;erhead. Longfellow. The earth was dark, but the heavens were bright. Drake. The public places were as bright as at noonday. Macaulay. 2. Transmitting light; clear; transparent. From the brightest wines He &#39;d turn abhorrent. Thomson. 3. Having qualities that render conspicuous or attractive, or that affect the mind as light does the eye; resplendent with charms; as, bright beauty. Bright as an angel new-dropped from the sky. Parnell. 4. Having a clear, quick intellect; intelligent. 5. Sparkling with wit; lively; vivacious; shedding cheerfulness and joy around; cheerful; cheery. Be bright and jovial among your guests. Shak. 6. Illustrious; glorious. In the brightest annals of a female reign. Cotton. 7. Manifest to the mind, as light is to the eyes; clear; evident; plain. That he may with more ease, with brighter evidence, and with surer success, draw the bearner on. I. Watts. 8. Of brilliant color; of lively hue or appearance. Here the bright crocus and blue violet grew. Pope. Note: Bright is used in composition in the sense of brilliant, clear, sunny, etc.; as, bright-eyed, bright-haired, bright-hued. Syn. -- Shining; splending; luminous; lustrous; brilliant; resplendent; effulgent; refulgent; radiant; sparkling; glittering; lucid; beamy; clear; transparent; illustrious; witty; clear; vivacious; sunny. Splendor; brightness. [Poetic] Dark with excessive bright thy skirts appear. Milton. Brightly. Chaucer. I say it is the moon that shines so bright. Shak. To be or become overripe, as wheat, barley, or hops. [Prov. Eng.] .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/09/dictionaryJupyterAPI.html",
            "relUrl": "/2022/10/09/dictionaryJupyterAPI.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Array List",
            "content": "What is an ArrayList? . An ArrayList is like an array, except better :) . The main problem with a regular array is that elements can not be added or removed from the array (can not change the array size). This is made possible with ArrayList . To begin, start by creating an ArrayList object: . import java.util.ArrayList; abstract class ArrayListDemo{ ArrayList&lt;String&gt; alphabet = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)); public ArrayListDemo() { } protected abstract void changes(); } . Add, edit, and remove elements . To add elements, use the add() method. To add an element at a specific index, use add(index, element). To add all elements in an array to another array, use addAll(index, array). To edit elements, use set(index, element). To remove elements at a specific index, use the remove(index) method, or to remove a specific element, use remove(element). To clear an array, use the clear() method. . Add elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.add(&quot;d&quot;); super.alphabet.add(1, &quot;z&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, z, b, c, d] . Edit elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.set(0, &quot;z&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [z, b, c] . Remove elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.remove(1); super.alphabet.remove(&quot;c&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a] . Add an array to another . public class SpecificArray extends ArrayListDemo { ArrayList&lt;String&gt; alphabet2 = new ArrayList&lt;String&gt;(Arrays.asList(&quot;z&quot;, &quot;x&quot;, &quot;y&quot;)); public SpecificArray() { } public void changes() { super.alphabet.addAll(1, alphabet2); System.out.println(alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, z, x, y, b, c] . Clear . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.clear(); System.out.println(alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [] . Array Info . To find the size of the array, use the size() method. To see the specific element at an index, use the get() method. indexOf(element) will return the first index that the element is in, while lastIndexOf(element) will return the index of the last occurrence of the element. To find the associated hash of the array, use the hashCode() method. The isEmpty() method will return true if the array is empty, and false if not. To check if the array contains an element, use the contains(element) method. To check if two arrays are equal to each other, use the equals(array) method, and to check if an array contains all of the elements in a collection, use the containsAll(array) method. To sort the elements in an ArrayList, use the sort() method. . ArrayList Info . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { System.out.println(super.alphabet); System.out.println(&quot;Size of alphabet array is: &quot; + super.alphabet.size()); System.out.println(&quot;Element of index 0 is: &quot; + super.alphabet.get(0)); System.out.println(&quot;Index of element b is: &quot; + super.alphabet.indexOf(&quot;b&quot;)); super.alphabet.add(&quot;a&quot;); System.out.println(&quot;Updated ArrayList: &quot; + super.alphabet); System.out.println(&quot;Last occurence of a is at index: &quot; + super.alphabet.lastIndexOf(&quot;a&quot;)); System.out.println(&quot;Hash code of alphabet is &quot; + super.alphabet.hashCode()); if (super.alphabet.isEmpty() == true) { System.out.println(&quot;alphabet array is empty!&quot;); } else { System.out.println(&quot;alphabet array is not empty!&quot;); } if (super.alphabet.contains(&quot;z&quot;) == true) { System.out.println(&quot;alphabet array contains the element z&quot;); } else { System.out.println(&quot;alphabet array does not contain the element z&quot;); } } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, b, c] Size of alphabet array is: 3 Element of index 0 is: a Index of element b is: 1 Updated ArrayList: [a, b, c, a] Last occurence of a is at index: 3 Hash code of alphabet is 3910592 alphabet array is not empty! alphabet array does not contain the element z false . Compare ArrayLists . public class SpecificArray extends ArrayListDemo { ArrayList&lt;String&gt; alphabet2 = new ArrayList&lt;String&gt;(Arrays.asList(&quot;z&quot;, &quot;x&quot;, &quot;y&quot;)); public SpecificArray() { } public void changes() { System.out.println(&quot;alphabet: &quot; + alphabet); System.out.println(&quot;alphabet2: &quot; + alphabet2); if (alphabet.equals(alphabet2)) { System.out.println(&quot;alphabet and alphabet2 are the same&quot;); } else { System.out.println(&quot;alphabet and alphabet2 are different&quot;); } if (alphabet.containsAll(alphabet2)) { System.out.println(&quot;alphabet and alphabet2 have the same elements&quot;); } else { System.out.println(&quot;alphabet and alphabet2 have different elements&quot;); } } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . alphabet: [a, b, c] alphabet2: [z, x, y] alphabet and alphabet2 are different alphabet and alphabet2 have different elements . Sort ArrayLists . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { alphabet.add(&quot;a&quot;); System.out.println(&quot;Modified alphabet ArrayList: &quot; + alphabet); alphabet.sort(Comparator.naturalOrder()); System.out.println(&quot;Sorted ArrayList alphabet: &quot; + alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . Modified alphabet ArrayList: [a, b, c, a] Sorted ArrayList alphabet: [a, a, b, c] .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/07/w7_arrayList.html",
            "relUrl": "/2022/10/07/w7_arrayList.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Java Backend API",
            "content": "Crime News API . . Map API . . How I created a table in Java backend using an API . This took me a whole day to figure out. . Learning about APIs is still an ongoing process for me, so below, I’ll document the things that I learned about APIs and what I picked up while coding. . The code that I started with was what I took from the RapidAPI website. I then used some code to parse the JSON response. This was the place that messed me up for a long time, as I kept receiving errors in my code. After hours of googling, I finally found the answer, and that fixed things up. . However, the most important things I learned was: . The API calling process in Java | Thymeleaf | API calling process in Java . First, an HTTP client needs to be created with HttpClient. Next, a request using HttpRequest is created to send a request to the HTTP client. Within the request, the type of request (GET), URI, and headers are specified. Putting it all together is build(). Then use the client to send back the HTTP request. . Thymeleaf . After receiving the JSON data, an issue that I ran into was to output the data into a table format on the frontend of Spring boot. I took a look at some of the programs already present in the spring portfolio, such as greet.html, knowing that it would have to convert backend data to frontend. Within the program, I noticed an interesting snippet of code which was ${name}. Googling the syntax lead me to learn about Thymeleaf, which is a Java template engine. This was really cool, because Thymeleaf changes Java data into HTML (which can actually be shown on a webpage). I’ll probably bore you with the details later when I update this blog further, but for now, you are spared :) Anyways, a simple Youtube search of “what is Thymeleaf” gave me an introduction of how to use this template language. The thing that was super useful that I learned from the video was that Thymeleaf uses th:each to iterate over arrays and lists. This allowed me to print the JSON data, which consisted of objects, into a table format. . . Misc . Benefits of using API include that it helps simplify the process between how the user interacts with the application and what data the application an receive from the server. . The benefits of backend implementation is that it allows for more control. For instance, the API access can be limited .",
            "url": "https://lwu1822.github.io/fastpages/backend/2022/10/05/w6_javaBackendAPI.html",
            "relUrl": "/backend/2022/10/05/w6_javaBackendAPI.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Deployment",
            "content": "Curl . . Making a change in Flask Portfolio and showing it on the website . . . .",
            "url": "https://lwu1822.github.io/fastpages/deployment/2022/10/04/w6_deployment.html",
            "relUrl": "/deployment/2022/10/04/w6_deployment.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Random",
            "content": ". © MapTiler © OpenStreetMap contributors . .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/10/03/mapAPI.html",
            "relUrl": "/js/2022/10/03/mapAPI.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "1.3 Collaboration",
            "content": "Program . A program is developed with an idea that aims to follow a purpose. . Developers need to investigate the issue and be aware of constraints (such as time), pay attention to user concerns. Methods of investigation include surveys or testing. . Afterwards, developers design the program through brainstorming, creating the user interface, and organizing. . Prototypes are created, and small parts are created to test each individual parts. . Last process is to refine. . Each contributor to the program should be properly credited in the documentation. . Documentation: An overview of the program that may include functions, events, and other specific aspects of the code. .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/10/02/w6_CB_1-3.html",
            "relUrl": "/cb/2022/10/02/w6_CB_1-3.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Fetch API Notes",
            "content": "Below is a documentation of me learning about APIs. . What is an API? . An API allows a developer to obtain data from web services. It performs abstraction to make tasks simpler for the user. Usually, an API acts between the application (what the user interacts with) and the server (contains the data, or resource). The process begins with the user creating an API call, which then proceeds with the application using the API to communicate with the server. The API then brings back the requested data to the user. . Types of APIs . REST API . The most common type of API is REST API. REST stands for Representational State Transfer. REST APIs are typically associated with JSON, although the payload (data that the API delivers), can be in the form of HTML or XML. REST is used because of its speed and reliability. It also allows services to be used through HTTP. . Parts of a REST API include: . Endpoint: Includes URI: The url | HTTP method: What the client wants to do with a resource Includes GET (get), POST (make), PUT (update), DELETE (remove) | Headers: Contains things required for authentication and information about the client and server | Body: Other info included in the request | . When the client wants to access a resource, it sends a HTTP Request to the server. The server responds with a HTTP Response that contains data, or the representation about the resource, not the actual resource itself. The format of the representation cna be in XML or JSON. . What is Fetch API? . Fetch enables the user to make HTTP requests to servers. The Fetch API includes the fetch() method, which can take in two parameters, the URL and options. . fetch() returns a promise that can be used with the .then() and .catch() methods as well as being able to use async/await. . Once the request finishes, promise will resolve into a Response object. . Response is an API wrapper for what was fetched. . Now, what is an API wrapper? . To understand this, a helpful website first explained what a wrapper is. Basically, a wrapper helps make an item simpler by “wrapping” over the item. For instance, it can use abstraction to help simplify code. It can also convert data to make it more compatible. . Thus, an API wrapper allows you to combine many API calls into one to make things simpler. . . Alright, where was I? Right, Response. . Feel like showing the response? Below is an example of reading the response if it is in raw text. (Don’t really understand it at the moment, will research more about it later) . fetch(&#39;/readme.txt&#39;) .then(response =&gt; response.text()) .then(data =&gt; console.log(data)); . Question: Is /readme.txt the URL? It looks like a file… Can a file be a URL? . I’m guessing /readme.txt is the URL to the README file. . Below is an explanation of a typical piece of code that you many find in a Fetch API: . .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) . Question to self: What is the difference between .then(data =&gt; console.log(data)) and .then(response =&gt; console.log(response))? . response: The response object that is returned by fetch. . response.json(): The response object does not return directly accessible data. Instead, the response needs to parsed into JSON using the json() method. . data: The JSON data . . You can also see the status code using the Response object. This can be accessed with the status property (response.status). . Quick lesson on status codes: . 200 is the status code you want, it means that the request was successful. | 404 means that what was requested does not exist | 500 means that there is a server error | . Note: fetch always succeeds, which means that even if the server responds with a 404, an error message would not show even if a catch statement was implemented. . Misc . Quick definition about entity: In programming, an entity is an object, which means it can include attributes and methods. . Allows access to the API through a specific programming language. . . Below is an example that uses the Fetch API to display airplane flight codes in a table: . IATA Code Name ICAO Code .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/10/01/w6_jsFetchAPINote.html",
            "relUrl": "/js/2022/10/01/w6_jsFetchAPINote.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Images",
            "content": "ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;-&quot;; } else if (g &gt;= 170) { str = &quot;*&quot;; } else if (g &gt;= 160) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;j&quot;; }else if (g &gt;= 140) { str = &quot;n&quot;; }else if (g &gt;= 130) { str = &quot;V&quot;; } else if (g &gt;= 120) { str = &quot;3&quot;; } else if (g &gt;= 110) { str = &quot;5&quot;; } else if (g &gt;= 100) { str = &quot;&amp;&quot;; } else if (g &gt;= 90) { str = &quot;g&quot;; }else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . . Explanation of code . First, the monaLisa object is created, which calls the Pics constructor and passes in a name of MonaLisa and an ext (extension) of .png. These are assigned to the attributes, creating an input file (images/MonaLisa.png), an output (resized) file (images/MonaLisa.png), and an output (ASCII) file (images/tmp/MonaLisa.txt). . Next, the setStats() method is called. The path of the input file is assigned to the path object. The number of bytes is also assigned, and then ImageIO reads the input file and obtains its width and height, assigning them to their respective variables. . Now going back to the main method, the monaLisa object calls the printStats() method and passes in the argument of &quot;Original&quot;. This basically outputs some information of the input file, such as its size, width, and height. As you can see in the output above, the printStats() method outputs, Original: 499298 389x413 images/MonaLisa.png. . Afterwards, the monaLisa object calls the resize() method with an argument of 33 (resize the image to 33%). An Image object is created. Note: this is really important, the Image object needs to be created out of the try catch block, because if it is created within, the scope of the Image object is within the try catch block and can not be accessed outside. See this for more info. Moving on, the width and height are defined based on the resized scale, and the input file is once again read into img. The resizedImg is obtained by using the getScaledInstance method and assigning it the resized width and height. Next, resizedImg is converted into a buffered image with the name of the resizedFile (images/tmp/MonaLisa.png). The resizedFile is then set as the path of the input file. Once again, the setStats() method is called. . Because of scope of variables, some values of the variables have changed. The path of the input file (inFile) is now assigned to path. The size of the resized file is recorded, and the file is also read in by ImageIO. Additionally, the width and height of the resized file is recorded. . Going back to the main method, the printStats() method is called. Same thing as before, this outputs Scaled: 55625 128x136 images/tmp/MonaLisa.png. . Lastly, the convertToAscii() method is called. Once again, the Image object needs to be set as null outside of the try catch block in order to fulfill the scope of the variable. The first try catch block ensures that if there is already an Ascii file in the output directory, the file would be removed. Next, the PrintWriter and FileWriter object is called to output text (ASCII characters) into the ASCII file (images/tmp/MonaLisa.txt). ImageIO then reads the input file. . Onto the for loop, each pixel of the image is iterated, and a value is calculated based on the RGB value of the pixel. The larger the value (closer to white, or 255), the less space the ASCII character will pick up. As for smaller values (closer to black, or 0), the ASCII character will take up more space. This is called by the asciiChar(double g) method, and it returns the ASCII character. . Grayscale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class Pics { final String inDir = &quot;images/&quot;; // location of images final String outDir = &quot;images/tmp/&quot;; // location of created files String inFile; String resizedFile; String grayscaleFile; String outFile; String ext; // extension of file long bytes; int width; int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.outFile = this.outDir + name + &quot;New.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void changePic() { BufferedImage img; try { File file = new File(this.outFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } test(); } protected abstract void test(); } . public class Grayscale extends Pics { public Grayscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed() * 0.299); int green = (int)(col.getGreen() * 0.587); int blue = (int)(col.getBlue() * 0.114); Color rgb = new Color(red + green + blue, red + green + blue, red + green + blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Grayscale monaLisa = new Grayscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Grayscale.main(null); . . Red . public class Redscale extends Pics { public Redscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); Color rgb = new Color(red, 0, 0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Redscale monaLisa = new Redscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Redscale.main(null); . . Blue . public class Bluescale extends Pics { public Bluescale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int blue = (int)(col.getBlue()); Color rgb = new Color(0, 0, blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Bluescale monaLisa = new Bluescale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Bluescale.main(null); . . Green . public class Greenscale extends Pics { public Greenscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int green = (int)(col.getGreen()); Color rgb = new Color(0, green, 0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Greenscale monaLisa = new Greenscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Greenscale.main(null); . .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/01/w6_img.html",
            "relUrl": "/2022/10/01/w6_img.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Creating a table using JavaScript",
            "content": "Submenu | JavaScript | JavaScript Table | API | . . . Below is the code that I used to create the table above in JavaScript: . &lt;script&gt; function Fruits(name, taste) { this.name = name; this.taste = taste; } &lt;!-- space --&gt; var fruits = [ new Fruits(&quot;apple&quot;, &quot;sweet, sour&quot;), new Fruits(&quot;mango&quot;, &quot;sweet&quot;) ]; &lt;!-- space --&gt; function Combine(fruits) { this.fruits = fruits; this.combine = []; this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); } &lt;!-- space --&gt; var printFruits = new Combine(fruits); &lt;!-- space --&gt; var outputHTML = &quot;&quot;; outputHTML += &quot;&lt;table&gt;&quot;; outputHTML += &quot;&lt;tr&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + &quot;Fruit Type&quot; + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + &quot;Taste&quot; + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;/tr&gt;&quot;; &lt;!-- space --&gt; var week = 0; for (var row of printFruits.combine) { outputHTML += &quot;&lt;tr&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + row.taste + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;/tr&gt;&quot;; } outputHTML += &quot;&lt;/table&gt;&quot;; &lt;!-- space --&gt; document.getElementById(&quot;output_div&quot;).innerHTML = outputHTML; &lt;/script&gt; . . Explanation of code: . An object called printFruits is created. This calls the Combine constructor, which uses information from the fruits array, which calls the Fruits constructor. This creates a key of name and taste and a value as set by the code. . Now, what does this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); do? Understanding the arrow function (=&gt;) took me awhile, but this is basically a shorthand way to write: . this.fruits.forEach(function(fruit) { this.combine.push(fruit); }); . which basically adds the elements in the fruit array into a new array called combine. . Afterwards, a table is created using HTML within JavaScript. The for loop loops over the combine array and outputs it as HTML in the table. . And that’s it! A table made in JavaScript. .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/09/25/w5_javascriptTable.html",
            "relUrl": "/js/2022/09/25/w5_javascriptTable.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "JavaScript",
            "content": "Submenu | JavaScript | JavaScript Table | API | . . The following code prints a message to the console . console.log(&quot;Hi&quot;); . Hi . If you type this in a normal JavaScript file though, this message would not show on the webpage. Instead, you have to go to Inspect Element (Ctrl + Shift + I in Chrome, using Windows), and go to the Console tab to view the message. . . Functions . Since I can&#39;t run the following code below in Jupyter Notebook, I&#39;ll attach a screenshot of running the output in terminal. . The reason this can&#39;t be run Jupyter Notebook (although I&#39;ll have to do more research about Jupyter Notebook to fully understand) is that Jupyter Notebook can&#39;t take input for JavaScript using prompt or readline. Maybe there&#39;s another way to have Jupyter Notebook take in input, but that&#39;ll take me a long time to research. . As shown below, I made a calculator with the code below. I created the functions add, subtract, multiply, and divide. . const prompt = require(&#39;prompt-sync&#39;)(); var total = prompt(&#39;1st number? &#39;); var num2 = prompt(&#39;2nd number? &#39;); var operation = prompt(&#39;Add/subtract/multiply/divide? Type: +/-/*, or /: &#39;); function add(total, num2) { return Number(total) + Number(num2); } function subtract(total, num2) { return Number(total) - Number(num2); } function multiply(total, num2) { return Number(total) * Number(num2); } function divide(total, num2) { return Number(total) / Number(num2); } while (num2 != &quot;end&quot;) { if (operation == &quot;+&quot;) { total = add(total, num2); } if (operation == &quot;-&quot;) { total = subtract(total, num2); } if (operation == &quot;*&quot;) { total = multiply(total, num2); } if (operation == &quot;/&quot;) { total = divide(total, num2); } console.log(&quot;Your result is &quot; + total); num2 = prompt(&#39;2nd number? &#39;); if (num2 == &quot;end&quot;) { break; } operation = prompt(&#39;Add/subtract/multiply/divide? Type: +/-/*, or /: &#39;); } console.log(&quot;Your result is &quot; + total); . Running the code in terminal, here is the output. . . Array and objects . function Fruits(name, taste) { this.name = name; this.taste = taste; } var fruits = [ new Fruits(&quot;apple&quot;, &quot;sweet, sour&quot;), new Fruits(&quot;mango&quot;, &quot;sweet&quot;) ]; function Combine(fruits) { this.fruits = fruits; this.combine = []; this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); } printFruits = new Combine(fruits); console.log(printFruits.combine); . [ Fruits { name: &#39;apple&#39;, taste: &#39;sweet, sour&#39; }, Fruits { name: &#39;mango&#39;, taste: &#39;sweet&#39; } ] .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/25/w5_javascript.html",
            "relUrl": "/2022/09/25/w5_javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Creating a table using JavaScript for the CSA Team Project",
            "content": "This is a table created with JavaScript (not HTML) that displays the age and roles of the team members on the Crimebusters project. . . .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/09/25/w5_csaJavascriptTableTeam.html",
            "relUrl": "/js/2022/09/25/w5_csaJavascriptTableTeam.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "1.2 Collaboration",
            "content": "Examples of computing innovations: . Applications, such as games | Physical devices, such as computers | Systems, such as E-mail Ex: Systems for accessing and storing data | . Purpose of computing innovations is to help solve problems. . . Event driven programming: Program statements are ran when events are triggered . Forms of input and output: Tactile, audio, visual, text . For example, smartphones rely on tactile input. . Example of an input on a smartphone: Swipes . Action: Triggers an event . . Program: Group of statements, or commands . How to explain a code segment: . State it’s function | Explain how it performs its function | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/25/w5_CB_1-2.html",
            "relUrl": "/cb/2022/09/25/w5_CB_1-2.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Fibonacci",
            "content": "For loop . I first created an array that contained two elements. Within the for loop, the first element of the array is added to the list of numbers through the setData method. Next, I changed the first element of the array into the second element, and the second into the sum of the first and second element, and allowed the for lop to repeat. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ } . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init(){ super.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; super.size; i++) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = for loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 6 milliseconds . . While loop . Same method of approach as the for loop. This time, I used a while loop that would repeat when i incremented (with i++). . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init(){ super.name = &quot;while loop&quot;; long[] nums = new long[]{0, 1}; int i = 0; while (i &lt; super.size) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = while loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 12 milliseconds . . Recursion . I created a method called recursiveLoop(), and then had it call its method repeatedly until the size of the Fibonacci sequence was reached (20 in this case). . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init() { super.name = &quot;recursion&quot;; long[] nums = new long[]{0, 1}; test(0, nums); } public void test(int i, long[] array) { long[] nums = array.clone(); if (i &lt; super.size) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; test(i, nums); } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 3 milliseconds . . Skills . Skill 1.B: Determine code that would be used to complete code segments: (Explained in each type of code above) . | Skill 4.C: Determine if two or more code segments yield equivalent results . It&#39;s pretty simple to see how the for loop and while loop achieve the same results. In the for loop, each line of code is implemented, and after the program reaches the end of the loop, the loop is repeated (with i incrementing by 1), until i = 20 (the value of size). . The recursion is a little bit more complicated. First, the recursive loop is called within the init method, and then proceeds to run through the code. At the end of the code, i is incremented by 1, and the last line of code, recursiveLoop(i) tells the program to run the recursive loop again, repeating until i = 20. . tldr; As a result, all three methods achieve the same result in that the code within the loop is ran, i increases by 1, which causes the loop to run again until i = 20. . | Skill 5.A: Describe the behavior of a given segment of program code: (Explained in each type of code above) . Timing: Using system.nanoTime(), it seems as if the for loop runs the fastest, followed by recursion, and lastly the while loop. . | . Things I learned . From the example of Fibo using stream. . this(): Calls constructor with the same name in the current class . Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}): . new long[]{0, 1}: Creates an array, becomes the seed for the Stream.iterate method | f -&gt; new long[]{f[1], f[0] + f[1]}: Lambda expression, passing in the parameter of f into the function new long[]{f[1], f[0] + f[1]} | . .limit(this.size): Set a limit (in this case, 20), to the number of times the stream iterates . .forEach(f -&gt; this.setData(f[0]));: For each item, run the setData() method . Hashmap: Unlike an array that is accessed through an index, a hashmap uses key/value pairs. As a result, the index of a hashmap can be an string, whereas the index of an array is an integer. . . An explanation of the Fibo code using streams. . Looking at the code was pretty challenging, but after searching up each unfamiliar piece of code, I had a general idea of what the program does. . I will explain below what the code does so that it can further my understanding of Java. . By creating the fib object, the Fibo() constructor is ran. this(20); points to the Fibo(int nth) constructor. The code within the constructor is ran, mainly use to assign variables to various values. Next, the init() method is ran. An array is created within the stream. The stream will iterate 20 times, as determined with .limit(this.size). Next, for each item (the element in the array), the setData method will run with f[0] as an argument. When the stream iterates again, the array will change it&#39;s first element to the second element, and its second element to the sum of the first and second element. Now onto running the setData(long num) method. First, the element of f[0] will be added to the already created list. Next, a hashmap will be created, with a key with the index number, and a value with a duplicate of the list (list.clone();). Going back to the main method, fib.print(); runs the print() method. I&#39;ll skip the basic calling the variable stuff and proceed to the second System.out.println, in which the getNth() method is ran. Here, the last element of the list (and you have to access the last element with this.size - 1 because there are 20 elements in the array, so the 20th element is accessed using the 19th index since indexes start at 0) is obtained to print the 20th Fibonacci number. Next, the entire Fibonacci array and hashmap is printed. Finally, the for loop outputs each of the values for the specified key. The Fibonacci sequence for each number is printed successfully because each key is associated with a list, which contains the Fibonacci sequence for the sequence number. .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/24/w5_fibonacci.html",
            "relUrl": "/2022/09/24/w5_fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "CSP Project Planning",
            "content": "Our Aim . We want to prioritize the customer before anything else; here’s how this will be done: . Our website will run smoothly with minimal errors | Try to keep our website as engaging as possible | Listen to reviews and make changes as necessary | Make the results accurate | About the Project . In this project, we are making a reverse dictionary. We were inspired by many students’ studious and driven culture and wanted to create a site that could help them. A problem that we noticed among many students, especially those in advanced English courses, is that they often don’t know or can’t remember the word they want to use. Through the use of this website, we want to help these students allowing them to do well where ever they choose to use this website. . How is This Done . In order to achieve this, we first need to get a basic understanding of how reverse dictionaries work and how to code them. After searching on Google, we came across many fascinating sites, some even explaining the basics of a reverse dictionary. Essentially it is looking for an output similar to the combination of the inputs. One of our ideas was to make the user input either the definition of the word or other words related to the word they need. For example, if you’re searching for the word “apple,” you can input “fruit,” “red,” and “grows on trees” to get your result. And currently, we are planning to code most of this with Python, use HTML to display everything, and use JavaScript to allow the user to interact with the results. . Create Performance Task Categories . 1 Program Purpose and Function . See above . 2 Abstraction . Each synonym could be stored in a list, which would either be manually created by us (less likely), or given in the API (more likely). The hard part would be to find a reverse dictionary API. . Managing Complexity . By using a list to store the synonyms of words, the code would be simplified so that multiple variables, each storing only one word, would not be needed. . 4 Procedural Abstraction . We could make functions that include that collect the user’s inputs of various word definitions. These inputs would then need to be processed by comparing with the information in the API and then being able to output the ideal words to frontend. . 5 Algorithm Implementation . Recursion can be used to repeatedly find definitions that contain certain keywords that the user implemented. if statements could be used to select the words with the closest definition and display them under a category, then select the words with a moderate level of closeness and put them in another category. . 6 Testing . Many parts of the program would include the need for testing. First of all, we need to implement an API and connect the frontend with the backend so that the frontend can display information about the API. This would require testing by inputting many definitions and seeing if the outcome word is what is desired. . Team Scrum Board . Team Scrum Board . Agile Methodology Diagram . . Our team used Slack as a form of communication to plan out our project. . .",
            "url": "https://lwu1822.github.io/fastpages/csp/2022/09/17/w5_CSPProjectPlanning.html",
            "relUrl": "/csp/2022/09/17/w5_CSPProjectPlanning.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "1.1 Collaboration",
            "content": "College Board Big Ideas Learning Objectives: . CRD-1.A Explain how computing innovations are improved through collaboration. . CRD-1.B Explain how computing innovations are developed by groups of people . CRD-1.C Demonstrate effective interpersonal skills during collaboration. . Essential knowledge: . CRD-1.A.1 A computing innovation includes a program as an integral part of its function. . CRD-1.A.2 A computing innovation can be physical (e.g., self-driving car), nonphysical computing software (e.g., picture editing software), or a nonphysical computing concept (e.g., e-commerce) . CRD-1.A.3 Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. . CRD-1.A.4 Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. . CRD-1.A.5 Consultation and communication with users are important aspects of the development of computing innovations. . CRD-1.A.6 Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives. . CRD-1.B.1 Online tools support collaboration by allowing programmers to share and provide feedback on ideas and documents. . CRD-1.B.2 Common models such as pair programming exist to facilitate collaboration. . CRD-1.C.1 Effective collaborative teams practice interpersonal skills, including but not limited to: . communication | consensus building | conflict resolution | negotiation | . Collaboration allows people who specialize in different areas to work together to reach an end product. It can involve the combination of the diverse ideas of many people. Skills that are developed through collaboration include: communication, consensus building, conflict resolution, and negotiation. . Computing innovation: A physical or nonphysical program. Examples include VSCode (nonphysical) or a self driving car (physical). . Collaboration can take place in many formats. Examples include: pair programming (one as driver, one as navigator), think-pair-share (students think through a problem alone, discuss in pairs, then share with class). . Online tools for collaboration: . repl.it | Github | Shared document/folder | . Comments in code also help with communication to yourself and others reading your code. .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/17/w4_CB_1-1.html",
            "relUrl": "/cb/2022/09/17/w4_CB_1-1.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Iteration with 2D array",
            "content": "The following code outputs the monkeys horizontally in an imperative programming style. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts // PREVENT NEW LINE FROM POPPING UP //System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . With objects . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); } } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ . How to access arrays? . If you want to access individual elements within an array, you can access them with arrayName[row index][column index]. . What if I want to print all of the contents in an array? . We can use a for loop to achieve this. . for (int row = 0; row &lt; totalRow; row++) { for (int column = 0; column &lt; totalColumn; column++) { System.out.println(&quot;arrayEx[row][column]&quot;); } } . Complete song . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public void doctor(int num) { String doctorMsg[] = {&quot;.-.&quot;, &quot;===(_)== No more monkeys jumping on the bed!&quot;, &quot;// 6 6 /&quot;, &quot;( 7 )&quot;, &quot; &#39;--&#39; /&quot;, &quot; _ ._/&quot;, &quot;__) (__&quot;}; System.out.println(doctorMsg[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); MonkeyLoop doctorText = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); System.out.println(&quot;One fell off and bumped his head.&quot;); System.out.println(&quot;εミ(×。×)ο&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); for (int i = 0; i &lt; 7; i++){ doctorText.doctor(i); } System.out.println(&quot;&quot;); } System.out.println(&quot;oof&quot;); } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ oof .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/14/w4_2D_Array.html",
            "relUrl": "/java/2022/09/14/w4_2D_Array.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "AP CSA 2022 and 2016 FRQ",
            "content": "2022 #1a . First attempt: . public int getScore() { Level goal = new Level(); Level points = new Level(); int pointTotal = 0; if (goal.goalReached()) { pointTotal = points.getPoints(); } } . I got stuck at the point above, so I looked at part of the answers. Here is my attempt afterwards: . What the code does: . A variable pointTotal is created that records the amount of points that the player earns. Since the points from level 2 and level 3 are earned only if the previous level is completed, I created if loops within the if loop. . After the points from the levels are totaled, the code then tests the ifBonus method. This is a boolean if statement where if ifBonus is true, the total score would triple. . public int getScore() { int pointTotal = 0; if (levelOne.goalReached()) { pointTotal += levelOne.getPoints(); if (levelTwo.goalReached()) { pointTotal += levelTwo.getPoints(); if (levelThree.goalReached()) { pointTotal += levelThree.getPoints(); } } } if (isBonus()) { pointTotal *= 3; } return pointTotal; } . Questions: . Why are objects not defined to call goalReached and getPoints? | . After some researching, I learned from this video that if methods are in the same class (isBonus and getScore are in the same class), an object does not need to be created to call the method. . #1b . public int playManyTimes(int num) { int scores[]; int maxScore = 0; for (int i = 0; i &lt; num; i++) { play(); scores[i] = getScore(); } for (int i = 0; i &lt; num; i++) { if (scores[i] &gt; maxScore) { maxScore = scores[i]; } } return maxScore; } . An array wasn&#39;t needed. All you had to do was compare the scores within the for loop like this: . public int playManyTimes(int num) { int maxScore = 0; int score = 0; for (int i = 0; i &lt; num; i++) { play(); score = getScore(); if (score &gt; maxScore) { maxScore = score; } } return maxScore; } . . 2016 #1a . Initial thoughts: . When I first read the question, I did not know where to start, so I looked at part of the answers to guide me on what to learn. . Looking at this, . . I was confused as to what List&lt;String&gt; was, so I googled it. . I learned that List&lt;String&gt; is used to make an object that can store the array list. For instance, List&lt;String&gt; list = new ArrayList&lt;String&gt;(); . I also saw how an array list can also be created with ArrayList&lt;String&gt;. The difference between ArrayList&lt;String&gt; and List&lt;String&gt; is that with List&lt;String&gt;, you can typecast the array list into a different type of list; however, you can&#39;t do that with ArrayList&lt;String&gt;. . The code below is what I got started with before I became stuck again. . public class RandomStringChooser { private List&lt;String&gt; words; public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); } } . Once again not knowing how to proceed, I took a look at the answers and came upon this: . . Because I had no idea what the syntax meant, I hopped onto Google and did some searching. . So, for (String singleWord : wordArray) is an example of a for-each loop. A for-each loop allows you to loop through the elements in an array list. . Below is a simple example of a for-each loop: . public class ForEachDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); for (String i : fruits) { System.out.println(i); } } } ForEachDemo.main(null); . apple pineapple mango . This essentially creates is the same as using a regular for loop, and printing out each index in the array list using .get. .get returns the element specified in the index number. . public class GetDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); // same as: // for (String i : fruits) { // System.out.println(i); // } for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } GetDemo.main(null); . apple pineapple mango . The code below is my continued attempt at answering 1a, after learning about the for-each loop. . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { return words.remove((int)(Math.random() * words.size())); } } } . This was close, but I forgot that NONE should be the output once all of the elements in the array list have been used. The correct answer is: . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { // forgot to write an if statement if (words.size() &gt; 0) { return words.remove((int)(Math.random() * words.size())); } return &quot;NONE&quot;; } } } . Concluding thoughts . This question was hard mainly because I had no idea what an array list was prior to doing this question. Although I looked at the answer key a few times, I researched all of the code that I did not understand to help me learn what an array list was, how to create it, and how to use iteration with array lists. . . 1b . Explanation: . If I&#39;m understanding correctly, when the object letterChooser is created, the RandomLetterChooser constructor will run. Since we want to create an array of strings, we would use the super keyword to call the getSingleLetters method, which will split the word into an array of strings. Then, System.out.print(letterChooser.getNext()); is ran, which will call the superclass&#39;s constructor and then run the getNext method. This will randomly output the characters. . The code below matched the answer key. . However, one thing that I wondered as I was examining the answer was, why was there no super() in RandomLetterChooser, which would call the superclass (RandomStringChooser). The answer, after some googling, told me that even if you don&#39;t type super(), the superclass will still implicitly be called. . public RandomLetterChooser(String str) { super(getSingleLetters(str)); } .",
            "url": "https://lwu1822.github.io/fastpages/ap_test_prep/2022/09/14/w4_2016_2022CSAFRQ.html",
            "relUrl": "/ap_test_prep/2022/09/14/w4_2016_2022CSAFRQ.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Create Performance Task",
            "content": "Notes . I watched this video and this to learn more about the requirements for the create task. . Some notes that I took down for future reference: . The code can be written in any programming language that satisfies the requirements. . | Requirements include having: input, list that manages complexity, procedure with algorithm, a call to the procedure, and output . | A video demonstrating the code will also be required. Within the video, you will need to show at least one input and output and the program&#39;s function. . | . Speaking of functions, there is a difference between the word &quot;function&quot; and &quot;purpose&quot;: . Purpose: The problem that is being solved/something that you pursue for a creative interest . | Function: How the program acts when you run it . | . While we&#39;re at it, some other vocab that I was unfamiliar with 1: . Procedure: Same thing as function . | Algorithm: Code that performs a specific action . | . . Anyways, back to the notes: . In addition to the code and a video, you will also need to submit a written response. A written response consists of four parts, questions 3a-3d. . | 3a. You will be writing about the program&#39;s purpose. Why did you create this program? You will also be documenting the program&#39;s function. Remember: Function and purpose are two different things! . | 3b. How does your list manage complexity? . | 3c. What does your procedure do, and make sure to talk about your algorithm. . | 3d. Testing! Make two different test scenarios for your code. . | . . Plagiarism . Obviously, plagiarism is a serious thing, so don&#39;t do it. However, there are some tiny things that you may have to pay attention to while creating your program to ensure that you don&#39;t get caught for plagiarizing. . Anything that is not your own code - this includes libraries - must be cited . | If you are using pictures or music that is not yours, cite that too . | . . Citing doesn&#39;t have to be anything fancy, just note that you used someone else&#39;s work somewhere in your code. . Ideas . I&#39;m still thinking of some ideas for my create task. The one that I&#39;m most inclined to creating is a schedule/planner. . A record of how this project would fulfill the create task requirements: . Input: User input would be typing into a text box of their tasks for the day. User will also specify a certain amount of hours that they have to work that day. . | List: The user input of assignments will be stored into a list that contains all of the tasks. . | Procedure and algorithm: Most likely to calculate the amount of time each task should be spent on . | Output: Output will be a calculation of how long each task should be spent on for the day. Output may also give certain times to do the task. . | . . A few other notes: . The program will most likely start by equally dividing the total time amongst all activities. By entering more input, the user is able to change how many hours they want to spend on a task based on the task&#39;s priority. | . Plans for AP MCQ . Each week, I&#39;ll blog about what I learned that&#39;s related to the APCSP test prep. . | I can add vocab on the vocab page (on my blog). This can serve for to record of what I learned and also a future reference for me to study. . | . 1. Paraphrased from CollegeBoard↩&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://lwu1822.github.io/fastpages/create-performance-task/2022/09/11/createTaskLog.html",
            "relUrl": "/create-performance-task/2022/09/11/createTaskLog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Thoughts from the video",
            "content": "Problem: . Many students are so stressed from academics that it is hard to also to have some time to just relax and have fun. . | It becomes hard to focus on so many opportunities that surround us . | Depression, anxiety, stress, etc. . | . Solution (how to feel less stressed): . Positive psychology: What is the secret to be happy? . | Behavior change: How we form habits and create choices? How do we change our behavior to become better? | How we become happier over time | . How to become happier . Take time to feel gratitude | Socialize | Be mindful | Exercise | Sleep | . 10 insights . We can control our happiness | Things in life don’t matter as much as we think | It takes effort to be happy | Repetition, repetition, repetition . Your mind is lying to you about what it means to be happy | Ex: The assumption that more money makes you happier. -&gt; The more money you have, the more likely you’ll want more. . Socialize | Help others | Be grateful | Jot down what you are grateful for. . Exercise, sleep sleep sleep sleep sleep | Pay attention to what you’re doing, focus on the small, happy things in life | Be wealthy in time, not necessarily in money | Gratitude: School: I’m grateful for all of my friends in school. They help make going to school everyday fun and something to look forward to. I know that if I ever need help, I can count on them, and for that, I am thankful. . Home: I’m thankful to my parents for supporting me, especially when at times, high school is hard and makes me more stressed (haha, like what this whole blog post is aimed to resolve). I’d like to give a special shoutout to my mom, because even though sometimes I can get a little frustrated, I know she wants the best for me and I really appreciate all of what she has done for me. . Additional things I’m grateful for: . My AWS deployment worked!! Only minor issue was I forgot to type sudo for one of the commands, and it took me half an hour to find out (˚ ˃̣̣̥⌓˂̣̣̥ ) | The fantastic shrimp and mooncake I just ate | Reading on a rainy day | Walking outside to relax | The small things in life :) | . . Goals: . Think about what I am grateful for more often | Practice some of the insights noted above when I feel stressed | Sleep at least eight hours everyday | Maintain a work life balance | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/09/09/w3-video.html",
            "relUrl": "/misc/2022/09/09/w3-video.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "App Lab Plan",
            "content": "Here is the link to my app. . Subject . Since I’m in AP Stats, I decided to create a statistics quiz. . Questions . What is the mean of the following set of numbers: 5, 8, 9, 15, 16? | Normal distribution picture: What percent of data lies between one standard deviation of the mean? | A class of 30 students were surveyed on how many hours they sleep. The average was 7 hours with a standard deviation of 1.5 hours. What percentage of students sleep less than 8 hours? | Initial planning with partner . Shreyas and I planned out a general format for how we would make our individual apps. . We planned out four stages to make the app: design, brainstorm, implementation, and finishing. . We both created quizzes with three questions. Some of the code that we planned on excessive use was the onEvent function, which allowed an action to happen, such as switching the screen, given that something has occured, such as the click of a button. . Design . My app consists of six screens: Homepage, questions 1-3, end screen, and a finish screen. . Below are some pictures of what the initial design looked like: . . . After the initial design, I made a few revisions, namely changing the font, adding buttons (originally, the user had to click the screen), and adding radio buttons for the multiple choice selection. . An intermediate photo where I added a button: . . One of my screens on the final design: . . Coding . My code is relatively simple. A majority of the code used the onEvent function. I used the function for two purposes, the first was to change the screen when the Next button was pressed, and the second was to increase the score if the correct multiple choice was selected. . . Something else I made additionally was the use of a list that recorded if the user answered each individual question correctly. At the end of the quiz, the person would be able to receive feedback on what they answered correctly and anything that they could improve on, if needed. . I accomplished this by creating a list with the name of questionRight. The index of the array corresponded to the question, so if the user answered correctly on the first question, questionRight[0] would have a value of 1. At the end of the quiz, the questions that had a value of 1 would have a congratulations message, and the questions that had a value of 0 (incorrect) would have an explanation on how to arrive at the correct answer. . Explanations of code . This is a screenshot of part of my code. The rest of my code followed basically the same format. If you wish to check out my code, you can do so here. . . Here’s how the code works: . The first block of code is an onEvent function, in which when the next button (q1ButtonNext) was pressed, the app screen will change to the next question (q2Screen). . The second block of code is another onEvent function. This time though, when choice B is selected (q1ButtonB), a predefined variable score will increase by 1. . . Now I’ll give an overview on the use of a list in my app. First, I created a list called questionRight that contains three elements, each with the value 0. . . Later on in the code, if the user selects the correct answer choice for the button, the value of the element would become 1. . . At the end of the code, I used an if-else statement to decide which feedback message to show. If the element of the index is 0, the feedback for the wrong answer would be show; otherwise, the feedback, for the correct message would show. . . I could use individual variables in the code, but I used a list partially in preparation for the AP CSP Create Task. I think using a list would help in that if the quiz had more questions, using a list would be more organized than creating an individual variable for each question. . Things I learned . The code I encountered in AppLab was new to me. I used the documentation 1 very frequently. . I had to learn most of the things I coded. The most important code that I learned was the onEvent function. You can use it to specify an action to do when a certain event occurs, such as the press of a button. . Documentation 1 and 2 &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/09/08/w3-app-lab-plan.html",
            "relUrl": "/code.org/2022/09/08/w3-app-lab-plan.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "If-Else Lesson",
            "content": "If . if is a conditional statement. It tests &quot;if the condition is true, then run the code within the if statement&quot; . The if statement syntax is like this: . if (condition) { // code } . Types of conditions: . a &lt; b | a &lt;= b | a &gt; b | a &gt;= b | a == b | a != b | true | false | . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to the current weather (rainy) // if the weather is rainy, remind the user to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . . If-else . The syntax for if-else statements are as follows: . if (condition) { // run this if condition is true } else { // run this if condition is false } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; // assign variable weather to sunny // if weather is rainy, remind to bring an umbrella // otherwise, no need to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else { System.out.println(&quot;No need for an umbrella!&quot;); } } } IfElseLesson.main(null) . No need for an umbrella! . . Else-if . else-if statements are written like this: . if (condition) { // run if condition is true } else if (condition 2) { // run if condition is false and condition 2 is true } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to rainy // if weather is rainy, remind to bring an umbrella // if weather is sunny, remind to bring a hat if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . Setting variable weather to sunny: . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring a hat! . . Putting It All Together . #1 . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;cloudy&quot;; // assign variable weather to cloudy // because it is cloudy, print that the weather is nice if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } else { System.out.println(&quot;Nice weather outside!&quot;); } } } IfElseLesson.main(null) . Nice weather outside! . #2 . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input if (questionNum == 100) { // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); // if answer is correct, add 100 points to score System.out.println(answer); if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below } else if (questionNum == 200) { System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } } else if (questionNum == 300) { System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } } else if (questionNum == 400) { System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } } else if (questionNum == 500) { System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . Switch case statements . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input switch (questionNum) { case 100: // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); // if answer is correct, add 100 points to score if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below case 200: System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } case 300: System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } case 400: System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } case 500: System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions (this is important, remember this for later). . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; 1 . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; 2 . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Now how is this useful? . Remember this? . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) 3 . 1. Reference↩ . 2. Reference↩ . 3. Reference↩ . Example in Coding . because what would De Morgan&#39;s law be if it&#39;s not applicable to coding? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . More examples: . This code reads: If it&#39;s not sunny and it&#39;s not cloudy and it&#39;s not snowy and it&#39;s not windy, then bring an umbrella. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!sunny &amp;&amp; !cloudy &amp;&amp; !snowy &amp;&amp; !windy) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . This code is kind of messy, huh? . How about this code? . This code reads: If it&#39;s not sunny or cloudy or snowy or windy, then bring an umbrella. . Better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!(sunny || cloudy || snowy || windy)) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . . A more complicated example... . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // huh??? if (!(!nopineappOnPizza &amp;&amp; !pineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! . Is this better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // if no pineapple on pizza or yes pineapple on pizza... // since there is a pineapple on pizza, then pineapple on pizza is good if ((pineappOnPizza || nopineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/07/w3-if-else.html",
            "relUrl": "/java/2022/09/07/w3-if-else.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Console Menu",
            "content": "The following is a console that incorporates our group&#39;s calculators. . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;2 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;3 - Vidhi&#39;s Print a Random Number&quot;); System.out.println(&quot;4 - Modulus Calculator&quot;); System.out.println(&quot;5 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); break; case 2: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 3: Scanner input5; System.out.println(&quot;This option will print a random number from 0 to 1&quot;); double random = (double) (Math.random()); System.out.println(random); break; case 4: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 5: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Lily&#39;s Average Calculator 2 - Vidhi and Riya&#39;s Temp Convertor 3 - Vidhi&#39;s Print a Random Number 4 - Modulus Calculator 5 - William&#39;s F=ma calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Lily Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 22.0 degree Celsius is equal to 295.0 in Kelvin 3: This option will print a random number from 0 to 1 0.2392119484083327 4: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 5: F=ma calculator Enter the mass: 5.0 Enter the accel: 2.0 Force calculator 5.0*2.0=10.0 0: Goodbye, World! . My menu . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Average Calculator&quot;); System.out.println(&quot;2 - Z Score Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; if (selection == 0) { System.out.print(&quot;Goodbye, World!&quot;); quit = true; } else if (selection == 1) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); } else if (selection == 2) { double x = 0; double avg = 0; double standardDeviation = 0; double z = 0; Scanner sc2 = new Scanner(System.in); System.out.println(&quot;Enter x: &quot;); x = sc2.nextDouble(); System.out.println(x); System.out.println(&quot;Enter avg: &quot;); avg = sc2.nextDouble(); System.out.println(avg); System.out.println(&quot;Enter standard deviation: &quot;); standardDeviation = sc2.nextDouble(); System.out.println(standardDeviation); z = (x-avg)/standardDeviation; System.out.println(&quot;Your z score is: &quot; + z); } else { //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Average Calculator 2 - Z Score Calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: Enter x: 10.0 Enter avg: 5.0 Enter standard deviation: 2.0 Your z score is: 2.5 0: Goodbye, World! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/05/w2-menu.html",
            "relUrl": "/java/2022/09/05/w2-menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Dictionary",
            "content": "Variables belong to a certain data type. Examples that we have seen before include: int, string, and bool. . Lists and dictionaries are also types. . Explanation of what the code does: . I first added three entries into the dictionary. Keys include FirstName, LastName, and some others that I created, such as Hobbies and Sports played. . I used a for loop to print the records from the dictionary. The for loop ranges from 0 to the length of the dictionary, in this example, 2. I then printed each record by printing the index of the dictionary (InfoDb[i]), starting from 0, then 1 and finally 2. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . For loop without index . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for record in InfoDb: print_data(record) for_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . While loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Recursive loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Reverse database . How the code works . This mainly used my code above. What I changed was using the reversed function for the for loop, which would print InfoDb[2], then InfoDb[1], and finally InfoDb[0]. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop_reverse(): for i in reversed(range(len(InfoDb))): record = InfoDb[i] print_data(record) return for_loop_reverse() . John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none . Add your own record to the database . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) print(&quot;Enter your info below!&quot;) firstName = input(&quot;First name?&quot;) print(&quot;First name? &quot; + firstName) lastName = input(&quot;Last name?&quot;) print(&quot;Last name? &quot; + lastName) bday = input(&quot;Birthday?&quot;) print(&quot;Birthday? &quot; + bday) book = input(&quot;Favorite books?&quot;) print(&quot;Favorite books? &quot; + book) food = input(&quot;Favorite foods?&quot;) print(&quot;Favorite foods? &quot; + food) hobby = input(&quot;Hobbies?&quot;) print(&quot;Hobbies? &quot; + hobby) sport = input(&quot;Sports played?&quot;) print(&quot;Sports played&quot; + sport) InfoDb.append({ &quot;FirstName&quot;: firstName, &quot;LastName&quot;: lastName, &quot;DOB&quot;: bday, &quot;Favorite books&quot;: [book], &quot;Favorite food&quot;: food, &quot;Hobbies&quot;: [hobby], &quot;Sports played&quot;: [sport] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Enter your info below! First name? Lily&#39;s Last name? Clone Birthday? July 24 Favorite books? lol Favorite foods? Rice Hobbies? Programming Sports playedNone Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Lily&#39;s Clone Birthday 🥳: July 24 Favorite books: lol Favorite food: Rice Hobbies: Programming Sports played: None . Learning . The purpose of lists and dictionaries are to collect information. . Add to dictionaries with .append(). . Dictionaries consist of key/value pairs. For example, &quot;FirstName&quot; is a key, while &quot;Lily&quot; is a value. . Application Programming Interface: Also known as API, it is the process in which data is shared between programs. Lists and dictionaries are the first step to learning about databases. . Code that I learned . d_rec: Stands for dictionary record. You can use it to call the specific information in the dictionary. . For example, print(d_rec[&quot;FirstName&quot;]) would print the specific value in the dictionary of the FirstName key. .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w2-dictionary.html",
            "relUrl": "/python/2022/09/05/w2-dictionary.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "Python Quiz",
            "content": "Explanation of code . I imported the getpass and sys library. The quiz first recognizes the user&#39;s username and path to the Python interpreter. . The quiz then asks a few questions and answers, which are included in a list. Using the for loop, I can use recursion to iterate through each index in the list. . import getpass,sys print(&quot;Welcome &quot; + getpass.getuser() + &quot;. Your Python interpreter is currently running on the path: &quot; + sys.executable) questions = [&quot;What is the name for code that does not change every time you run the program?&quot;, &quot;What is the Python command that allows user input?&quot;, &quot;What do you use to combine different data types within the print statement?&quot;, &quot;def foo(bar): What is bar also known as?&quot;, &quot;What comparison operator do you use in Python to test if two values are equal to each other?&quot;, &quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answers = [&quot;static text&quot;, &quot;input&quot;, &quot;concatenation&quot;, &quot;parameter&quot;, &quot;==&quot;, &quot;import&quot;, &quot;if&quot;, &quot;expression&quot;] questionNum = len(questions) score = 0 for i in range(questionNum): print(questions[i]) # This is solely so that the user can see the questions in the Jupyter Notebook output response = input(questions[i]) print(&quot;Answer: &quot; + response) # Again, to show the output if response == answers[i]: print(&quot;Correct!&quot;) score += 1 else: print(&quot;Incorrect! The correct answer is: &quot; + answers[i]) print(&quot;Your total score is: &quot; + str(score) + &quot; out of &quot; + str(questionNum)) . Welcome lwu1822. Your Python interpreter is currently running on the path: /home/lwu1822/anaconda3/bin/python What is the name for code that does not change every time you run the program? Answer: static text Correct! What is the Python command that allows user input? Answer: input Correct! What do you use to combine different data types within the print statement? Answer: ? Incorrect! The correct answer is: concatenation def foo(bar): What is bar also known as? Answer: parameter Correct! What comparison operator do you use in Python to test if two values are equal to each other? Answer: == Correct! What command is used to include other functions that were previously developed? Answer: import Correct! What command is used to evaluate correct or incorrect response in this example? Answer: if Correct! Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Answer: ? Incorrect! The correct answer is: expression Your total score is: 6 out of 8 . How the rest of this post will be structured . This post captures my learnings from this page. . I will first document my learnings, and then display the code and its output below. . . In programming languages, a lot of the things within parenthesis are called parameters. . For example, in the code below, Hello World! would be an argument. . Static text: Text that stays the same. . print(&quot;Hello World!&quot;) . Hello World! . . Input and output . This is known as dynamic, versus static. Dynamic means that a variable can change each time you run the code. For example, each time you run the code, the input could change. . In Python code, the things specified in parenthesis are known as parameters. For example, in the code below, usr_input is a parameter. . usr_input = input(&quot;Enter some text: &quot;) print(usr_input) . hi :) . . Function . Note: Indentation matters in Python . When creating a function, make sure to indent to tell Python which lines of code belong within the function (since Python does not use curly braces to delineate functions). . Functions are created with the def keyword. . def addNum(a, b): return int(a) + int(b) num1 = input(&quot;Enter 1st number: &quot;) print(&quot;Enter 1st number: &quot; + num1) num2 = input(&quot;Enter 2nd number: &quot;) print(&quot;Enter 2nd number: &quot; + num2) total = addNum(num1, num2) print(&quot;Your total is: &quot; + str(total)) . Enter 1st number: 1 Enter 2nd number: 2 Your total is: 3 . . Libraries . Libraries can be imported with the - you guessed it - import function. . Examples of libraries include getpass and sys. . import getpass import sys print(&quot;You are: &quot; + getpass.getuser()) print(&quot;Your Python interpreter is running at the file path: &quot; + sys.executable) passwd = getpass.getpass(prompt=&#39;Enter the password. Hint: what language does this program run in? &#39;) print(&quot;Enter the password. Hint: what language does this program run in? &quot;) print(passwd) if passwd == &quot;python&quot;: print(&quot;Welcome! &quot; + getpass.getuser()) else: print(&quot;Incorrect!&quot;) . You are: lwu1822 Your Python interpreter is running at the file path: /home/lwu1822/anaconda3/bin/python Enter the password. Hint: what language does this program run in? python Welcome! lwu1822 .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w1-python-quiz.html",
            "relUrl": "/python/2022/09/05/w1-python-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "HTML and CSS",
            "content": "I changed the theme from minima to minimal . . Overall, the minimal theme looked pretty similar to the minima theme. However, there were some problems with the new theme. . For some reason, when my window is maximized, the contents on the webpage are displayed incorrectly. . . But when I shrink my window, the contents are fine. . . I’m not sure why that is the case. Maybe if I have time, I’ll look into it. . . I reverted the theme back to minima. However, I wanted to change the background to something cool, maybe like a gradient. I used Vunsh’s blog as a starting point and used his dark mode .scss file (thanks!). Then, I changed the background color to a gradient using the linear-gradient command within the html, body, input, textarea, select, button block. . That’s pretty much all I changed. Looking at the .scss file, there were many parts of the code that I didn’t understand. By commenting and uncommenting each block of code, I was able to learn what they did. Here are my comments on some of the code. . . Some thoughts . I like the new theme, but I think there’s some things that I could change. . For instance, I don’t really like the font colors for the code here: . . However, this class isn’t mainly focused around CSS, so I’ll probably change the font colors only if I have time. . Table . Alright, I’m going to be honest. This took me hours to figure out, mainly because I had errors in my Liquid syntax because I forgot to include a space ╥﹏╥. . This is the page where I created my table and linked my weekly assignments. . I started off with a for loop using the {% for i in ([start num]..[end num]) %} template, where i is the week number. I then created each row in the table starting with the week number by printing {{i}}. I also used if statements ({% if i == # %}) and printed the links to my pages depending on the value of i. So if i == 0, I would print the links to Week 0, etc. .",
            "url": "https://lwu1822.github.io/fastpages/html/2022/09/05/2_html-css.html",
            "relUrl": "/html/2022/09/05/2_html-css.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "Jekyll and Liquid",
            "content": "this took me hours to research btw . While I was setting up my fastpages blog, I noticed this interesting line of code in index.html. . . And I thought, hey, this is interesting, what does {{site.baseurl}} do? . After some googling, I found that {{site.baseurl}} wasn’t something in Markdown. Turns out it’s actually Jekyll syntax. . So what does {{site.baseurl}} do? . Basically, baseurl is the directory under the URL of the website. 1 So for example, this blog’s URL is lwu1822.github.io, and the baseurl is fastpages. . So I can just do ![]({{site.baseurl}}/images/diagram.png). Saves a lot of typing. . Pretty cool, huh? 😊 . . Something else I encountered while making this post . To type {{site.baseurl}} in this Markdown file, apparently you have to use the {% raw %} and {% endraw %} template around {{site.baseurl}} . 2 . Like this: . {% raw %} {{site.baseurl}} {% endraw %} . . Also something I encountered just as I was writing the line above . Notice how I was able to write {% endraw %} above? Unfortunately, it’s not that simple to just type it directly into your IDE, like this: . :warning: Warning: Don’t do this, it will break your code: . {% raw %} {% endraw %} {% endraw %} . The reason is because the first {% endraw %} will be interpreted as ending the {% raw %} template. . So if you want to be able to type {% endraw %} in Markdown, you need to do the following 3: . Create a variable, in this example, I’ll name it openTag, and assign it to {%: . {% assign openTag = &#39;{%&#39; %} . | Use the {{ openTag }} variable anytime you want to type text that contains {% in it. . For example, to type the text {% endraw %}, you would do: . {{ openTag }} endraw %} . | . Even more something that I learned . Apparently, you also can’t type {% directly in the IDE, which would also break your code (took me a long time to debug （ꐦ𝅒_𝅒）) . Instead, you have to type: {{ openTag }} . . Things for me to contemplate on: . I noticed on the provided Fastpages Notebook Blog Post, you can add an image without the baseurl. For example, you can specify an image with ![](images/diagram.png). Not sure why that works, but I’m guessing it has something to with Jupyter Notebooks. . . baseurl &#8617; . | Liquid template language &#8617; . | I took the steps from here but quite frankly, I found the explanation a little confusing, so I simplified it as much as I could in this blog &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "relUrl": "/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "Alumni Panel",
            "content": "Takeaways . From today’s alumni panel event, I learned about the significance and prevalence of computer science. The skills learned in AP CSA and AP CSP are very applicable and can be used to solve real world problems. However, programmers face many difficulties in their coding career. For instance, Colin described about the constant error messages that are bound to show up while coding, which can leave a negative effect and greatly decrease motivation. One thing that really struck out to me, however, was the importance of google. Basically, any programming question you have can be solved by this very magical tool. Furthermore, PBLs not only occur in this class, but can also be found in colleges. For instance, Colin mentioned that in UCSD’s mechanical engineering, students will be tasked with a hands on project in their freshmen and senior year. The same methodologies still apply - scrum team and agile. Furthermore, not only is coding applied in CS majors, it is also used in other majors. For instance, Allison mentioned that stats majors are also required to program in R. A really cool example of where you could apply your coding knowledge was scripting. If you’re ever frustrated at repeating the same redundant tasks over and over again, hey- maybe try some automation :). Last but not least, a very important part of the event was the discussion of internships. Some tips that were brought up was to build a resume and to create some personal projects that demonstrate your passion for coding. Additionally, interaction with professors and TAs are a good idea to find research and programming opportunities. . . Notes that I took during the event . Challenge with compsci: . Error msg -&gt; keep motivation? | GOOGLE | Ego: People brag about internship Focus on own path | Work on own project | . | Learn computer theory in college (it’s different from high school programming) | Motivation: There’s always someone better than you | Don’t cut corner: Have a mindset to go above and beyond | Getting started There is no rigid structure telling you what to do | Don’t get restricted by your plan - be flexible | . | . Any PBL scenario in college? . UCSD mechanical engineering: 1 hands on project freshman and senior year Need to use scrum and agile flow | . | Study in group and work with other people | Learn what’s the best method to study | . Have you applied CS in your major if your major is not CS? . Convert data type, copy paste, manually -&gt; write script!! ;) | Matlab for mechanical student | Problem solving logic, working with Matlab | Jupyter notebook for technical paper | Stats majors: Program in R | . Existing college students, have you had a job with school/professor . Make a resume, talk with other students, find a way to stand out, what makes you unique? | Interact with a professor, ask if they have space in their labs | Interact with TAs | . Job/internships . Code Ninjas | Northrop Grumman | . Personal projects? . Companies look for personal projects | Have 2 or 3? | Visual projects are great | . Internships: . Have a resume | Know when to apply to internships, companies hire in September + November the year before the next summer | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Java Primitives",
            "content": "public class AvgCalculator{ public static void main(String[] args) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); } } AvgCalculator.main(null) . Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Mean: 3.0 . What I learned . Primitives include: int, double, boolean . String is not a primitive. . Code: Integer: int a . Double: double a . Boolean: boolean a . String: String a . To enable input, make sure to import the Scanner lirbary: import java.util.Scanner; . . Useful stuff learned while creating calculator: . if and while statements: . If the variable is an integer/double, you can use == . If the variable is a string, you must use .equals . Example: &quot;foo&quot;.equals(variableName) . . Playing with Code from Primitive Data Types . Variables . public class test { public static void main(String[] args) { int x = 5; System.out.println(&quot;This is an integer: &quot; + x); } } test.main(null) . This is an integer: 5 . Input + Output . import java.util.Scanner; public class Scanning { public static void main(String[] args) { Scanner test = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int input = test.nextInt(); System.out.println(input); System.out.println(&quot;Your number is: &quot; + input); } } Scanning.main(null); . Enter a number: 3 Your number is: 3 .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "Code snippets",
            "content": "Collapsible Note: do not tab in HTML unless you want whitespace Also very important: Make sure to put an extra line after ``, otherwise, Markdown will not show. [Reference](https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab) &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/28/good-code-snippets.html",
            "relUrl": "/misc/2022/08/28/good-code-snippets.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "code.org Notes",
            "content": "Lesson 2 . Class header: . public class ClassName { } . Main method: . public static void main(String[] args) { } . Lesson 3 . Create an object with: ClassName objectName = new ClassName(); . Lesson 6 . Subclass: Inherits the behaviors and attributes of a superclass . Inheritance: The subclass inherits the behaviors and attributes of the superclass . To extend a class, type: public class [subclass] extends [superclass] . Inside the extended class, you need to create the constructor signature for the subclass, and type super() to call the superclass constructor and methods. . Like this: . public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Lesoon 7 Methods . Methods are defined with: . public void [methodName]() { // code } . These can be later called with an object. . For example, in Lesson 7 #2, I created a method called turnRight(). This is then called by with myPainterPlus.turnRight(); . . . Lesson 9 Loops . While loops: while (condition()) {} . Lesson 10 Conditionals . If statements: if (condition()) {} . If else statements: . if (condition()) { // code } else { // code } . To specify something not happening, use !. . Ex: if (!condition()) {} // if condition is false, proceed with if statement . Lesson 12 Decomposition and Design . Important: Code readability is very important. Also, a method should contain few lines of code (around 1-10). Each method should only be used to perform one task. .",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org.html",
            "relUrl": "/code.org/2022/08/28/code-org.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post88": {
            "title": "code.org Answers",
            "content": "Lesson 2 . 2.1 . EXCEPTION error. No .java files are provided. Probably due to wrong file name. | No, wrong file name. | Yes, Java files must have the .java extension. | There is an error. The p in myPainter.move(); must be capitalized. | Yes, code is case-sensitive. | 2.2 . error: reached end of file while parsing | Need another } to finish code. . Yes, each opening curly brace needs a closing curly brace. | error: not a statement and error: &#39;;&#39; expected, meaning the command syntax is wrong. | Correct syntax: mypainter.move(); . See #3 | Yes, the error is fixed. | 3.1 . Painter starts at top left grid and faces east. | Stops at row 2 column 3, faces south. | Painter moves forward but does not paint because he has ran out. | Error because did not add () at Painter; | Added () |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org-answer.html",
            "relUrl": "/code.org/2022/08/28/code-org-answer.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post89": {
            "title": "APEL Notes",
            "content": "APEL . There are three areas of writing that APEL focuses on: rhetorical analysis, synthesis, and argumentative. . In Tri 1, we are learning rhetorical analysis. . Rhetorical analysis . Thesis . According to Collegeboard’s rubric, the thesis can be located anywhere within your essay. However, it is suggested to write your thesis somewhere in the intro paragraph, preferably as the last sentence. . The thesis must consist of two parts: a purpose verb and the author’s message .",
            "url": "https://lwu1822.github.io/fastpages/apel/2022/08/28/apel.html",
            "relUrl": "/apel/2022/08/28/apel.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post90": {
            "title": "Tools",
            "content": "Basic commands . ls: Lists the contents in the current directory . cd [file path]: Move to a directory . pwd: List your current directory . echo &quot;Moving to home directory with the cd command&quot; cd echo &quot;What directory am I in?&quot; pwd echo &quot;Moving to my vscode directory&quot; cd /home/lwu1822/vscode echo &quot;What directory am I in?&quot; pwd echo &quot;What files are within this directory?&quot; ls . Moving to home directory with the cd command What directory am I in? /home/lwu1822 Moving to my vscode directory What directory am I in? /home/lwu1822/vscode What files are within this directory? APCSA APCSP fastpages spring_portfolio test . Variables . To create variables, simply assign a value to a variable name. . Ex: x=5 . Reference variables with $[var] . text=&quot;Hello World!&quot; echo &quot;$text&quot; . Hello World! . Note: Single and double quotes are different! . See example below . text=&quot;Hello World!&quot; echo &quot;$text&quot; echo &#39;$text&#39; . Hello World! $text . Python versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Java versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Playing with some Regex . echo &quot;Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39;&quot; # What this bash script does: # Checks if there is output after grep (searching) for packages starting # with &#39;j&#39; and ending with &#39;s&#39; # First lists all conda packages, then filters to only show the package # names (excludes Version and Build Channel) with the cut command # The grep command uses some fun Regex # ^ means that the character following it (in parenthesis) must start at the # beginning # .*: &quot;.&quot;&quot; means any character, &quot;*&quot; means match the character before it # any number of times -&gt; &quot;.*&quot; means match any character any number of times # $: Character before it (s) must be at the end if conda list | cut -d &quot; &quot; -f 1 | grep &quot;^j.*s$&quot; ; then : else echo &quot;No packages starting with &#39;j&#39; and ending with &#39;s&#39;&quot; fi . Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39; jupyterlab_pygments jupyterlab_widgets . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/lwu1822/.local/share/jupyter/kernels/bash java /home/lwu1822/.local/share/jupyter/kernels/java javascript /home/lwu1822/.local/share/jupyter/kernels/javascript python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . Conda check for Jupyter . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . (I have checked Slack :)) . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$check&quot; fi . python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . . Hacks . To verify tools: . For many packages, you can type the name of the package and then --version, or you can grep from the dpkg -l list . java --version dpkg -l | cut -d &quot; &quot; -f 3 | grep -E &quot;^(java)&quot; . Python 3.9.12 java-common . To verify Conda, you can use the conda list command. I&#39;m not going to do this here because the output is huge, but you can see above where I used regex and grep to search for the specific things I want . main_dir=vscode/ fastpages_dir=fastpages/ cd cd $main_dir/$fastpages_dir ls # git pull origin master . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word .",
            "url": "https://lwu1822.github.io/fastpages/bash/2022/08/26/tools.html",
            "relUrl": "/bash/2022/08/26/tools.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post91": {
            "title": "LaTeX",
            "content": "LaTeX . Fastpages also supports LaTeX! So cool! . This is said to be the most beautiful math equation: . Ready? . Woah $e^{i pi} + 1 = 0$",
            "url": "https://lwu1822.github.io/fastpages/latex/2022/08/25/latex.html",
            "relUrl": "/latex/2022/08/25/latex.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post92": {
            "title": "Jupyter notebook post",
            "content": "Intro . Hi! This post will just be me playing around and explaining how to use Jupyter notebook in VSCode. I don&#39;t know about you, but VSCode&#39;s documentation is super long and wordy, so I&#39;ll try to use simple English and incorporate some humor within :) . This page will also include some tips and tricks that I found while using Jupyter Notebook, or some things that I struggled with. . Information on this page will also based on the descriptions on this page . What is Jupyter Notebook?? . For the long and wordy explanations that pop up when you google: Jupyter Notebook . Jupyter Notebook is an environment that allows you to create cells that can contain various types of code, including Python and Markdown. . Now, you might be wondering, why do I need this? . Well, there&#39;s a few reasons: . Jupyter Notebook is interactive. It allows you to move your program around. | What if you want to test a portion of your code? Instead of running the entire thing, you could use Jupyter Notebook to run code snippets. | . . Below is some testing of using Jupyter Notebook. I will add explanations of what these do later. . woah hidden input . print(&quot;peekaboo&quot;) . . peekaboo .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/08/21/jupyter-notebook-1.html",
            "relUrl": "/jupyter/2022/08/21/jupyter-notebook-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post93": {
            "title": "Python",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/python.html",
            "relUrl": "/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post94": {
            "title": "Java",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloStatic.main(null); . Hello World! .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/java.html",
            "relUrl": "/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post95": {
            "title": "First post",
            "content": "Post #1 . This is a test for my first post. . Hi and welcome :) . Check out my About Me to learn more about me. . This is also a test in blue font. . Why does Comic Sans get so much hate :( .",
            "url": "https://lwu1822.github.io/fastpages/markdown/2022/08/19/post-1.html",
            "relUrl": "/markdown/2022/08/19/post-1.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post96": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post97": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi, and welcome to my blog! . My name is Lily Wu. I’m a junior at Del Norte High School. . My interests are in STEM, including programming, cybersecurity, and math. . I’m passionate about learning, and I love to play around and explore code. . I don’t know if this is a good thing, but I have a bad habit of falling down a rabbit hole as I look up what each code syntax does specifically. . I have some experience in C++, and am currently learning Python and Java. . Contacts: . Email: lwu1822@gmail.com . Github . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lwu1822.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Vocab . Agile . Agile helps teams work on a project through working towards a plan (usually 2 week sprints), and various methods to work together, such as stand up meetings and pair programming. . Typical roles in a team might include: scrum master, DevOps, frontend and backend developer. . Ways to help a team plan: . Issues | Scrum board | . What are some things necessary of a successful team? . Creativity | Critical thinking | Communication | Collaboration through leadership | Collaboration (teamwork) | Research | Technical | . Primitives . Primitives: Includes the data types of int, double, and boolean. . Note: String is not a primitive . Basic code: . Data types: . int [var], double [var], boolean [var], and String [var] . Input: . Scanner [var] = new Scanner(System.in); : Create a scanner object with a name of [var], set it equal to System.in, which is what the user inputs on the keyboard. .",
          "url": "https://lwu1822.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Weekly Work",
          "content": "Week Assignments . 0 | First post Java PythonJupyter Notebook | . 1 | Bash: Check if tools are installed Learnings from code.org Java Primitives | . 2 | Console Menu | . 3 | Iteration MinilabFocus/Habits | .",
          "url": "https://lwu1822.github.io/fastpages/weekly-work/",
          "relUrl": "/weekly-work/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board . Unit 1: Primitive Types . Exam Weighting: 2.5%-5% . Primitives | . Unit 2: Using Objects . Exam Weighting: 5%-7.5% . Unit 3: Boolean Expressions and if Statements . Exam Weighting: 15%-17.55% . Unit 4: Iteration . Exam Weighting: 17.5%-22.5% . Unit 5: Writing Classes . Exam Weighting: 5%-7.5% . Unit 6: Array . Exam Weighting: 10%-15% . Unit 7: ArrayList . Exam Weighting: 2.5%-7.5% . Unit 8: 2D Array . Exam Weighting: 7.5%-10% . Unit 9: Inheritance . Exam Weighting: 5%-10% . Unit 10: Recursion . Exam Weighting: 5%-7.5% .",
          "url": "https://lwu1822.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  

  
      ,"page8": {
          "title": "",
          "content": "AP CSA . Project Based Learning (PBL) . Final Project: Crimebusters . Crime safety quiz . Frontend code using HTML and JavaScript to fetch a quiz API from Spring backend. . PBL Notes . API . Using an API on Backend . Using an API on backend with Spring Boot, and displaying it in a frontend HTML file. Notes on Thymeleaf template engine syntax. . Spring Boot . How Spring Boot works . JavaScript . JavaScript . Misc . Applying arrays to change images . Using arrays and ImageIO to make an ASCII, grayscale, redscale, bluescale, and greenscale Mona Lisa art. . Creating a table with JavaScript . AP Curriculum . Test Prep . 2022 and 2016 FRQ . Unit 1: Primitive Types . Calculator . Homework and Notes . Unit 2: Using Objects . Homework (2021 FRQ) . Unit 3: Boolean Expressions and if Statements . Notes . Unit 4: Iteration . Notes . Homework . Unit 5: Writing Classes . Homework . Unit 6: Array . Homework (Work In Progress) . Unit 7: ArrayList . Notes . Unit 8: 2D Array . 2D Arrays with Monkey Song . Using 2D Arrays to print out the monkey song . code.org Notes . Notes .",
          "url": "https://lwu1822.github.io/fastpages/organization/APCSA",
          "relUrl": "/organization/APCSA",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "AP CSP . Project Based Learning (PBL) . Final Project: Dictionary . Feedback Page . Frontend code using HTML and JavaScript to fetch a feedback API from Spring backend. For people who use our dictionary project to leave some feedback. . Final Project Planning . Plan . APIs . JavaScript Fetch API . Using JavaScript Fetch API to take a definition of a word from a dictionary API. . Python API using Jupyter Notebook . Working with a Python API using Jupyter Notebook. . PBL Notes . JavaScript . Fetch API . JavaScript . Python . Dictionary . Input and Output . AP Curriculum . Create Performance . Planning . AppLab . Planning and project description . Big Idea 1: Creative Development . 1.1 Notes . 1.2 Notes . 1.3 Notes . Debugging Code . Learning how to debug code. . Big Idea 4: Computer Systems and Networks . 4.1 Notes .",
          "url": "https://lwu1822.github.io/fastpages/organization/APCSP",
          "relUrl": "/organization/APCSP",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "CSA",
          "content": "Sep 14, 2022 Iteration with 2D array . | Sep 14, 2022 AP CSA 2022 and 2016 FRQ . | Sep 7, 2022 If-Else Lesson . | Sep 5, 2022 Console Menu . | Aug 28, 2022 Java Primitives . | Aug 28, 2022 Code snippets . | Aug 28, 2022 code.org Notes . | Aug 28, 2022 code.org Answers . | Aug 26, 2022 Tools . | Aug 21, 2022 Jupyter notebook post . | .",
          "url": "https://lwu1822.github.io/fastpages/t/CSA",
          "relUrl": "/t/CSA",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "CSP",
          "content": "Submenu | JavaScript | JavaScript Table | API | .",
          "url": "https://lwu1822.github.io/fastpages/CSP/",
          "relUrl": "/CSP/",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "",
          "content": "Additional Coding . How I made my background a gradient . Jekyll and Liquid . My research and exploration of the Jekyll site generator and Liquid template language . Bash . LaTeX .",
          "url": "https://lwu1822.github.io/fastpages/organization/additionalCoding",
          "relUrl": "/organization/additionalCoding",
          "date": ""
      }
      
  

  

  
      ,"page14": {
          "title": "",
          "content": "Life . Career . Alumni Panel . Talks from Del Norte High School’s alumni about programming as a career. . Life . Psychology and the Good Life video . Thoughts from the Psychology and the Good Life video by Laurie Santos, Professor of Psychology at Yale .",
          "url": "https://lwu1822.github.io/fastpages/organization/life",
          "relUrl": "/organization/life",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  

  

  
  

  
      ,"page27": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lwu1822.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}