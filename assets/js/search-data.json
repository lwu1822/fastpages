{
  
    
        "post0": {
            "title": "AP CSP Unit 3 Sections 3-4",
            "content": "Iteration: Loop (ex: for, while) . Substring syntax in Python: string[start index:end index - 1] .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/29/w14_CSPUnit3.3-4NoteAndHW.html",
            "relUrl": "/2022/11/29/w14_CSPUnit3.3-4NoteAndHW.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 1-10 Vocab",
            "content": "Casting: Changes the primitive data type . Casting is useful in division because if two integers are divided, the places after the decimal are truncated without rounding. To have an accurate division, type cast the integers with (double) to retain the decimal. . To round a number and return the result as an integer, add 0.5 to the number and then typecast it to an integer ((int)). . int a = 1; int b = 3; System.out.println(&quot;Dividing two integers: &quot; + a/b); double quotient = (double)a/(double)b; System.out.println(&quot;Dividing two doubles (originally integers): &quot; + quotient); System.out.println(); // truncating double c = 5.5; System.out.println(&quot;The value of double c is: &quot; + c); System.out.println(&quot;Truncating double c: &quot; + (int)c); // rounding int roundedNum = (int)(c+0.5); System.out.println(&quot;Rounding double c: &quot; + roundedNum); . Dividing two integers: 0 Dividing two doubles (originally integers): 0.3333333333333333 The value of double c is: 5.5 Truncating double c: 5 Rounding double c: 6 . Wrapper classes . Wrapper classes create objects out of primitives. The wrapper class capitalizes the first letter of the primitive data type and writes out the entire word. For example, the wrapper class of int is Integer. . Because wrapper classes create objects, there are many methods that can be used (shown in the code below). . Note: ArrayLists can only use wrapper classes; they can not use primitives. . toString(): Notice how Integer must be used, while int creates an error. . Integer test = 5; String test2 = test.toString(); System.out.println(test2); . 5 .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/29/unit1-10Vocab.html",
            "relUrl": "/2022/11/29/unit1-10Vocab.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "AP CSP Unit 3 Sections 1-2",
            "content": "albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album = input() song = input() print(&quot;Playing &quot; + &quot; &quot;&quot; + str(albums[int(album)-1][3][int(song)-1][1]) + &quot; &quot;&quot;) . Playing &#34;Welcome to my Nightmare&#34; . . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value for i in range(0, len(data)): if data[i] &lt; 100: print(str(i) + &quot; &quot; + str(data[i])) if data[i] &gt; 200: print(str(i) + &quot; &quot; + str(data[i])) . 2 4 4 308 6 5 9 306 . . Vocab . Variables: Abstractions that store values (numbers, boolean values, strings) | List: Contains elements | Dictionaries: Consist of key value pairs | . Python . Variables . Defining variables: variable name = value . Lists . Assigning a list to a variable example: myList = [1, 2, 3] . Add elements to a list with: list.append(element) . Dictionaries . Create a dictionary with this syntax: dictionary name = {key:value} . JavaScript . Variables . Defining variables: var variable name = value . or const variable name = value . Lists . Assigning a list to a variable example: myList = [1, 2, 3] . Add elements to a list with: list.append(element) . Dictionaries . Create a dictionary with this syntax: dictionary name = {key:value} .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/28/w14_CSPUnit3.1-2NoteAndHW.html",
            "relUrl": "/2022/11/28/w14_CSPUnit3.1-2NoteAndHW.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / . the symbol for modulus is % . an algorithm is a sequence of steps that does a specific task . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for num in numlist: if int(num) % 3 == 0: print( num + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 . Challenge . Using JavaScript and HTML frontend: . &lt;p id=&quot;binary&quot;&gt;&lt;/p&gt; &lt;script&gt; let num = 25; // change 25 to binary const numOfBinary = 8; // 8 bits (2^8 = 256, 256 possible numbers from 1-255) const binary = []; let output = &quot;&quot; // add powers of 2 to the binary array for (let i = 0; i &lt; numOfBinary; i++) { binary.push(2**(numOfBinary - 1 - i)); } // subtract powers of 2 from num (value = 25) and add 0s or 1s to the binary string accordingly for (let i = 0; i &lt; binary.length; i++) { if (num - binary[i] &gt;= 0) { num -= binary[i]; output += &quot;1&quot;; } else { output += &quot;0&quot;; } } document.getElementById(&quot;binary&quot;).innerHTML = &quot;Output&quot; + String(output); &lt;/script&gt; . . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is combining values together Length is how long a particular value is. For example, in a string, the length is the number of characters. A substring is a part of a string . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names : print(name) print(&quot;Length of &quot; + name + &quot;: &quot; + str(len(name))) length(names) . jaden Length of jaden: 5 max Length of max: 3 dylan Length of dylan: 5 orlando Length of orlando: 7 . Challenge . Using JavaScript and HTML frontend: . &lt;p id=&quot;list&quot;&gt;&lt;/p&gt; &lt;script&gt; const names = [&quot;jaden&quot;, &quot;max&quot;, &quot;dylan&quot;, &quot;orlando&quot;]; for (name of names) { document.getElementById(&quot;list&quot;).innerHTML += String(name) + &quot;&lt;br&gt;&quot; + &quot;Length of &quot; + String(name) + &quot;: &quot; + String(name.length) + &quot;&lt;br&gt;&quot;; } &lt;/script&gt; . . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/11/18/w14_CSPLesson-expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/w14_CSPLesson-expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "FRQ 1",
            "content": "Explanation of code . Files overview . There are 3 files: APCalendar.java, Year.java, and CalendarApiController.java. APCalendar.java contains the methods that provide the functions of the calendar, Year.java is the POJO to get information from the APCalendar class, and CalendarApiController.java controls the REST API. . How the code works . Calendar data can be accessed through the URI. The endpoints are specified with @GetMapping in CalendarApiController.java. Within each endpoint, a Year object is created and the setYear method is called. Within the Year class, you can see which setters are called. These setters then call methods in the APCalendar class, which are programmed to output things such as if a given year is a leap year, the day of the week of a day, how many days since January 1st a given day of the year is, etc. . . What I learned . Within the APCalendar class, there were many methods that required multiple parameters, such as dayOfYear or numberOfLeapYears. I originally had a little trouble in getting these parameters as input in the endpoint, and after some research, I found that the syntax in the endpoint is something like this: /{var1}/{var2}/{etc}. Then, to specify multiple PathVariables, simply split them apart with commas, like this: &lt;code&gt;@PathVariable int var, @PathVariable int var2&lt;/code&gt;. . Using the debugger . The debugger not only helped me in debugging code; it also helped me to learn how the code works. One thing that I was confused about was what the toString() method did in Year.java. By running the debugger on the tester, (as seen below), . I learned that there is a default toString() method. This is overriden in the Year class. The System.out.println automatically calls the toString() method, which is why an output in JSON format is shown when the tester is run. . . Using Postman . .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/16/frq1PBL.html",
            "relUrl": "/2022/11/16/frq1PBL.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Binary Color",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Learnings from code: . When I first looked at the code for the binary table, I was confused with some of the syntax. Below is a documentation of things that I learned and an explanation of the code. . Many buttons have an id. This id is later used in Javascript. Furthermore, this: {{ i }} is liquid syntax. The i is referred from the for loop, whose syntax is this: {% for i in (start-num .. end-num). . Looking at the first button, there is a function called add. This results in calling the add function in JavaScript. Within the function, the getBits function is called and stored within the variable binary. This function takes the current values of the binary (the 0s or 1s underneath the light bulbs) and stores it into a variable called bits. Next, the variable decimal takes binary and converts it from base 2 into decimal. . The next part is confusing. Within the if statement, n &gt; 0 means that the +1 button was pressed, while the else statement means that the -1 button was pressed. The decimal of the binary value is then set to a certain number. In decimal = MAX === decimal ? 0 : decimal += n, MAX === decimal is a boolean expression which says that if true, the first option before : will run, and if false, the second option will run. MAX, as defined in the constructor, is equal to 255. Therefore, the code is saying that if the decimal (remember that the decimal is equivalent to the value of the 0s and 1s underneath the light bulbs) number is equal to 255, then when you add 1, turn the decimal number into 0 (since the maximum is 8 bits, 2^8 = 256, binary starts from 0, so maximum number is 255). However, if the decimal number is not equal to MAX, just add 1 to decimal. Same thing in the else part of the loop, only this time, it refers to if the -1 button is clicked. If decimal is 0, when the -1 button is clicked, go back to 255, otherwise, just decrease by 1. . After that, the decimal number is converted to binary and stored in the binary variable. To convert to binary, the decimal_2_base function is ran. Within the function, something new that I saw was the do while loop. I learned that the difference between this loop and the while loop was that the while loop would run only if the condition is fulfilled. The do while loop will always run once, and then if the condition in the while portion is fulfilled, the loop will run again. Within the loop, the variable digit is assigned to be equal to the remainder of the decimal number and the base, which when passed into the decimal_2_base function, was 2. digit is then passed into the variable conversion as a string. The next piece of code that I was confused about was ~~(decimal / base);. This is the same as Math.floor(), but runs faster. This piece of code devices the two variables decimal and base, and rounds to the largest integer that is less than or equal to the value. . For example, if decimal = 5, and base = 2, ~~(decimal / base) = ~~(2.5) which will round down to 2. .",
            "url": "https://lwu1822.github.io/fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://lwu1822.github.io/fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 6 Array",
            "content": "#3a . public void addMembers(String[] names, int gradYear) { for (int i = 0; i &lt; names.length; i++) { memberInfo member = new MemberInfo(names[i], gradYear, true); memberList.add(member); } } . Comments: . My solution matched up with the official solutions. Something that I could have used though, would be the for each loop to iterate through each element in the array. . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(n, gradYear, true); memberList.add(member); } } . . Hacks . Hack 1 . int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length(); i+=2) { System.out.println(arrayOne[i]); } . Hack 2 . B .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/09/w12_unit6HW.html",
            "relUrl": "/2022/11/09/w12_unit6HW.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "AP CSP Finals",
            "content": "Below is my score on the Trimester 1 AP CSP Finals. . . This was the question that I got wrong: . . Why I chose the answer: I confused WWW with HTTP. HTTP is a protocol, but WWW is not. . | Correct answer: The correct answer is that WWW is an information system that consists of linked pages, programs, and files. The Internet is a network that can access the World Wide Web. . Reviewing the 4.1 Daily Video 2, I reviewed that the Internet helps connect the computer networks, while WWW is the “network of linked data and programs, running over the Internet”. WWW uses the protocol HTTP. . | . There were also a few questions that I got correct, but I did not fully understand them. Looking at the solutions, my train of thought was about the same as the explanations, but I will include them below for future reference and review. . . My reasoning: I know that four bits in binary is equivalent to 2^4 = 16 values. Since there were 8 directions, I just assumed that each direction would be stored as a value. | . . My reasoning: I knew from before that binary was the fundamental bits that could store information (0s and 1s). However, I just think it is really interesting that all data can be stored in binary, from strings to colors to audio. | . . Note: This one I had no idea, so I guessed on the answer that sounded most correct. . | What I learned: Analog data changes continuously, while digital is discrete. Therefore, digital data would be sampled at regular intervals (not continuous) to approximate the runner’s position. . | .",
            "url": "https://lwu1822.github.io/fastpages/life/2022/11/08/w12_CSPFinalCorrection.html",
            "relUrl": "/life/2022/11/08/w12_CSPFinalCorrection.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "AP CSA Finals",
            "content": "Below is my score on the Trimester 1 AP CSA Finals. My score is 35/40. . . . These were the questions that I got wrong: . . Why I chose the wrong answer: I overlooked the word always in the question, which was why I also selected 1 as the correct answer (since if data does not contain 5, there would be an error). . | What I learned: Since the question says always, 1 would not be correct because if the one element in data is 5, there would not be an error. . | . . . Why I chose the wrong answer: I mistakenly believed that Math.random() produced a number between 0 and 1, inclusive. I also failed to realize that choice A could return an index of -1, which would produce an error. . | What I learned: Math.random() produces a random number between 0 and 1, but not including 1. Furthermore, the (int) type conversion does not round; therefore, myList.size() multiplied by a random decimal number will always result in a product less than myList.size() by at least 1, which will be enough for the maximum index number, which is always 1 less than the size of the list. . | . . . Why I chose the wrong answer: I was not familiar with the .add method. I was actually on the right track; however, when I went through the for loop the first time, I assumed that baboon would always be at index of 1, leading me to choose D instead of B. . | What I learned: Make sure to iterate through the entire for loop until the condition is false. . | . . . Why I chose the wrong answer: I did not understand that both the reference parameter and the actual parameter are aliases. . | What I learned: Passing a reference parameter results in it and the actual parameter being aliases to the same object. Therefore, changes made in the mystery method will also appear in values. Replacing the element of one index after the current index with the sum of the element in the current and subsequent index will result in the answer choice of C. . | . . . Why I chose the wrong answer: I forgot to check the second part of the OR conditional, where k&lt;4. . | What I learned: Since k is always less than 4, there would be an infinite loop. . | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/11/08/w12_CSAFinalCorrection.html",
            "relUrl": "/cb/2022/11/08/w12_CSAFinalCorrection.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Night at the Museum",
            "content": "Night at the Museum takes place at the end of every trimester to showcase students’ work from various classes. There were many exhibitions that you could view, the ones that I went to were the 3D Animations classroom, ceramics, and AP Studio Art rooms. . In the ceramics class, there were a lot of creative items that included mugs and other containers, such as this item which had the design of ocean waves: . . My favorite piece from the ceramics classroom was a mug in the shape of a dragon: . . The artwork in the AP Studio Art classroom had a lot of variety. Some that I found interesting were this drawing of a cat. . . Another piece of artwork that I really liked was this drawing of an eye because of how realistic it looked. . . I also went to the 3D Animations classroom to view their projects. Seeing the donuts were really cool and I felt a sense of familiarity with them because I have also taken the class. . . For APCSA, our team presented our crime prevention project. Another group’s project that I went to see was teamcoders’s Codehoots, which tested Java in a Kahoot style format. . For APCSA, our team presented our dictionary project. Another group’s project that I enjoyed playing around with was the Swag Team’s “Math Games”. The game that I played with was their blackjack game, and i won both rounds :) .",
            "url": "https://lwu1822.github.io/fastpages/life/2022/11/07/w12_NatM.html",
            "relUrl": "/life/2022/11/07/w12_NatM.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "World Crime News Table",
            "content": "News News Link Source .",
            "url": "https://lwu1822.github.io/fastpages/crimebusters/news",
            "relUrl": "/crimebusters/news",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 5 Writing Classes",
            "content": "2019 FRQ #2 . Initial attempt . public class StepTracker { private int numDay; private int activeSteps; private int totalSteps; private int numActiveDays; public StepTracker(int steps) { activeSteps = steps; } public int activeDays() { return numActiveDays; } public double averageSteps() { return totalSteps/numDay; } public void addDailySteps(int steps) { totalSteps += steps; numDay++; if (steps &gt;= activeSteps) { numActiveDays++; } } } . Comments: . In the method averageSteps(), I did not do a type conversion to double in my return statement. A type conversion is needed because totalSteps and numDay are integers. . I also did not account for when numDay = 0, because the return statement can not be divided by 0. Therefore, an if statement is needed to return an average step of 0. . Corrections: . public class StepTracker { private int numDay; private int activeSteps; private int totalSteps; private int numActiveDays; public StepTracker(int steps) { activeSteps = steps; } public int activeDays() { return numActiveDays; } public double averageSteps() { if (numDay == 0) { // corrections return 0.0; } else { return (double) totalSteps/numDay; } } public void addDailySteps(int steps) { totalSteps += steps; numDay++; if (steps &gt;= activeSteps) { numActiveDays++; } } } .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/25/w9_unit5Class.html",
            "relUrl": "/2022/10/25/w9_unit5Class.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 6 (Work in Progress)",
            "content": "int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length; i+=2) { System.out.println(arrayOne[i]); } . 1 5 9 . int[] myNumbers = new int[] {5, 3, 4, 1, 2}; int i = 0; int min = 0; public void arraySorter(int[] array) { for (int i = 1; i &lt; array.length+1; i++) { for (int j = 0; j &lt; array.length; j++) { if (i == array[j]) { System.out.println(i); } } } } arraySorter(myNumbers); . 1 2 3 4 5 .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/24/w10_unit6JavaHacks.html",
            "relUrl": "/2022/10/24/w10_unit6JavaHacks.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Crime Safety Quiz",
            "content": "Crime Safety Quiz . Quiz yourself on crime safety! . What this project does: This is a quiz that tests players on how much they understand about crime safety. It is in a table that records the number of times each answer choice is selected. The answer choices are connected to the backend using the Spring Framework. The number of times users selected the answer choices are saved in a MYSQL database. After the user selects one of the answer choices, there will also be feedback given on whether the user selected the right or wrong answer choice. . . Note: If the table shows an error of TypeError: Failed to fetch https://crimebusters.nighthawkcoding.ml/api/quiz/, see if using a VPN works :) . . Question A B C D .",
            "url": "https://lwu1822.github.io/fastpages/crimebusters/quiz",
            "relUrl": "/crimebusters/quiz",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 4 Iteration",
            "content": "public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letterIndividual = &quot;&quot;; public CaesarCipher(String msg) { for (int i = 0; i &lt; msg.length(); i++) { letterIndividual = msg.substring(i, i+1); if (letterIndividual.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letterIndividual.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letterIndividual.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } if (letterIndividual.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null) . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/21/w9_unit4Iteration.html",
            "relUrl": "/2022/10/21/w9_unit4Iteration.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "JavaScript Fetch API",
            "content": "Below is a table created using HTML. The table displays the word bright, and its definition, which was taken from an API. The API was called using JavaScript Fetch. . Word Definition .",
            "url": "https://lwu1822.github.io/fastpages/api/2022/10/21/w9_dictionaryFEJSFetchAPITable.html",
            "relUrl": "/api/2022/10/21/w9_dictionaryFEJSFetchAPITable.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 5 Writing Classes Hacks (Work In Progress)",
            "content": "public class Cow { private String cowType; private String sound; private int numMilkings; public Cow(){ this.numMilkings = 0; this.cowType = null; this.sound = null; } public Cow (String cowType, String sound) { this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public Cow(String cowType, String sound, int numMilikings) { this.numMilkings = numMilikings; this.cowType = cowType; this.sound = sound; } public void setcowType(String cowType) { this.cowType = cowType; } public String getcowType() { return cowType; } public void toString() { } public static void main(String[] args) { Cow firstCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); Cow secondCow = new Cow(); Cow thirdCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;, 100); firstCow.setcowType(&quot;a&quot;); firstCow.getcowType(); System.out.println(firstCow.getcowType()); } } Cow.main(null) . a .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/20/w9_unit5ClassHack.html",
            "relUrl": "/2022/10/20/w9_unit5ClassHack.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Dictionary Feedback (Work In Progress)",
            "content": "Dictionary Feedback (Work In Progress) . Feedback page for our APCSP dictionary project! . Please answer yes or no to the following questions on how satisfied you were with our project. Thank you! :) . Question Yes No .",
            "url": "https://lwu1822.github.io/fastpages/teamberries/feedback",
            "relUrl": "/teamberries/feedback",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Class Lesson Notes",
            "content": "Unit 1 Primitives . Note: Credit to Period 1&#39;s Primitives presentation for the information below . What are primitives? . Primitives include certain data types, such as integer, doubles, booleans, char, float, and long. Primitive names typically start with a lowercase letter, and if needed, subsequent words start with an uppercase letter. . To switch between primitive data types, casting can be used. . There are 5 types of operators: +=, -=, *=, /=, and %= and an increment and decrement operator: ++ and --. . Scanners . To take in input in java, the Scanner class needs to be first imported with import java.util.Scanner;. Next, a scanner object can be created with Scanner object name = new Scanner(System.in). To take in input, specify the data type that the scanner takes in with scanner.nextdata type . Unit 2 Objects . What are objects? . Objects are instances of a class. There are three steps to create an object: declaration, instantiation, and initialization. Declaration is specified through a type followed by the variable name. Instantiation instantiates the object with the new keyword. Initialization occurs the name of the constructor method is specified after the new keyword. . Creating objects . The syntax to create objects is: Class-name object-name = new constructor-name . Methods . Methods are defined with a return type (int, bool, etc. or void (no return type)) and the method name. . Static vs non static . A static method can only access other static methods, while a nonstatic method can access both static and nonstatic methods. . Math class . Important methods: Math.abs, Math.random() . Unit 4 Iteration . while loops . The syntax of a while loop looks like this: . while (condition) { } . Everytime the while loop executes, it first checks the condition. If the condition is true, the code inside the loop is ran. After the code finishes, the while loop checks again with the condition. . for loops . The syntax of a for loop looks like this: . for (initialize variable; condition; change variable) { } . Every time the for loop executes, it checks the condition. If the condition is true, the code inside the for loop is ran. After the code finishes running, the variable is incremented by the amount specified. . . There can also be nested iteration (ex: for loop within for loop) . for each loop . The syntax for a for-each loop looks like this: . for (dataType item : array){ } . This is especially useful for iterating through arrays. . Unit 5 Writing Classes . What are classes? . Classes are the blueprints for objects. They contain instance variables, constructors, and methods. Objects are instances of classes. . Access modifiers . public: Can be accessed in classes outside of the declaring class . private: Can only be accessed in the declaring class . Getters and setters . Getters help make variables read only. Setters allow write only permissions. . The syntax for getters is: . public data-type getName . Unit 6 Arrays . What are arrays? . Arrays can only be used to store one data type. They are different from ArrayLists in that they are not as flexible; the size of an array is fixed. . To create an array, you can either use constructors (dataType[] arrayName = new dataType[numerOfItems]), or you can use pre-initiliazed arrays (dataType[] arrayName = {elements}) . Traversing arrays . Arrays can be traversed using a for or while loop. . ArrayIndexOutOfBoundsException: This occurs when the loop tries to access a nonexistant index in the array. . for each loop . The syntax is: . for (dataType i : arrayName) { // code } . This is usually used to iterate through each item in the for each loop. .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/17/w8_classLessonNotes.html",
            "relUrl": "/2022/10/17/w8_classLessonNotes.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2 Using Objects",
            "content": "1a . Initial attempt: . Comments: I started off alright; however, I was soon stuck at the for loop part. I knew that I had to use a for loop to perform iteration that will compare the substring to secret, but I did not know how to compare to certain characters within a string. After looking at part of the answers, I found that the program utilized the substring() method, which I did not know what it did. After some googling, I applied my knowledge to the code below in my second attempt. . public int scoreGuess(String guess) { int substring; int length = guess.length(); int score; for () score = substring * length * length; } . Second attempt . Comments: This attempt mostly matched the answer key. One thing that I did wrong, however, was that in my comparison in the if statement, I used == instead of .equals. I have seen .equals() before, but I have never used it, so once again, I had to do some googling. I learned that if you want to compare two objects, you would need to use the .equals() method. In this case, secret is an object, as indicated by this line of code: private String secret; . public int scoreGuess(String guess) { int length = guess.length(); int count; int score; for (int i = 0; i &lt; (secret.length() - (length - 1)); i++) { if (guess == secret.substring(i, length)) { count++; length++; } } score = count * length * length; return score; } . Correction: . public int scoreGuess(String guess) { int length = guess.length(); int count; int score; for (int i = 0; i &lt; (secret.length() - (length - 1)); i++) { if (guess.equals(secret.substring(i, length))) { count++; length++; } } score = count * length * length; return score; } . . 1b . Initial attempt: . Comments: I made this a lot more complicated than it needed to be 😳 . Mistakes: I forgot that objects do not need to be created within the findBetterGuess method since findBetterGuess and scoreGuess are in the same class. . Looking at the answer, I learned about the method called compareTo(), which allowed for comparison between strings. compareTo() returns an integer, in which if the integer is smaller than 0, the first string is alphabetically smaller than the second string. If the integer is greater than 0, the first string is alphabetically greater than the second string. If the integer is equal to 0 you guessed it , both strings are the same. . public String findBetterGuess(String guess1, String guess2) { WordMatch string1 = new WordMatch(guess1); WordMatch string2 = new WordMatch(guess2); int score1 = string1.scoreGuess(guess1); int score2 = string2.scoreGuess(guess2); if (score1 &gt; score2) { return guess1; } else if (score1 &lt; score2) { return guess2; } else { int smallGuess = Math.min(guess1.length(), guess2.length()); for (int i = 0; i &lt; smallGuess; i++) { String individualCh1 = guess1.substring(i, i); String individualCh2 = guess2.substring(i, i); int chNum1 = individualCh1.indexOf(individualCh1); int chNum2 = individualCh2.indexOf(individualCh2); if (chNum1 &gt; chNum2) { return guess1; break; } if (chNum2 &gt; chNum1) { return guess2; break; } } } } . Correction . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/16/w8_unit2Objects.html",
            "relUrl": "/2022/10/16/w8_unit2Objects.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "4.1 The Internet (AP CSP)",
            "content": "What is the Internet? . The Internet was developed to allow computers to communicate with each other. They do so by sending packets that consist of 0s and 1s. The packet includes the source and destination. . Computer system: Devices that are used for a similar purpose | Computer network: Computers that are connected to each other in order to communicate | Packet switching: The message that the computer sends is broken into many packets. These can be sent in a random order and are put in the original order once they arrive at the destination device. | Path: The journey (I couldn’t think up of a better word) of a packet from source to destination | Routing: Routers determine the best path to send a packet from source to destination | Bandwidth: The amount of data that can be sent in a network Units include bits per second | . . A protocol is the rules that determine how a packet is sent from source to destination. . There are many protocol models, such as OSI, and TCP/IP. . . TCP/IP model layers: . Application: Includes web servers and DNS DNS translates an IP address to a web URL that is easy for us to remember Protocols: HTTP, HTTPS | Transport: Protocols: TCP, UDP TCP: Slow, but reliable UDP: Fast, but unreliable | Internet: Consists of source and destination IP address, used for transportation of data The internet is scalable, it includes LANs and WANs | Network access: Deals with the hardware, associated with getting the information from binary Protocols: Ethernet NICs (Network interface cards) use the network access protocol and contain a MAC address (used to identify hardware) | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/10/16/w8_CB_4-1.html",
            "relUrl": "/cb/2022/10/16/w8_CB_4-1.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Spring Boot",
            "content": "JPA . JPA (Java Persistence API) allows access to data between Java objects. JPA includes many types of implementations, the most popular being Hibernate, which allows abstraction for object relational mapping (ORM). ORM allows a Java class to be mapped to a database. . The architecture of JPA includes several features such as Entity, which persistence objects within the database. . Repository . Spring Data JPA provides abstraction for Hibernate. It provides simplification by using the repository to access databases, which removes the need to use SQL. . A repository must extend from one of the three following repositories: JPARepository, PagingAndSortingRepository, or CrudRepository. Most of the time, it is extended to JPARepository . In the repository file, th interface is written as: public interface repository name extends JpaRepository&lt;&gt;. The question is, what does &lt;&gt; mean? . In &lt;&gt;, there are two generics that need to be configured. The first is the entity, and the second is the data type for the id. . How to create a Spring Boot JPA (In Progress) . First, create a file titled name.java. Within the file, mark the class as an Entity with @Entity, and mark the id with @Id. In addition, create getters and setters for each variable. . Controller . Create a file titled nameController.java. Use @RestController to mark the class as a controller .",
            "url": "https://lwu1822.github.io/fastpages/backend/2022/10/10/w7_springBoot.html",
            "relUrl": "/backend/2022/10/10/w7_springBoot.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Code Corrections",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . Changes: Change str(i) to str(i+1) since the index of an array starts at 0. . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: # Changed print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . Printing odd numbers . Change i=0 to i=1 to start at the odd number of 1 and not the even number of 0. . odd = [] i = 1 while i &lt;= 10: odd.append(i) i += 2 print(odd) . [1, 3, 5, 7, 9] . Change the modulo from 0 to 1 (odd numbers divide by 2 result in a remainder of 1) . numbers = [0,1,2,3,4,5,6,7,8,9,10] odd = [] for i in numbers: if (numbers[i] % 2 == 1): odd.append(numbers[i]) print(odd) . [1, 3, 5, 7, 9] . Printing a multiple of 2 and 5 . Add a simple elif statement so that if the number is divisible by 5, the program moves out of the if statement and does not repeat even if it is divisible by 2. . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) item = input(&quot;Please select an item from the menu&quot;) print(item) total = menu[item] print(&quot;The price of &quot; + item + &quot; is &quot; + str(total)) #code should add the price of the menu items selected by the user print(&quot;Your total price is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. burger The price of burger is 3.99 Your total price is: $3.99 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu. Enter &#39;done&#39; to finish&quot;) item = input(&quot;Please select an item from the menu&quot;) print(item) while item != &quot;done&quot;: total += menu[item] item = input(&quot;Please select an item from the menu&quot;) print(item) #code should add the price of the menu items selected by the user print(&quot;Your total price is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Enter &#39;done&#39; to finish burger burger fries drink done Your total price is: $10.96 . Hacks . Possible errors could pertain to first finding an API that provides a reverse dictionary, and then connecting it from frontend to backend. Other errors could occur when the reverse dictionary can not find a word based on the user&#39;s inputted definition or if the reverse dictionary outputs incorrect words. . | Test cases could be testing out each individual section of the code, for instance, first testing out one specific word before testing any input. By limiting the testing to one specific thing, we can first focus on the specific before expanding to the general. . | .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/09/w7_codeCorrection.html",
            "relUrl": "/2022/10/09/w7_codeCorrection.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "API with Jupyter Notebook",
            "content": "import requests url = &quot;https://dictionary-by-api-ninjas.p.rapidapi.com/v1/dictionary&quot; querystring = {&quot;word&quot;:&quot;bright&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;cc6d770f58msh120c53d95d27c68p1d2955jsn1898ff4fa031&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dictionary-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) wordDefinition = response.json().get(&#39;definition&#39;) word = response.json().get(&#39;word&#39;) print(&quot;Word: &quot;) print(word) print() print(&quot;Definition: &quot;) print(wordDefinition) . Word: bright Definition: See Brite, v. i. 1. Radiating or reflecting light; shedding or having much light; shining; luminous; not dark. The sun was bright o&#39;erhead. Longfellow. The earth was dark, but the heavens were bright. Drake. The public places were as bright as at noonday. Macaulay. 2. Transmitting light; clear; transparent. From the brightest wines He &#39;d turn abhorrent. Thomson. 3. Having qualities that render conspicuous or attractive, or that affect the mind as light does the eye; resplendent with charms; as, bright beauty. Bright as an angel new-dropped from the sky. Parnell. 4. Having a clear, quick intellect; intelligent. 5. Sparkling with wit; lively; vivacious; shedding cheerfulness and joy around; cheerful; cheery. Be bright and jovial among your guests. Shak. 6. Illustrious; glorious. In the brightest annals of a female reign. Cotton. 7. Manifest to the mind, as light is to the eyes; clear; evident; plain. That he may with more ease, with brighter evidence, and with surer success, draw the bearner on. I. Watts. 8. Of brilliant color; of lively hue or appearance. Here the bright crocus and blue violet grew. Pope. Note: Bright is used in composition in the sense of brilliant, clear, sunny, etc.; as, bright-eyed, bright-haired, bright-hued. Syn. -- Shining; splending; luminous; lustrous; brilliant; resplendent; effulgent; refulgent; radiant; sparkling; glittering; lucid; beamy; clear; transparent; illustrious; witty; clear; vivacious; sunny. Splendor; brightness. [Poetic] Dark with excessive bright thy skirts appear. Milton. Brightly. Chaucer. I say it is the moon that shines so bright. Shak. To be or become overripe, as wheat, barley, or hops. [Prov. Eng.] .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/09/dictionaryJupyterAPI.html",
            "relUrl": "/2022/10/09/dictionaryJupyterAPI.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Array List",
            "content": "What is an ArrayList? . An ArrayList is like an array, except better :) . The main problem with a regular array is that elements can not be added or removed from the array (can not change the array size). This is made possible with ArrayList . To begin, start by creating an ArrayList object: . import java.util.ArrayList; abstract class ArrayListDemo{ ArrayList&lt;String&gt; alphabet = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)); public ArrayListDemo() { } protected abstract void changes(); } . Add, edit, and remove elements . To add elements, use the add() method. To add an element at a specific index, use add(index, element). To add all elements in an array to another array, use addAll(index, array). To edit elements, use set(index, element). To remove elements at a specific index, use the remove(index) method, or to remove a specific element, use remove(element). To clear an array, use the clear() method. . Add elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.add(&quot;d&quot;); super.alphabet.add(1, &quot;z&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, z, b, c, d] . Edit elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.set(0, &quot;z&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [z, b, c] . Remove elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.remove(1); super.alphabet.remove(&quot;c&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a] . Add an array to another . public class SpecificArray extends ArrayListDemo { ArrayList&lt;String&gt; alphabet2 = new ArrayList&lt;String&gt;(Arrays.asList(&quot;z&quot;, &quot;x&quot;, &quot;y&quot;)); public SpecificArray() { } public void changes() { super.alphabet.addAll(1, alphabet2); System.out.println(alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, z, x, y, b, c] . Clear . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.clear(); System.out.println(alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [] . Array Info . To find the size of the array, use the size() method. To see the specific element at an index, use the get() method. indexOf(element) will return the first index that the element is in, while lastIndexOf(element) will return the index of the last occurrence of the element. To find the associated hash of the array, use the hashCode() method. The isEmpty() method will return true if the array is empty, and false if not. To check if the array contains an element, use the contains(element) method. To check if two arrays are equal to each other, use the equals(array) method, and to check if an array contains all of the elements in a collection, use the containsAll(array) method. To sort the elements in an ArrayList, use the sort() method. . ArrayList Info . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { System.out.println(super.alphabet); System.out.println(&quot;Size of alphabet array is: &quot; + super.alphabet.size()); System.out.println(&quot;Element of index 0 is: &quot; + super.alphabet.get(0)); System.out.println(&quot;Index of element b is: &quot; + super.alphabet.indexOf(&quot;b&quot;)); super.alphabet.add(&quot;a&quot;); System.out.println(&quot;Updated ArrayList: &quot; + super.alphabet); System.out.println(&quot;Last occurence of a is at index: &quot; + super.alphabet.lastIndexOf(&quot;a&quot;)); System.out.println(&quot;Hash code of alphabet is &quot; + super.alphabet.hashCode()); if (super.alphabet.isEmpty() == true) { System.out.println(&quot;alphabet array is empty!&quot;); } else { System.out.println(&quot;alphabet array is not empty!&quot;); } if (super.alphabet.contains(&quot;z&quot;) == true) { System.out.println(&quot;alphabet array contains the element z&quot;); } else { System.out.println(&quot;alphabet array does not contain the element z&quot;); } } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, b, c] Size of alphabet array is: 3 Element of index 0 is: a Index of element b is: 1 Updated ArrayList: [a, b, c, a] Last occurence of a is at index: 3 Hash code of alphabet is 3910592 alphabet array is not empty! alphabet array does not contain the element z false . Compare ArrayLists . public class SpecificArray extends ArrayListDemo { ArrayList&lt;String&gt; alphabet2 = new ArrayList&lt;String&gt;(Arrays.asList(&quot;z&quot;, &quot;x&quot;, &quot;y&quot;)); public SpecificArray() { } public void changes() { System.out.println(&quot;alphabet: &quot; + alphabet); System.out.println(&quot;alphabet2: &quot; + alphabet2); if (alphabet.equals(alphabet2)) { System.out.println(&quot;alphabet and alphabet2 are the same&quot;); } else { System.out.println(&quot;alphabet and alphabet2 are different&quot;); } if (alphabet.containsAll(alphabet2)) { System.out.println(&quot;alphabet and alphabet2 have the same elements&quot;); } else { System.out.println(&quot;alphabet and alphabet2 have different elements&quot;); } } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . alphabet: [a, b, c] alphabet2: [z, x, y] alphabet and alphabet2 are different alphabet and alphabet2 have different elements . Sort ArrayLists . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { alphabet.add(&quot;a&quot;); System.out.println(&quot;Modified alphabet ArrayList: &quot; + alphabet); alphabet.sort(Comparator.naturalOrder()); System.out.println(&quot;Sorted ArrayList alphabet: &quot; + alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . Modified alphabet ArrayList: [a, b, c, a] Sorted ArrayList alphabet: [a, a, b, c] .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/07/w7_arrayList.html",
            "relUrl": "/2022/10/07/w7_arrayList.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Java Backend API",
            "content": "Crime News API . . Map API . . How I created a table in Java backend using an API . This took me a whole day to figure out. . Learning about APIs is still an ongoing process for me, so below, I’ll document the things that I learned about APIs and what I picked up while coding. . The code that I started with was what I took from the RapidAPI website. I then used some code to parse the JSON response. This was the place that messed me up for a long time, as I kept receiving errors in my code. After hours of googling, I finally found the answer, and that fixed things up. . However, the most important things I learned was: . The API calling process in Java | Thymeleaf | API calling process in Java . First, an HTTP client needs to be created with HttpClient. Next, a request using HttpRequest is created to send a request to the HTTP client. Within the request, the type of request (GET), URI, and headers are specified. Putting it all together is build(). Then use the client to send back the HTTP request. . Thymeleaf . After receiving the JSON data, an issue that I ran into was to output the data into a table format on the frontend of Spring boot. I took a look at some of the programs already present in the spring portfolio, such as greet.html, knowing that it would have to convert backend data to frontend. Within the program, I noticed an interesting snippet of code which was ${name}. Googling the syntax lead me to learn about Thymeleaf, which is a Java template engine. This was really cool, because Thymeleaf changes Java data into HTML (which can actually be shown on a webpage). I’ll probably bore you with the details later when I update this blog further, but for now, you are spared :) Anyways, a simple Youtube search of “what is Thymeleaf” gave me an introduction of how to use this template language. The thing that was super useful that I learned from the video was that Thymeleaf uses th:each to iterate over arrays and lists. This allowed me to print the JSON data, which consisted of objects, into a table format. . . Misc . Benefits of using API include that it helps simplify the process between how the user interacts with the application and what data the application an receive from the server. . The benefits of backend implementation is that it allows for more control. For instance, the API access can be limited .",
            "url": "https://lwu1822.github.io/fastpages/backend/2022/10/05/w6_javaBackendAPI.html",
            "relUrl": "/backend/2022/10/05/w6_javaBackendAPI.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Deployment",
            "content": "Curl . . Making a change in Flask Portfolio and showing it on the website . . . .",
            "url": "https://lwu1822.github.io/fastpages/deployment/2022/10/04/w6_deployment.html",
            "relUrl": "/deployment/2022/10/04/w6_deployment.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Random",
            "content": ". © MapTiler © OpenStreetMap contributors . .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/10/03/mapAPI.html",
            "relUrl": "/js/2022/10/03/mapAPI.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "1.3 Collaboration",
            "content": "Program . A program is developed with an idea that aims to follow a purpose. . Developers need to investigate the issue and be aware of constraints (such as time), pay attention to user concerns. Methods of investigation include surveys or testing. . Afterwards, developers design the program through brainstorming, creating the user interface, and organizing. . Prototypes are created, and small parts are created to test each individual parts. . Last process is to refine. . Each contributor to the program should be properly credited in the documentation. . Documentation: An overview of the program that may include functions, events, and other specific aspects of the code. .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/10/02/w6_CB_1-3.html",
            "relUrl": "/cb/2022/10/02/w6_CB_1-3.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Fetch API Notes",
            "content": "Below is a documentation of me learning about APIs. . What is an API? . An API allows a developer to obtain data from web services. It performs abstraction to make tasks simpler for the user. Usually, an API acts between the application (what the user interacts with) and the server (contains the data, or resource). The process begins with the user creating an API call, which then proceeds with the application using the API to communicate with the server. The API then brings back the requested data to the user. . Types of APIs . REST API . The most common type of API is REST API. REST stands for Representational State Transfer. REST APIs are typically associated with JSON, although the payload (data that the API delivers), can be in the form of HTML or XML. REST is used because of its speed and reliability. It also allows services to be used through HTTP. . Parts of a REST API include: . Endpoint: Includes URI: The url | HTTP method: What the client wants to do with a resource Includes GET (get), POST (make), PUT (update), DELETE (remove) | Headers: Contains things required for authentication and information about the client and server | Body: Other info included in the request | . When the client wants to access a resource, it sends a HTTP Request to the server. The server responds with a HTTP Response that contains data, or the representation about the resource, not the actual resource itself. The format of the representation cna be in XML or JSON. . What is Fetch API? . Fetch enables the user to make HTTP requests to servers. The Fetch API includes the fetch() method, which can take in two parameters, the URL and options. . fetch() returns a promise that can be used with the .then() and .catch() methods as well as being able to use async/await. . Once the request finishes, promise will resolve into a Response object. . Response is an API wrapper for what was fetched. . Now, what is an API wrapper? . To understand this, a helpful website first explained what a wrapper is. Basically, a wrapper helps make an item simpler by “wrapping” over the item. For instance, it can use abstraction to help simplify code. It can also convert data to make it more compatible. . Thus, an API wrapper allows you to combine many API calls into one to make things simpler. . . Alright, where was I? Right, Response. . Feel like showing the response? Below is an example of reading the response if it is in raw text. (Don’t really understand it at the moment, will research more about it later) . fetch(&#39;/readme.txt&#39;) .then(response =&gt; response.text()) .then(data =&gt; console.log(data)); . Question: Is /readme.txt the URL? It looks like a file… Can a file be a URL? . I’m guessing /readme.txt is the URL to the README file. . Below is an explanation of a typical piece of code that you many find in a Fetch API: . .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) . Question to self: What is the difference between .then(data =&gt; console.log(data)) and .then(response =&gt; console.log(response))? . response: The response object that is returned by fetch. . response.json(): The response object does not return directly accessible data. Instead, the response needs to parsed into JSON using the json() method. . data: The JSON data . . You can also see the status code using the Response object. This can be accessed with the status property (response.status). . Quick lesson on status codes: . 200 is the status code you want, it means that the request was successful. | 404 means that what was requested does not exist | 500 means that there is a server error | . Note: fetch always succeeds, which means that even if the server responds with a 404, an error message would not show even if a catch statement was implemented. . Misc . Quick definition about entity: In programming, an entity is an object, which means it can include attributes and methods. . Allows access to the API through a specific programming language. . . Below is an example that uses the Fetch API to display airplane flight codes in a table: . IATA Code Name ICAO Code .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/10/01/w6_jsFetchAPINote.html",
            "relUrl": "/js/2022/10/01/w6_jsFetchAPINote.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Images",
            "content": "ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;-&quot;; } else if (g &gt;= 170) { str = &quot;*&quot;; } else if (g &gt;= 160) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;j&quot;; }else if (g &gt;= 140) { str = &quot;n&quot;; }else if (g &gt;= 130) { str = &quot;V&quot;; } else if (g &gt;= 120) { str = &quot;3&quot;; } else if (g &gt;= 110) { str = &quot;5&quot;; } else if (g &gt;= 100) { str = &quot;&amp;&quot;; } else if (g &gt;= 90) { str = &quot;g&quot;; }else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . . Explanation of code . First, the monaLisa object is created, which calls the Pics constructor and passes in a name of MonaLisa and an ext (extension) of .png. These are assigned to the attributes, creating an input file (images/MonaLisa.png), an output (resized) file (images/MonaLisa.png), and an output (ASCII) file (images/tmp/MonaLisa.txt). . Next, the setStats() method is called. The path of the input file is assigned to the path object. The number of bytes is also assigned, and then ImageIO reads the input file and obtains its width and height, assigning them to their respective variables. . Now going back to the main method, the monaLisa object calls the printStats() method and passes in the argument of &quot;Original&quot;. This basically outputs some information of the input file, such as its size, width, and height. As you can see in the output above, the printStats() method outputs, Original: 499298 389x413 images/MonaLisa.png. . Afterwards, the monaLisa object calls the resize() method with an argument of 33 (resize the image to 33%). An Image object is created. Note: this is really important, the Image object needs to be created out of the try catch block, because if it is created within, the scope of the Image object is within the try catch block and can not be accessed outside. See this for more info. Moving on, the width and height are defined based on the resized scale, and the input file is once again read into img. The resizedImg is obtained by using the getScaledInstance method and assigning it the resized width and height. Next, resizedImg is converted into a buffered image with the name of the resizedFile (images/tmp/MonaLisa.png). The resizedFile is then set as the path of the input file. Once again, the setStats() method is called. . Because of scope of variables, some values of the variables have changed. The path of the input file (inFile) is now assigned to path. The size of the resized file is recorded, and the file is also read in by ImageIO. Additionally, the width and height of the resized file is recorded. . Going back to the main method, the printStats() method is called. Same thing as before, this outputs Scaled: 55625 128x136 images/tmp/MonaLisa.png. . Lastly, the convertToAscii() method is called. Once again, the Image object needs to be set as null outside of the try catch block in order to fulfill the scope of the variable. The first try catch block ensures that if there is already an Ascii file in the output directory, the file would be removed. Next, the PrintWriter and FileWriter object is called to output text (ASCII characters) into the ASCII file (images/tmp/MonaLisa.txt). ImageIO then reads the input file. . Onto the for loop, each pixel of the image is iterated, and a value is calculated based on the RGB value of the pixel. The larger the value (closer to white, or 255), the less space the ASCII character will pick up. As for smaller values (closer to black, or 0), the ASCII character will take up more space. This is called by the asciiChar(double g) method, and it returns the ASCII character. . Grayscale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class Pics { final String inDir = &quot;images/&quot;; // location of images final String outDir = &quot;images/tmp/&quot;; // location of created files String inFile; String resizedFile; String grayscaleFile; String outFile; String ext; // extension of file long bytes; int width; int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.outFile = this.outDir + name + &quot;New.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void changePic() { BufferedImage img; try { File file = new File(this.outFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } test(); } protected abstract void test(); } . public class Grayscale extends Pics { public Grayscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed() * 0.299); int green = (int)(col.getGreen() * 0.587); int blue = (int)(col.getBlue() * 0.114); Color rgb = new Color(red + green + blue, red + green + blue, red + green + blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Grayscale monaLisa = new Grayscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Grayscale.main(null); . . Red . public class Redscale extends Pics { public Redscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); Color rgb = new Color(red, 0, 0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Redscale monaLisa = new Redscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Redscale.main(null); . . Blue . public class Bluescale extends Pics { public Bluescale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int blue = (int)(col.getBlue()); Color rgb = new Color(0, 0, blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Bluescale monaLisa = new Bluescale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Bluescale.main(null); . . Green . public class Greenscale extends Pics { public Greenscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int green = (int)(col.getGreen()); Color rgb = new Color(0, green, 0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Greenscale monaLisa = new Greenscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Greenscale.main(null); . .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/01/w6_img.html",
            "relUrl": "/2022/10/01/w6_img.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Creating a table using JavaScript",
            "content": "Submenu | JavaScript | JavaScript Table | API | . . . Below is the code that I used to create the table above in JavaScript: . &lt;script&gt; function Fruits(name, taste) { this.name = name; this.taste = taste; } &lt;!-- space --&gt; var fruits = [ new Fruits(&quot;apple&quot;, &quot;sweet, sour&quot;), new Fruits(&quot;mango&quot;, &quot;sweet&quot;) ]; &lt;!-- space --&gt; function Combine(fruits) { this.fruits = fruits; this.combine = []; this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); } &lt;!-- space --&gt; var printFruits = new Combine(fruits); &lt;!-- space --&gt; var outputHTML = &quot;&quot;; outputHTML += &quot;&lt;table&gt;&quot;; outputHTML += &quot;&lt;tr&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + &quot;Fruit Type&quot; + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + &quot;Taste&quot; + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;/tr&gt;&quot;; &lt;!-- space --&gt; var week = 0; for (var row of printFruits.combine) { outputHTML += &quot;&lt;tr&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + row.taste + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;/tr&gt;&quot;; } outputHTML += &quot;&lt;/table&gt;&quot;; &lt;!-- space --&gt; document.getElementById(&quot;output_div&quot;).innerHTML = outputHTML; &lt;/script&gt; . . Explanation of code: . An object called printFruits is created. This calls the Combine constructor, which uses information from the fruits array, which calls the Fruits constructor. This creates a key of name and taste and a value as set by the code. . Now, what does this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); do? Understanding the arrow function (=&gt;) took me awhile, but this is basically a shorthand way to write: . this.fruits.forEach(function(fruit) { this.combine.push(fruit); }); . which basically adds the elements in the fruit array into a new array called combine. . Afterwards, a table is created using HTML within JavaScript. The for loop loops over the combine array and outputs it as HTML in the table. . And that’s it! A table made in JavaScript. .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/09/25/w5_javascriptTable.html",
            "relUrl": "/js/2022/09/25/w5_javascriptTable.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "JavaScript",
            "content": "Submenu | JavaScript | JavaScript Table | API | . . The following code prints a message to the console . console.log(&quot;Hi&quot;); . Hi . If you type this in a normal JavaScript file though, this message would not show on the webpage. Instead, you have to go to Inspect Element (Ctrl + Shift + I in Chrome, using Windows), and go to the Console tab to view the message. . . Functions . Since I can&#39;t run the following code below in Jupyter Notebook, I&#39;ll attach a screenshot of running the output in terminal. . The reason this can&#39;t be run Jupyter Notebook (although I&#39;ll have to do more research about Jupyter Notebook to fully understand) is that Jupyter Notebook can&#39;t take input for JavaScript using prompt or readline. Maybe there&#39;s another way to have Jupyter Notebook take in input, but that&#39;ll take me a long time to research. . As shown below, I made a calculator with the code below. I created the functions add, subtract, multiply, and divide. . const prompt = require(&#39;prompt-sync&#39;)(); var total = prompt(&#39;1st number? &#39;); var num2 = prompt(&#39;2nd number? &#39;); var operation = prompt(&#39;Add/subtract/multiply/divide? Type: +/-/*, or /: &#39;); function add(total, num2) { return Number(total) + Number(num2); } function subtract(total, num2) { return Number(total) - Number(num2); } function multiply(total, num2) { return Number(total) * Number(num2); } function divide(total, num2) { return Number(total) / Number(num2); } while (num2 != &quot;end&quot;) { if (operation == &quot;+&quot;) { total = add(total, num2); } if (operation == &quot;-&quot;) { total = subtract(total, num2); } if (operation == &quot;*&quot;) { total = multiply(total, num2); } if (operation == &quot;/&quot;) { total = divide(total, num2); } console.log(&quot;Your result is &quot; + total); num2 = prompt(&#39;2nd number? &#39;); if (num2 == &quot;end&quot;) { break; } operation = prompt(&#39;Add/subtract/multiply/divide? Type: +/-/*, or /: &#39;); } console.log(&quot;Your result is &quot; + total); . Running the code in terminal, here is the output. . . Array and objects . function Fruits(name, taste) { this.name = name; this.taste = taste; } var fruits = [ new Fruits(&quot;apple&quot;, &quot;sweet, sour&quot;), new Fruits(&quot;mango&quot;, &quot;sweet&quot;) ]; function Combine(fruits) { this.fruits = fruits; this.combine = []; this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); } printFruits = new Combine(fruits); console.log(printFruits.combine); . [ Fruits { name: &#39;apple&#39;, taste: &#39;sweet, sour&#39; }, Fruits { name: &#39;mango&#39;, taste: &#39;sweet&#39; } ] .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/25/w5_javascript.html",
            "relUrl": "/2022/09/25/w5_javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Creating a table using JavaScript for the CSA Team Project",
            "content": "This is a table created with JavaScript (not HTML) that displays the age and roles of the team members on the Crimebusters project. . . .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/09/25/w5_csaJavascriptTableTeam.html",
            "relUrl": "/js/2022/09/25/w5_csaJavascriptTableTeam.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "1.2 Collaboration",
            "content": "Examples of computing innovations: . Applications, such as games | Physical devices, such as computers | Systems, such as E-mail Ex: Systems for accessing and storing data | . Purpose of computing innovations is to help solve problems. . . Event driven programming: Program statements are ran when events are triggered . Forms of input and output: Tactile, audio, visual, text . For example, smartphones rely on tactile input. . Example of an input on a smartphone: Swipes . Action: Triggers an event . . Program: Group of statements, or commands . How to explain a code segment: . State it’s function | Explain how it performs its function | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/25/w5_CB_1-2.html",
            "relUrl": "/cb/2022/09/25/w5_CB_1-2.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Fibonacci",
            "content": "For loop . I first created an array that contained two elements. Within the for loop, the first element of the array is added to the list of numbers through the setData method. Next, I changed the first element of the array into the second element, and the second into the sum of the first and second element, and allowed the for lop to repeat. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ } . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init(){ super.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; super.size; i++) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = for loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 6 milliseconds . . While loop . Same method of approach as the for loop. This time, I used a while loop that would repeat when i incremented (with i++). . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init(){ super.name = &quot;while loop&quot;; long[] nums = new long[]{0, 1}; int i = 0; while (i &lt; super.size) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = while loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 12 milliseconds . . Recursion . I created a method called recursiveLoop(), and then had it call its method repeatedly until the size of the Fibonacci sequence was reached (20 in this case). . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init() { super.name = &quot;recursion&quot;; long[] nums = new long[]{0, 1}; test(0, nums); } public void test(int i, long[] array) { long[] nums = array.clone(); if (i &lt; super.size) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; test(i, nums); } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 3 milliseconds . . Skills . Skill 1.B: Determine code that would be used to complete code segments: (Explained in each type of code above) . | Skill 4.C: Determine if two or more code segments yield equivalent results . It&#39;s pretty simple to see how the for loop and while loop achieve the same results. In the for loop, each line of code is implemented, and after the program reaches the end of the loop, the loop is repeated (with i incrementing by 1), until i = 20 (the value of size). . The recursion is a little bit more complicated. First, the recursive loop is called within the init method, and then proceeds to run through the code. At the end of the code, i is incremented by 1, and the last line of code, recursiveLoop(i) tells the program to run the recursive loop again, repeating until i = 20. . tldr; As a result, all three methods achieve the same result in that the code within the loop is ran, i increases by 1, which causes the loop to run again until i = 20. . | Skill 5.A: Describe the behavior of a given segment of program code: (Explained in each type of code above) . Timing: Using system.nanoTime(), it seems as if the for loop runs the fastest, followed by recursion, and lastly the while loop. . | . Things I learned . From the example of Fibo using stream. . this(): Calls constructor with the same name in the current class . Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}): . new long[]{0, 1}: Creates an array, becomes the seed for the Stream.iterate method | f -&gt; new long[]{f[1], f[0] + f[1]}: Lambda expression, passing in the parameter of f into the function new long[]{f[1], f[0] + f[1]} | . .limit(this.size): Set a limit (in this case, 20), to the number of times the stream iterates . .forEach(f -&gt; this.setData(f[0]));: For each item, run the setData() method . Hashmap: Unlike an array that is accessed through an index, a hashmap uses key/value pairs. As a result, the index of a hashmap can be an string, whereas the index of an array is an integer. . . An explanation of the Fibo code using streams. . Looking at the code was pretty challenging, but after searching up each unfamiliar piece of code, I had a general idea of what the program does. . I will explain below what the code does so that it can further my understanding of Java. . By creating the fib object, the Fibo() constructor is ran. this(20); points to the Fibo(int nth) constructor. The code within the constructor is ran, mainly use to assign variables to various values. Next, the init() method is ran. An array is created within the stream. The stream will iterate 20 times, as determined with .limit(this.size). Next, for each item (the element in the array), the setData method will run with f[0] as an argument. When the stream iterates again, the array will change it&#39;s first element to the second element, and its second element to the sum of the first and second element. Now onto running the setData(long num) method. First, the element of f[0] will be added to the already created list. Next, a hashmap will be created, with a key with the index number, and a value with a duplicate of the list (list.clone();). Going back to the main method, fib.print(); runs the print() method. I&#39;ll skip the basic calling the variable stuff and proceed to the second System.out.println, in which the getNth() method is ran. Here, the last element of the list (and you have to access the last element with this.size - 1 because there are 20 elements in the array, so the 20th element is accessed using the 19th index since indexes start at 0) is obtained to print the 20th Fibonacci number. Next, the entire Fibonacci array and hashmap is printed. Finally, the for loop outputs each of the values for the specified key. The Fibonacci sequence for each number is printed successfully because each key is associated with a list, which contains the Fibonacci sequence for the sequence number. .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/24/w5_fibonacci.html",
            "relUrl": "/2022/09/24/w5_fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "CSP Project Planning",
            "content": "Our Aim . We want to prioritize the customer before anything else; here’s how this will be done: . Our website will run smoothly with minimal errors | Try to keep our website as engaging as possible | Listen to reviews and make changes as necessary | Make the results accurate | About the Project . In this project, we are making a reverse dictionary. We were inspired by many students’ studious and driven culture and wanted to create a site that could help them. A problem that we noticed among many students, especially those in advanced English courses, is that they often don’t know or can’t remember the word they want to use. Through the use of this website, we want to help these students allowing them to do well where ever they choose to use this website. . How is This Done . In order to achieve this, we first need to get a basic understanding of how reverse dictionaries work and how to code them. After searching on Google, we came across many fascinating sites, some even explaining the basics of a reverse dictionary. Essentially it is looking for an output similar to the combination of the inputs. One of our ideas was to make the user input either the definition of the word or other words related to the word they need. For example, if you’re searching for the word “apple,” you can input “fruit,” “red,” and “grows on trees” to get your result. And currently, we are planning to code most of this with Python, use HTML to display everything, and use JavaScript to allow the user to interact with the results. . Create Performance Task Categories . 1 Program Purpose and Function . See above . 2 Abstraction . Each synonym could be stored in a list, which would either be manually created by us (less likely), or given in the API (more likely). The hard part would be to find a reverse dictionary API. . Managing Complexity . By using a list to store the synonyms of words, the code would be simplified so that multiple variables, each storing only one word, would not be needed. . 4 Procedural Abstraction . We could make functions that include that collect the user’s inputs of various word definitions. These inputs would then need to be processed by comparing with the information in the API and then being able to output the ideal words to frontend. . 5 Algorithm Implementation . Recursion can be used to repeatedly find definitions that contain certain keywords that the user implemented. if statements could be used to select the words with the closest definition and display them under a category, then select the words with a moderate level of closeness and put them in another category. . 6 Testing . Many parts of the program would include the need for testing. First of all, we need to implement an API and connect the frontend with the backend so that the frontend can display information about the API. This would require testing by inputting many definitions and seeing if the outcome word is what is desired. . Team Scrum Board . Team Scrum Board . Agile Methodology Diagram . . Our team used Slack as a form of communication to plan out our project. . .",
            "url": "https://lwu1822.github.io/fastpages/csp/2022/09/17/w5_CSPProjectPlanning.html",
            "relUrl": "/csp/2022/09/17/w5_CSPProjectPlanning.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "1.1 Collaboration",
            "content": "College Board Big Ideas Learning Objectives: . CRD-1.A Explain how computing innovations are improved through collaboration. . CRD-1.B Explain how computing innovations are developed by groups of people . CRD-1.C Demonstrate effective interpersonal skills during collaboration. . Essential knowledge: . CRD-1.A.1 A computing innovation includes a program as an integral part of its function. . CRD-1.A.2 A computing innovation can be physical (e.g., self-driving car), nonphysical computing software (e.g., picture editing software), or a nonphysical computing concept (e.g., e-commerce) . CRD-1.A.3 Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. . CRD-1.A.4 Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. . CRD-1.A.5 Consultation and communication with users are important aspects of the development of computing innovations. . CRD-1.A.6 Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives. . CRD-1.B.1 Online tools support collaboration by allowing programmers to share and provide feedback on ideas and documents. . CRD-1.B.2 Common models such as pair programming exist to facilitate collaboration. . CRD-1.C.1 Effective collaborative teams practice interpersonal skills, including but not limited to: . communication | consensus building | conflict resolution | negotiation | . Collaboration allows people who specialize in different areas to work together to reach an end product. It can involve the combination of the diverse ideas of many people. Skills that are developed through collaboration include: communication, consensus building, conflict resolution, and negotiation. . Computing innovation: A physical or nonphysical program. Examples include VSCode (nonphysical) or a self driving car (physical). . Collaboration can take place in many formats. Examples include: pair programming (one as driver, one as navigator), think-pair-share (students think through a problem alone, discuss in pairs, then share with class). . Online tools for collaboration: . repl.it | Github | Shared document/folder | . Comments in code also help with communication to yourself and others reading your code. .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/17/w4_CB_1-1.html",
            "relUrl": "/cb/2022/09/17/w4_CB_1-1.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Iteration with 2D array",
            "content": "The following code outputs the monkeys horizontally in an imperative programming style. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts // PREVENT NEW LINE FROM POPPING UP //System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . With objects . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); } } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ . How to access arrays? . If you want to access individual elements within an array, you can access them with arrayName[row index][column index]. . What if I want to print all of the contents in an array? . We can use a for loop to achieve this. . for (int row = 0; row &lt; totalRow; row++) { for (int column = 0; column &lt; totalColumn; column++) { System.out.println(&quot;arrayEx[row][column]&quot;); } } . Complete song . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public void doctor(int num) { String doctorMsg[] = {&quot;.-.&quot;, &quot;===(_)== No more monkeys jumping on the bed!&quot;, &quot;// 6 6 /&quot;, &quot;( 7 )&quot;, &quot; &#39;--&#39; /&quot;, &quot; _ ._/&quot;, &quot;__) (__&quot;}; System.out.println(doctorMsg[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); MonkeyLoop doctorText = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); System.out.println(&quot;One fell off and bumped his head.&quot;); System.out.println(&quot;εミ(×。×)ο&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); for (int i = 0; i &lt; 7; i++){ doctorText.doctor(i); } System.out.println(&quot;&quot;); } System.out.println(&quot;oof&quot;); } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ oof .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/14/w4_2D_Array.html",
            "relUrl": "/java/2022/09/14/w4_2D_Array.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "AP CSA 2022 and 2016 FRQ",
            "content": "2022 #1a . First attempt: . public int getScore() { Level goal = new Level(); Level points = new Level(); int pointTotal = 0; if (goal.goalReached()) { pointTotal = points.getPoints(); } } . I got stuck at the point above, so I looked at part of the answers. Here is my attempt afterwards: . What the code does: . A variable pointTotal is created that records the amount of points that the player earns. Since the points from level 2 and level 3 are earned only if the previous level is completed, I created if loops within the if loop. . After the points from the levels are totaled, the code then tests the ifBonus method. This is a boolean if statement where if ifBonus is true, the total score would triple. . public int getScore() { int pointTotal = 0; if (levelOne.goalReached()) { pointTotal += levelOne.getPoints(); if (levelTwo.goalReached()) { pointTotal += levelTwo.getPoints(); if (levelThree.goalReached()) { pointTotal += levelThree.getPoints(); } } } if (isBonus()) { pointTotal *= 3; } return pointTotal; } . Questions: . Why are objects not defined to call goalReached and getPoints? | . After some researching, I learned from this video that if methods are in the same class (isBonus and getScore are in the same class), an object does not need to be created to call the method. . #1b . public int playManyTimes(int num) { int scores[]; int maxScore = 0; for (int i = 0; i &lt; num; i++) { play(); scores[i] = getScore(); } for (int i = 0; i &lt; num; i++) { if (scores[i] &gt; maxScore) { maxScore = scores[i]; } } return maxScore; } . An array wasn&#39;t needed. All you had to do was compare the scores within the for loop like this: . public int playManyTimes(int num) { int maxScore = 0; int score = 0; for (int i = 0; i &lt; num; i++) { play(); score = getScore(); if (score &gt; maxScore) { maxScore = score; } } return maxScore; } . . 2016 #1a . Initial thoughts: . When I first read the question, I did not know where to start, so I looked at part of the answers to guide me on what to learn. . Looking at this, . . I was confused as to what List&lt;String&gt; was, so I googled it. . I learned that List&lt;String&gt; is used to make an object that can store the array list. For instance, List&lt;String&gt; list = new ArrayList&lt;String&gt;(); . I also saw how an array list can also be created with ArrayList&lt;String&gt;. The difference between ArrayList&lt;String&gt; and List&lt;String&gt; is that with List&lt;String&gt;, you can typecast the array list into a different type of list; however, you can&#39;t do that with ArrayList&lt;String&gt;. . The code below is what I got started with before I became stuck again. . public class RandomStringChooser { private List&lt;String&gt; words; public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); } } . Once again not knowing how to proceed, I took a look at the answers and came upon this: . . Because I had no idea what the syntax meant, I hopped onto Google and did some searching. . So, for (String singleWord : wordArray) is an example of a for-each loop. A for-each loop allows you to loop through the elements in an array list. . Below is a simple example of a for-each loop: . public class ForEachDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); for (String i : fruits) { System.out.println(i); } } } ForEachDemo.main(null); . apple pineapple mango . This essentially creates is the same as using a regular for loop, and printing out each index in the array list using .get. .get returns the element specified in the index number. . public class GetDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); // same as: // for (String i : fruits) { // System.out.println(i); // } for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } GetDemo.main(null); . apple pineapple mango . The code below is my continued attempt at answering 1a, after learning about the for-each loop. . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { return words.remove((int)(Math.random() * words.size())); } } } . This was close, but I forgot that NONE should be the output once all of the elements in the array list have been used. The correct answer is: . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { // forgot to write an if statement if (words.size() &gt; 0) { return words.remove((int)(Math.random() * words.size())); } return &quot;NONE&quot;; } } } . Concluding thoughts . This question was hard mainly because I had no idea what an array list was prior to doing this question. Although I looked at the answer key a few times, I researched all of the code that I did not understand to help me learn what an array list was, how to create it, and how to use iteration with array lists. . . 1b . Explanation: . If I&#39;m understanding correctly, when the object letterChooser is created, the RandomLetterChooser constructor will run. Since we want to create an array of strings, we would use the super keyword to call the getSingleLetters method, which will split the word into an array of strings. Then, System.out.print(letterChooser.getNext()); is ran, which will call the superclass&#39;s constructor and then run the getNext method. This will randomly output the characters. . The code below matched the answer key. . However, one thing that I wondered as I was examining the answer was, why was there no super() in RandomLetterChooser, which would call the superclass (RandomStringChooser). The answer, after some googling, told me that even if you don&#39;t type super(), the superclass will still implicitly be called. . public RandomLetterChooser(String str) { super(getSingleLetters(str)); } .",
            "url": "https://lwu1822.github.io/fastpages/ap_test_prep/2022/09/14/w4_2016_2022CSAFRQ.html",
            "relUrl": "/ap_test_prep/2022/09/14/w4_2016_2022CSAFRQ.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Create Performance Task",
            "content": "Notes . I watched this video and this to learn more about the requirements for the create task. . Some notes that I took down for future reference: . The code can be written in any programming language that satisfies the requirements. . | Requirements include having: input, list that manages complexity, procedure with algorithm, a call to the procedure, and output . | A video demonstrating the code will also be required. Within the video, you will need to show at least one input and output and the program&#39;s function. . | . Speaking of functions, there is a difference between the word &quot;function&quot; and &quot;purpose&quot;: . Purpose: The problem that is being solved/something that you pursue for a creative interest . | Function: How the program acts when you run it . | . While we&#39;re at it, some other vocab that I was unfamiliar with 1: . Procedure: Same thing as function . | Algorithm: Code that performs a specific action . | . . Anyways, back to the notes: . In addition to the code and a video, you will also need to submit a written response. A written response consists of four parts, questions 3a-3d. . | 3a. You will be writing about the program&#39;s purpose. Why did you create this program? You will also be documenting the program&#39;s function. Remember: Function and purpose are two different things! . | 3b. How does your list manage complexity? . | 3c. What does your procedure do, and make sure to talk about your algorithm. . | 3d. Testing! Make two different test scenarios for your code. . | . . Plagiarism . Obviously, plagiarism is a serious thing, so don&#39;t do it. However, there are some tiny things that you may have to pay attention to while creating your program to ensure that you don&#39;t get caught for plagiarizing. . Anything that is not your own code - this includes libraries - must be cited . | If you are using pictures or music that is not yours, cite that too . | . . Citing doesn&#39;t have to be anything fancy, just note that you used someone else&#39;s work somewhere in your code. . Ideas . I&#39;m still thinking of some ideas for my create task. The one that I&#39;m most inclined to creating is a schedule/planner. . A record of how this project would fulfill the create task requirements: . Input: User input would be typing into a text box of their tasks for the day. User will also specify a certain amount of hours that they have to work that day. . | List: The user input of assignments will be stored into a list that contains all of the tasks. . | Procedure and algorithm: Most likely to calculate the amount of time each task should be spent on . | Output: Output will be a calculation of how long each task should be spent on for the day. Output may also give certain times to do the task. . | . . A few other notes: . The program will most likely start by equally dividing the total time amongst all activities. By entering more input, the user is able to change how many hours they want to spend on a task based on the task&#39;s priority. | . Plans for AP MCQ . Each week, I&#39;ll blog about what I learned that&#39;s related to the APCSP test prep. . | I can add vocab on the vocab page (on my blog). This can serve for to record of what I learned and also a future reference for me to study. . | . 1. Paraphrased from CollegeBoard↩&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://lwu1822.github.io/fastpages/create-performance-task/2022/09/11/createTaskLog.html",
            "relUrl": "/create-performance-task/2022/09/11/createTaskLog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Thoughts from the video",
            "content": "Problem: . Many students are so stressed from academics that it is hard to also to have some time to just relax and have fun. . | It becomes hard to focus on so many opportunities that surround us . | Depression, anxiety, stress, etc. . | . Solution (how to feel less stressed): . Positive psychology: What is the secret to be happy? . | Behavior change: How we form habits and create choices? How do we change our behavior to become better? | How we become happier over time | . How to become happier . Take time to feel gratitude | Socialize | Be mindful | Exercise | Sleep | . 10 insights . We can control our happiness | Things in life don’t matter as much as we think | It takes effort to be happy | Repetition, repetition, repetition . Your mind is lying to you about what it means to be happy | Ex: The assumption that more money makes you happier. -&gt; The more money you have, the more likely you’ll want more. . Socialize | Help others | Be grateful | Jot down what you are grateful for. . Exercise, sleep sleep sleep sleep sleep | Pay attention to what you’re doing, focus on the small, happy things in life | Be wealthy in time, not necessarily in money | Gratitude: School: I’m grateful for all of my friends in school. They help make going to school everyday fun and something to look forward to. I know that if I ever need help, I can count on them, and for that, I am thankful. . Home: I’m thankful to my parents for supporting me, especially when at times, high school is hard and makes me more stressed (haha, like what this whole blog post is aimed to resolve). I’d like to give a special shoutout to my mom, because even though sometimes I can get a little frustrated, I know she wants the best for me and I really appreciate all of what she has done for me. . Additional things I’m grateful for: . My AWS deployment worked!! Only minor issue was I forgot to type sudo for one of the commands, and it took me half an hour to find out (˚ ˃̣̣̥⌓˂̣̣̥ ) | The fantastic shrimp and mooncake I just ate | Reading on a rainy day | Walking outside to relax | The small things in life :) | . . Goals: . Think about what I am grateful for more often | Practice some of the insights noted above when I feel stressed | Sleep at least eight hours everyday | Maintain a work life balance | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/09/09/w3-video.html",
            "relUrl": "/misc/2022/09/09/w3-video.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "App Lab Plan",
            "content": "Here is the link to my app. . Subject . Since I’m in AP Stats, I decided to create a statistics quiz. . Questions . What is the mean of the following set of numbers: 5, 8, 9, 15, 16? | Normal distribution picture: What percent of data lies between one standard deviation of the mean? | A class of 30 students were surveyed on how many hours they sleep. The average was 7 hours with a standard deviation of 1.5 hours. What percentage of students sleep less than 8 hours? | Initial planning with partner . Shreyas and I planned out a general format for how we would make our individual apps. . We planned out four stages to make the app: design, brainstorm, implementation, and finishing. . We both created quizzes with three questions. Some of the code that we planned on excessive use was the onEvent function, which allowed an action to happen, such as switching the screen, given that something has occured, such as the click of a button. . Design . My app consists of six screens: Homepage, questions 1-3, end screen, and a finish screen. . Below are some pictures of what the initial design looked like: . . . After the initial design, I made a few revisions, namely changing the font, adding buttons (originally, the user had to click the screen), and adding radio buttons for the multiple choice selection. . An intermediate photo where I added a button: . . One of my screens on the final design: . . Coding . My code is relatively simple. A majority of the code used the onEvent function. I used the function for two purposes, the first was to change the screen when the Next button was pressed, and the second was to increase the score if the correct multiple choice was selected. . . Something else I made additionally was the use of a list that recorded if the user answered each individual question correctly. At the end of the quiz, the person would be able to receive feedback on what they answered correctly and anything that they could improve on, if needed. . I accomplished this by creating a list with the name of questionRight. The index of the array corresponded to the question, so if the user answered correctly on the first question, questionRight[0] would have a value of 1. At the end of the quiz, the questions that had a value of 1 would have a congratulations message, and the questions that had a value of 0 (incorrect) would have an explanation on how to arrive at the correct answer. . Explanations of code . This is a screenshot of part of my code. The rest of my code followed basically the same format. If you wish to check out my code, you can do so here. . . Here’s how the code works: . The first block of code is an onEvent function, in which when the next button (q1ButtonNext) was pressed, the app screen will change to the next question (q2Screen). . The second block of code is another onEvent function. This time though, when choice B is selected (q1ButtonB), a predefined variable score will increase by 1. . . Now I’ll give an overview on the use of a list in my app. First, I created a list called questionRight that contains three elements, each with the value 0. . . Later on in the code, if the user selects the correct answer choice for the button, the value of the element would become 1. . . At the end of the code, I used an if-else statement to decide which feedback message to show. If the element of the index is 0, the feedback for the wrong answer would be show; otherwise, the feedback, for the correct message would show. . . I could use individual variables in the code, but I used a list partially in preparation for the AP CSP Create Task. I think using a list would help in that if the quiz had more questions, using a list would be more organized than creating an individual variable for each question. . Things I learned . The code I encountered in AppLab was new to me. I used the documentation 1 very frequently. . I had to learn most of the things I coded. The most important code that I learned was the onEvent function. You can use it to specify an action to do when a certain event occurs, such as the press of a button. . Documentation 1 and 2 &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/09/08/w3-app-lab-plan.html",
            "relUrl": "/code.org/2022/09/08/w3-app-lab-plan.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "If-Else Lesson",
            "content": "If . if is a conditional statement. It tests &quot;if the condition is true, then run the code within the if statement&quot; . The if statement syntax is like this: . if (condition) { // code } . Types of conditions: . a &lt; b | a &lt;= b | a &gt; b | a &gt;= b | a == b | a != b | true | false | . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to the current weather (rainy) // if the weather is rainy, remind the user to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . . If-else . The syntax for if-else statements are as follows: . if (condition) { // run this if condition is true } else { // run this if condition is false } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; // assign variable weather to sunny // if weather is rainy, remind to bring an umbrella // otherwise, no need to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else { System.out.println(&quot;No need for an umbrella!&quot;); } } } IfElseLesson.main(null) . No need for an umbrella! . . Else-if . else-if statements are written like this: . if (condition) { // run if condition is true } else if (condition 2) { // run if condition is false and condition 2 is true } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to rainy // if weather is rainy, remind to bring an umbrella // if weather is sunny, remind to bring a hat if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . Setting variable weather to sunny: . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring a hat! . . Putting It All Together . #1 . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;cloudy&quot;; // assign variable weather to cloudy // because it is cloudy, print that the weather is nice if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } else { System.out.println(&quot;Nice weather outside!&quot;); } } } IfElseLesson.main(null) . Nice weather outside! . #2 . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input if (questionNum == 100) { // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); // if answer is correct, add 100 points to score System.out.println(answer); if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below } else if (questionNum == 200) { System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } } else if (questionNum == 300) { System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } } else if (questionNum == 400) { System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } } else if (questionNum == 500) { System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . Switch case statements . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input switch (questionNum) { case 100: // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); // if answer is correct, add 100 points to score if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below case 200: System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } case 300: System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } case 400: System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } case 500: System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions (this is important, remember this for later). . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; 1 . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; 2 . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Now how is this useful? . Remember this? . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) 3 . 1. Reference↩ . 2. Reference↩ . 3. Reference↩ . Example in Coding . because what would De Morgan&#39;s law be if it&#39;s not applicable to coding? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . More examples: . This code reads: If it&#39;s not sunny and it&#39;s not cloudy and it&#39;s not snowy and it&#39;s not windy, then bring an umbrella. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!sunny &amp;&amp; !cloudy &amp;&amp; !snowy &amp;&amp; !windy) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . This code is kind of messy, huh? . How about this code? . This code reads: If it&#39;s not sunny or cloudy or snowy or windy, then bring an umbrella. . Better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!(sunny || cloudy || snowy || windy)) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . . A more complicated example... . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // huh??? if (!(!nopineappOnPizza &amp;&amp; !pineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! . Is this better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // if no pineapple on pizza or yes pineapple on pizza... // since there is a pineapple on pizza, then pineapple on pizza is good if ((pineappOnPizza || nopineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/07/w3-if-else.html",
            "relUrl": "/java/2022/09/07/w3-if-else.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Console Menu",
            "content": "The following is a console that incorporates our group&#39;s calculators. . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;2 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;3 - Vidhi&#39;s Print a Random Number&quot;); System.out.println(&quot;4 - Modulus Calculator&quot;); System.out.println(&quot;5 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); break; case 2: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 3: Scanner input5; System.out.println(&quot;This option will print a random number from 0 to 1&quot;); double random = (double) (Math.random()); System.out.println(random); break; case 4: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 5: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Lily&#39;s Average Calculator 2 - Vidhi and Riya&#39;s Temp Convertor 3 - Vidhi&#39;s Print a Random Number 4 - Modulus Calculator 5 - William&#39;s F=ma calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Lily Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 22.0 degree Celsius is equal to 295.0 in Kelvin 3: This option will print a random number from 0 to 1 0.2392119484083327 4: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 5: F=ma calculator Enter the mass: 5.0 Enter the accel: 2.0 Force calculator 5.0*2.0=10.0 0: Goodbye, World! . My menu . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Average Calculator&quot;); System.out.println(&quot;2 - Z Score Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; if (selection == 0) { System.out.print(&quot;Goodbye, World!&quot;); quit = true; } else if (selection == 1) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); } else if (selection == 2) { double x = 0; double avg = 0; double standardDeviation = 0; double z = 0; Scanner sc2 = new Scanner(System.in); System.out.println(&quot;Enter x: &quot;); x = sc2.nextDouble(); System.out.println(x); System.out.println(&quot;Enter avg: &quot;); avg = sc2.nextDouble(); System.out.println(avg); System.out.println(&quot;Enter standard deviation: &quot;); standardDeviation = sc2.nextDouble(); System.out.println(standardDeviation); z = (x-avg)/standardDeviation; System.out.println(&quot;Your z score is: &quot; + z); } else { //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Average Calculator 2 - Z Score Calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: Enter x: 10.0 Enter avg: 5.0 Enter standard deviation: 2.0 Your z score is: 2.5 0: Goodbye, World! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/05/w2-menu.html",
            "relUrl": "/java/2022/09/05/w2-menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Dictionary",
            "content": "Variables belong to a certain data type. Examples that we have seen before include: int, string, and bool. . Lists and dictionaries are also types. . Explanation of what the code does: . I first added three entries into the dictionary. Keys include FirstName, LastName, and some others that I created, such as Hobbies and Sports played. . I used a for loop to print the records from the dictionary. The for loop ranges from 0 to the length of the dictionary, in this example, 2. I then printed each record by printing the index of the dictionary (InfoDb[i]), starting from 0, then 1 and finally 2. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . For loop without index . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for record in InfoDb: print_data(record) for_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . While loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Recursive loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Reverse database . How the code works . This mainly used my code above. What I changed was using the reversed function for the for loop, which would print InfoDb[2], then InfoDb[1], and finally InfoDb[0]. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop_reverse(): for i in reversed(range(len(InfoDb))): record = InfoDb[i] print_data(record) return for_loop_reverse() . John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none . Add your own record to the database . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) print(&quot;Enter your info below!&quot;) firstName = input(&quot;First name?&quot;) print(&quot;First name? &quot; + firstName) lastName = input(&quot;Last name?&quot;) print(&quot;Last name? &quot; + lastName) bday = input(&quot;Birthday?&quot;) print(&quot;Birthday? &quot; + bday) book = input(&quot;Favorite books?&quot;) print(&quot;Favorite books? &quot; + book) food = input(&quot;Favorite foods?&quot;) print(&quot;Favorite foods? &quot; + food) hobby = input(&quot;Hobbies?&quot;) print(&quot;Hobbies? &quot; + hobby) sport = input(&quot;Sports played?&quot;) print(&quot;Sports played&quot; + sport) InfoDb.append({ &quot;FirstName&quot;: firstName, &quot;LastName&quot;: lastName, &quot;DOB&quot;: bday, &quot;Favorite books&quot;: [book], &quot;Favorite food&quot;: food, &quot;Hobbies&quot;: [hobby], &quot;Sports played&quot;: [sport] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Enter your info below! First name? Lily&#39;s Last name? Clone Birthday? July 24 Favorite books? lol Favorite foods? Rice Hobbies? Programming Sports playedNone Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Lily&#39;s Clone Birthday 🥳: July 24 Favorite books: lol Favorite food: Rice Hobbies: Programming Sports played: None . Learning . The purpose of lists and dictionaries are to collect information. . Add to dictionaries with .append(). . Dictionaries consist of key/value pairs. For example, &quot;FirstName&quot; is a key, while &quot;Lily&quot; is a value. . Application Programming Interface: Also known as API, it is the process in which data is shared between programs. Lists and dictionaries are the first step to learning about databases. . Code that I learned . d_rec: Stands for dictionary record. You can use it to call the specific information in the dictionary. . For example, print(d_rec[&quot;FirstName&quot;]) would print the specific value in the dictionary of the FirstName key. .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w2-dictionary.html",
            "relUrl": "/python/2022/09/05/w2-dictionary.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Python Quiz",
            "content": "Explanation of code . I imported the getpass and sys library. The quiz first recognizes the user&#39;s username and path to the Python interpreter. . The quiz then asks a few questions and answers, which are included in a list. Using the for loop, I can use recursion to iterate through each index in the list. . import getpass,sys print(&quot;Welcome &quot; + getpass.getuser() + &quot;. Your Python interpreter is currently running on the path: &quot; + sys.executable) questions = [&quot;What is the name for code that does not change every time you run the program?&quot;, &quot;What is the Python command that allows user input?&quot;, &quot;What do you use to combine different data types within the print statement?&quot;, &quot;def foo(bar): What is bar also known as?&quot;, &quot;What comparison operator do you use in Python to test if two values are equal to each other?&quot;, &quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answers = [&quot;static text&quot;, &quot;input&quot;, &quot;concatenation&quot;, &quot;parameter&quot;, &quot;==&quot;, &quot;import&quot;, &quot;if&quot;, &quot;expression&quot;] questionNum = len(questions) score = 0 for i in range(questionNum): print(questions[i]) # This is solely so that the user can see the questions in the Jupyter Notebook output response = input(questions[i]) print(&quot;Answer: &quot; + response) # Again, to show the output if response == answers[i]: print(&quot;Correct!&quot;) score += 1 else: print(&quot;Incorrect! The correct answer is: &quot; + answers[i]) print(&quot;Your total score is: &quot; + str(score) + &quot; out of &quot; + str(questionNum)) . Welcome lwu1822. Your Python interpreter is currently running on the path: /home/lwu1822/anaconda3/bin/python What is the name for code that does not change every time you run the program? Answer: static text Correct! What is the Python command that allows user input? Answer: input Correct! What do you use to combine different data types within the print statement? Answer: ? Incorrect! The correct answer is: concatenation def foo(bar): What is bar also known as? Answer: parameter Correct! What comparison operator do you use in Python to test if two values are equal to each other? Answer: == Correct! What command is used to include other functions that were previously developed? Answer: import Correct! What command is used to evaluate correct or incorrect response in this example? Answer: if Correct! Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Answer: ? Incorrect! The correct answer is: expression Your total score is: 6 out of 8 . How the rest of this post will be structured . This post captures my learnings from this page. . I will first document my learnings, and then display the code and its output below. . . In programming languages, a lot of the things within parenthesis are called parameters. . For example, in the code below, Hello World! would be an argument. . Static text: Text that stays the same. . print(&quot;Hello World!&quot;) . Hello World! . . Input and output . This is known as dynamic, versus static. Dynamic means that a variable can change each time you run the code. For example, each time you run the code, the input could change. . In Python code, the things specified in parenthesis are known as parameters. For example, in the code below, usr_input is a parameter. . usr_input = input(&quot;Enter some text: &quot;) print(usr_input) . hi :) . . Function . Note: Indentation matters in Python . When creating a function, make sure to indent to tell Python which lines of code belong within the function (since Python does not use curly braces to delineate functions). . Functions are created with the def keyword. . def addNum(a, b): return int(a) + int(b) num1 = input(&quot;Enter 1st number: &quot;) print(&quot;Enter 1st number: &quot; + num1) num2 = input(&quot;Enter 2nd number: &quot;) print(&quot;Enter 2nd number: &quot; + num2) total = addNum(num1, num2) print(&quot;Your total is: &quot; + str(total)) . Enter 1st number: 1 Enter 2nd number: 2 Your total is: 3 . . Libraries . Libraries can be imported with the - you guessed it - import function. . Examples of libraries include getpass and sys. . import getpass import sys print(&quot;You are: &quot; + getpass.getuser()) print(&quot;Your Python interpreter is running at the file path: &quot; + sys.executable) passwd = getpass.getpass(prompt=&#39;Enter the password. Hint: what language does this program run in? &#39;) print(&quot;Enter the password. Hint: what language does this program run in? &quot;) print(passwd) if passwd == &quot;python&quot;: print(&quot;Welcome! &quot; + getpass.getuser()) else: print(&quot;Incorrect!&quot;) . You are: lwu1822 Your Python interpreter is running at the file path: /home/lwu1822/anaconda3/bin/python Enter the password. Hint: what language does this program run in? python Welcome! lwu1822 .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w1-python-quiz.html",
            "relUrl": "/python/2022/09/05/w1-python-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "HTML and CSS",
            "content": "I changed the theme from minima to minimal . . Overall, the minimal theme looked pretty similar to the minima theme. However, there were some problems with the new theme. . For some reason, when my window is maximized, the contents on the webpage are displayed incorrectly. . . But when I shrink my window, the contents are fine. . . I’m not sure why that is the case. Maybe if I have time, I’ll look into it. . . I reverted the theme back to minima. However, I wanted to change the background to something cool, maybe like a gradient. I used Vunsh’s blog as a starting point and used his dark mode .scss file (thanks!). Then, I changed the background color to a gradient using the linear-gradient command within the html, body, input, textarea, select, button block. . That’s pretty much all I changed. Looking at the .scss file, there were many parts of the code that I didn’t understand. By commenting and uncommenting each block of code, I was able to learn what they did. Here are my comments on some of the code. . . Some thoughts . I like the new theme, but I think there’s some things that I could change. . For instance, I don’t really like the font colors for the code here: . . However, this class isn’t mainly focused around CSS, so I’ll probably change the font colors only if I have time. . Table . Alright, I’m going to be honest. This took me hours to figure out, mainly because I had errors in my Liquid syntax because I forgot to include a space ╥﹏╥. . This is the page where I created my table and linked my weekly assignments. . I started off with a for loop using the {% for i in ([start num]..[end num]) %} template, where i is the week number. I then created each row in the table starting with the week number by printing {{i}}. I also used if statements ({% if i == # %}) and printed the links to my pages depending on the value of i. So if i == 0, I would print the links to Week 0, etc. .",
            "url": "https://lwu1822.github.io/fastpages/html/2022/09/05/2_html-css.html",
            "relUrl": "/html/2022/09/05/2_html-css.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Jekyll and Liquid",
            "content": "this took me hours to research btw . While I was setting up my fastpages blog, I noticed this interesting line of code in index.html. . . And I thought, hey, this is interesting, what does {{site.baseurl}} do? . After some googling, I found that {{site.baseurl}} wasn’t something in Markdown. Turns out it’s actually Jekyll syntax. . So what does {{site.baseurl}} do? . Basically, baseurl is the directory under the URL of the website. 1 So for example, this blog’s URL is lwu1822.github.io, and the baseurl is fastpages. . So I can just do ![]({{site.baseurl}}/images/diagram.png). Saves a lot of typing. . Pretty cool, huh? 😊 . . Something else I encountered while making this post . To type {{site.baseurl}} in this Markdown file, apparently you have to use the {% raw %} and {% endraw %} template around {{site.baseurl}} . 2 . Like this: . {% raw %} {{site.baseurl}} {% endraw %} . . Also something I encountered just as I was writing the line above . Notice how I was able to write {% endraw %} above? Unfortunately, it’s not that simple to just type it directly into your IDE, like this: . :warning: Warning: Don’t do this, it will break your code: . {% raw %} {% endraw %} {% endraw %} . The reason is because the first {% endraw %} will be interpreted as ending the {% raw %} template. . So if you want to be able to type {% endraw %} in Markdown, you need to do the following 3: . Create a variable, in this example, I’ll name it openTag, and assign it to {%: . {% assign openTag = &#39;{%&#39; %} . | Use the {{ openTag }} variable anytime you want to type text that contains {% in it. . For example, to type the text {% endraw %}, you would do: . {{ openTag }} endraw %} . | . Even more something that I learned . Apparently, you also can’t type {% directly in the IDE, which would also break your code (took me a long time to debug （ꐦ𝅒_𝅒）) . Instead, you have to type: {{ openTag }} . . Things for me to contemplate on: . I noticed on the provided Fastpages Notebook Blog Post, you can add an image without the baseurl. For example, you can specify an image with ![](images/diagram.png). Not sure why that works, but I’m guessing it has something to with Jupyter Notebooks. . . baseurl &#8617; . | Liquid template language &#8617; . | I took the steps from here but quite frankly, I found the explanation a little confusing, so I simplified it as much as I could in this blog &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "relUrl": "/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Alumni Panel",
            "content": "Takeaways . From today’s alumni panel event, I learned about the significance and prevalence of computer science. The skills learned in AP CSA and AP CSP are very applicable and can be used to solve real world problems. However, programmers face many difficulties in their coding career. For instance, Colin described about the constant error messages that are bound to show up while coding, which can leave a negative effect and greatly decrease motivation. One thing that really struck out to me, however, was the importance of google. Basically, any programming question you have can be solved by this very magical tool. Furthermore, PBLs not only occur in this class, but can also be found in colleges. For instance, Colin mentioned that in UCSD’s mechanical engineering, students will be tasked with a hands on project in their freshmen and senior year. The same methodologies still apply - scrum team and agile. Furthermore, not only is coding applied in CS majors, it is also used in other majors. For instance, Allison mentioned that stats majors are also required to program in R. A really cool example of where you could apply your coding knowledge was scripting. If you’re ever frustrated at repeating the same redundant tasks over and over again, hey- maybe try some automation :). Last but not least, a very important part of the event was the discussion of internships. Some tips that were brought up was to build a resume and to create some personal projects that demonstrate your passion for coding. Additionally, interaction with professors and TAs are a good idea to find research and programming opportunities. . . Notes that I took during the event . Challenge with compsci: . Error msg -&gt; keep motivation? | GOOGLE | Ego: People brag about internship Focus on own path | Work on own project | . | Learn computer theory in college (it’s different from high school programming) | Motivation: There’s always someone better than you | Don’t cut corner: Have a mindset to go above and beyond | Getting started There is no rigid structure telling you what to do | Don’t get restricted by your plan - be flexible | . | . Any PBL scenario in college? . UCSD mechanical engineering: 1 hands on project freshman and senior year Need to use scrum and agile flow | . | Study in group and work with other people | Learn what’s the best method to study | . Have you applied CS in your major if your major is not CS? . Convert data type, copy paste, manually -&gt; write script!! ;) | Matlab for mechanical student | Problem solving logic, working with Matlab | Jupyter notebook for technical paper | Stats majors: Program in R | . Existing college students, have you had a job with school/professor . Make a resume, talk with other students, find a way to stand out, what makes you unique? | Interact with a professor, ask if they have space in their labs | Interact with TAs | . Job/internships . Code Ninjas | Northrop Grumman | . Personal projects? . Companies look for personal projects | Have 2 or 3? | Visual projects are great | . Internships: . Have a resume | Know when to apply to internships, companies hire in September + November the year before the next summer | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Java Primitives",
            "content": "public class AvgCalculator{ public static void main(String[] args) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); } } AvgCalculator.main(null) . Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Mean: 3.0 . What I learned . Primitives include: int, double, boolean . String is not a primitive. . Code: Integer: int a . Double: double a . Boolean: boolean a . String: String a . To enable input, make sure to import the Scanner lirbary: import java.util.Scanner; . . Useful stuff learned while creating calculator: . if and while statements: . If the variable is an integer/double, you can use == . If the variable is a string, you must use .equals . Example: &quot;foo&quot;.equals(variableName) . . Playing with Code from Primitive Data Types . Variables . public class test { public static void main(String[] args) { int x = 5; System.out.println(&quot;This is an integer: &quot; + x); } } test.main(null) . This is an integer: 5 . Input + Output . import java.util.Scanner; public class Scanning { public static void main(String[] args) { Scanner test = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int input = test.nextInt(); System.out.println(input); System.out.println(&quot;Your number is: &quot; + input); } } Scanning.main(null); . Enter a number: 3 Your number is: 3 .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Code snippets",
            "content": "Collapsible Note: do not tab in HTML unless you want whitespace Also very important: Make sure to put an extra line after ``, otherwise, Markdown will not show. [Reference](https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab) &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/28/good-code-snippets.html",
            "relUrl": "/misc/2022/08/28/good-code-snippets.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "code.org Notes",
            "content": "Lesson 2 . Class header: . public class ClassName { } . Main method: . public static void main(String[] args) { } . Lesson 3 . Create an object with: ClassName objectName = new ClassName(); . Lesson 6 . Subclass: Inherits the behaviors and attributes of a superclass . Inheritance: The subclass inherits the behaviors and attributes of the superclass . To extend a class, type: public class [subclass] extends [superclass] . Inside the extended class, you need to create the constructor signature for the subclass, and type super() to call the superclass constructor and methods. . Like this: . public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Lesoon 7 Methods . Methods are defined with: . public void [methodName]() { // code } . These can be later called with an object. . For example, in Lesson 7 #2, I created a method called turnRight(). This is then called by with myPainterPlus.turnRight(); . . . Lesson 9 Loops . While loops: while (condition()) {} . Lesson 10 Conditionals . If statements: if (condition()) {} . If else statements: . if (condition()) { // code } else { // code } . To specify something not happening, use !. . Ex: if (!condition()) {} // if condition is false, proceed with if statement . Lesson 12 Decomposition and Design . Important: Code readability is very important. Also, a method should contain few lines of code (around 1-10). Each method should only be used to perform one task. .",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org.html",
            "relUrl": "/code.org/2022/08/28/code-org.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "code.org Answers",
            "content": "Lesson 2 . 2.1 . EXCEPTION error. No .java files are provided. Probably due to wrong file name. | No, wrong file name. | Yes, Java files must have the .java extension. | There is an error. The p in myPainter.move(); must be capitalized. | Yes, code is case-sensitive. | 2.2 . error: reached end of file while parsing | Need another } to finish code. . Yes, each opening curly brace needs a closing curly brace. | error: not a statement and error: &#39;;&#39; expected, meaning the command syntax is wrong. | Correct syntax: mypainter.move(); . See #3 | Yes, the error is fixed. | 3.1 . Painter starts at top left grid and faces east. | Stops at row 2 column 3, faces south. | Painter moves forward but does not paint because he has ran out. | Error because did not add () at Painter; | Added () |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org-answer.html",
            "relUrl": "/code.org/2022/08/28/code-org-answer.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "APEL Notes",
            "content": "APEL . There are three areas of writing that APEL focuses on: rhetorical analysis, synthesis, and argumentative. . In Tri 1, we are learning rhetorical analysis. . Rhetorical analysis . Thesis . According to Collegeboard’s rubric, the thesis can be located anywhere within your essay. However, it is suggested to write your thesis somewhere in the intro paragraph, preferably as the last sentence. . The thesis must consist of two parts: a purpose verb and the author’s message .",
            "url": "https://lwu1822.github.io/fastpages/apel/2022/08/28/apel.html",
            "relUrl": "/apel/2022/08/28/apel.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Tools",
            "content": "Basic commands . ls: Lists the contents in the current directory . cd [file path]: Move to a directory . pwd: List your current directory . echo &quot;Moving to home directory with the cd command&quot; cd echo &quot;What directory am I in?&quot; pwd echo &quot;Moving to my vscode directory&quot; cd /home/lwu1822/vscode echo &quot;What directory am I in?&quot; pwd echo &quot;What files are within this directory?&quot; ls . Moving to home directory with the cd command What directory am I in? /home/lwu1822 Moving to my vscode directory What directory am I in? /home/lwu1822/vscode What files are within this directory? APCSA APCSP fastpages spring_portfolio test . Variables . To create variables, simply assign a value to a variable name. . Ex: x=5 . Reference variables with $[var] . text=&quot;Hello World!&quot; echo &quot;$text&quot; . Hello World! . Note: Single and double quotes are different! . See example below . text=&quot;Hello World!&quot; echo &quot;$text&quot; echo &#39;$text&#39; . Hello World! $text . Python versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Java versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Playing with some Regex . echo &quot;Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39;&quot; # What this bash script does: # Checks if there is output after grep (searching) for packages starting # with &#39;j&#39; and ending with &#39;s&#39; # First lists all conda packages, then filters to only show the package # names (excludes Version and Build Channel) with the cut command # The grep command uses some fun Regex # ^ means that the character following it (in parenthesis) must start at the # beginning # .*: &quot;.&quot;&quot; means any character, &quot;*&quot; means match the character before it # any number of times -&gt; &quot;.*&quot; means match any character any number of times # $: Character before it (s) must be at the end if conda list | cut -d &quot; &quot; -f 1 | grep &quot;^j.*s$&quot; ; then : else echo &quot;No packages starting with &#39;j&#39; and ending with &#39;s&#39;&quot; fi . Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39; jupyterlab_pygments jupyterlab_widgets . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/lwu1822/.local/share/jupyter/kernels/bash java /home/lwu1822/.local/share/jupyter/kernels/java javascript /home/lwu1822/.local/share/jupyter/kernels/javascript python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . Conda check for Jupyter . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . (I have checked Slack :)) . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$check&quot; fi . python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . . Hacks . To verify tools: . For many packages, you can type the name of the package and then --version, or you can grep from the dpkg -l list . java --version dpkg -l | cut -d &quot; &quot; -f 3 | grep -E &quot;^(java)&quot; . Python 3.9.12 java-common . To verify Conda, you can use the conda list command. I&#39;m not going to do this here because the output is huge, but you can see above where I used regex and grep to search for the specific things I want . main_dir=vscode/ fastpages_dir=fastpages/ cd cd $main_dir/$fastpages_dir ls # git pull origin master . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word .",
            "url": "https://lwu1822.github.io/fastpages/bash/2022/08/26/tools.html",
            "relUrl": "/bash/2022/08/26/tools.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "LaTeX",
            "content": "LaTeX . Fastpages also supports LaTeX! So cool! . This is said to be the most beautiful math equation: . Ready? . Woah $e^{i pi} + 1 = 0$",
            "url": "https://lwu1822.github.io/fastpages/latex/2022/08/25/latex.html",
            "relUrl": "/latex/2022/08/25/latex.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Jupyter notebook post",
            "content": "Intro . Hi! This post will just be me playing around and explaining how to use Jupyter notebook in VSCode. I don&#39;t know about you, but VSCode&#39;s documentation is super long and wordy, so I&#39;ll try to use simple English and incorporate some humor within :) . This page will also include some tips and tricks that I found while using Jupyter Notebook, or some things that I struggled with. . Information on this page will also based on the descriptions on this page . What is Jupyter Notebook?? . For the long and wordy explanations that pop up when you google: Jupyter Notebook . Jupyter Notebook is an environment that allows you to create cells that can contain various types of code, including Python and Markdown. . Now, you might be wondering, why do I need this? . Well, there&#39;s a few reasons: . Jupyter Notebook is interactive. It allows you to move your program around. | What if you want to test a portion of your code? Instead of running the entire thing, you could use Jupyter Notebook to run code snippets. | . . Below is some testing of using Jupyter Notebook. I will add explanations of what these do later. . woah hidden input . print(&quot;peekaboo&quot;) . . peekaboo .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/08/21/jupyter-notebook-1.html",
            "relUrl": "/jupyter/2022/08/21/jupyter-notebook-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Python",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/python.html",
            "relUrl": "/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Java",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloStatic.main(null); . Hello World! .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/java.html",
            "relUrl": "/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "First post",
            "content": "Post #1 . This is a test for my first post. . Hi and welcome :) . Check out my About Me to learn more about me. . This is also a test in blue font. . Why does Comic Sans get so much hate :( .",
            "url": "https://lwu1822.github.io/fastpages/markdown/2022/08/19/post-1.html",
            "relUrl": "/markdown/2022/08/19/post-1.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post63": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi, and welcome to my blog! . My name is Lily Wu. I’m a junior at Del Norte High School. . My interests are in STEM, including programming, cybersecurity, and math. . I’m passionate about learning, and I love to play around and explore code. . I don’t know if this is a good thing, but I have a bad habit of falling down a rabbit hole as I look up what each code syntax does specifically. . I have some experience in C++, and am currently learning Python and Java. . Contacts: . Email: lwu1822@gmail.com . Github . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lwu1822.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Vocab . Agile . Agile helps teams work on a project through working towards a plan (usually 2 week sprints), and various methods to work together, such as stand up meetings and pair programming. . Typical roles in a team might include: scrum master, DevOps, frontend and backend developer. . Ways to help a team plan: . Issues | Scrum board | . What are some things necessary of a successful team? . Creativity | Critical thinking | Communication | Collaboration through leadership | Collaboration (teamwork) | Research | Technical | . Primitives . Primitives: Includes the data types of int, double, and boolean. . Note: String is not a primitive . Basic code: . Data types: . int [var], double [var], boolean [var], and String [var] . Input: . Scanner [var] = new Scanner(System.in); : Create a scanner object with a name of [var], set it equal to System.in, which is what the user inputs on the keyboard. .",
          "url": "https://lwu1822.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Weekly Work",
          "content": "Week Assignments . 0 | First post Java PythonJupyter Notebook | . 1 | Bash: Check if tools are installed Learnings from code.org Java Primitives | . 2 | Console Menu | . 3 | Iteration MinilabFocus/Habits | .",
          "url": "https://lwu1822.github.io/fastpages/weekly-work/",
          "relUrl": "/weekly-work/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board . Unit 1: Primitive Types . Exam Weighting: 2.5%-5% . Primitives | . Unit 2: Using Objects . Exam Weighting: 5%-7.5% . Unit 3: Boolean Expressions and if Statements . Exam Weighting: 15%-17.55% . Unit 4: Iteration . Exam Weighting: 17.5%-22.5% . Unit 5: Writing Classes . Exam Weighting: 5%-7.5% . Unit 6: Array . Exam Weighting: 10%-15% . Unit 7: ArrayList . Exam Weighting: 2.5%-7.5% . Unit 8: 2D Array . Exam Weighting: 7.5%-10% . Unit 9: Inheritance . Exam Weighting: 5%-10% . Unit 10: Recursion . Exam Weighting: 5%-7.5% .",
          "url": "https://lwu1822.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  

  
      ,"page8": {
          "title": "",
          "content": "AP CSA . Project Based Learning (PBL) . Final Project: Crimebusters . Crime safety quiz . Frontend code using HTML and JavaScript to fetch a quiz API from Spring backend. . PBL Notes . API . Using an API on Backend . Using an API on backend with Spring Boot, and displaying it in a frontend HTML file. Notes on Thymeleaf template engine syntax. . Spring Boot . How Spring Boot works . JavaScript . JavaScript . Misc . Applying arrays to change images . Using arrays and ImageIO to make an ASCII, grayscale, redscale, bluescale, and greenscale Mona Lisa art. . Creating a table with JavaScript . AP Curriculum . Test Prep . 2022 and 2016 FRQ . Unit 1: Primitive Types . Calculator . Homework and Notes . Unit 2: Using Objects . Homework (2021 FRQ) . Unit 3: Boolean Expressions and if Statements . Notes . Unit 4: Iteration . Notes . Homework . Unit 5: Writing Classes . Homework . Unit 6: Array . Homework (Work In Progress) . Unit 7: ArrayList . Notes . Unit 8: 2D Array . 2D Arrays with Monkey Song . Using 2D Arrays to print out the monkey song . code.org Notes . Notes .",
          "url": "https://lwu1822.github.io/fastpages/organization/APCSA",
          "relUrl": "/organization/APCSA",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "AP CSP . Project Based Learning (PBL) . Final Project: Dictionary . Feedback Page . Frontend code using HTML and JavaScript to fetch a feedback API from Spring backend. For people who use our dictionary project to leave some feedback. . Final Project Planning . Plan . APIs . JavaScript Fetch API . Using JavaScript Fetch API to take a definition of a word from a dictionary API. . Python API using Jupyter Notebook . Working with a Python API using Jupyter Notebook. . PBL Notes . JavaScript . Fetch API . JavaScript . Python . Dictionary . Input and Output . AP Curriculum . Create Performance . Planning . AppLab . Planning and project description . Big Idea 1: Creative Development . 1.1 Notes . 1.2 Notes . 1.3 Notes . Debugging Code . Learning how to debug code. . Big Idea 4: Computer Systems and Networks . 4.1 Notes .",
          "url": "https://lwu1822.github.io/fastpages/organization/APCSP",
          "relUrl": "/organization/APCSP",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "CSA",
          "content": "Sep 14, 2022 Iteration with 2D array . | Sep 14, 2022 AP CSA 2022 and 2016 FRQ . | Sep 7, 2022 If-Else Lesson . | Sep 5, 2022 Console Menu . | Aug 28, 2022 Java Primitives . | Aug 28, 2022 Code snippets . | Aug 28, 2022 code.org Notes . | Aug 28, 2022 code.org Answers . | Aug 26, 2022 Tools . | Aug 21, 2022 Jupyter notebook post . | .",
          "url": "https://lwu1822.github.io/fastpages/t/CSA",
          "relUrl": "/t/CSA",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "CSP",
          "content": "Submenu | JavaScript | JavaScript Table | API | .",
          "url": "https://lwu1822.github.io/fastpages/CSP/",
          "relUrl": "/CSP/",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "",
          "content": "Additional Coding . How I made my background a gradient . Jekyll and Liquid . My research and exploration of the Jekyll site generator and Liquid template language . Bash . LaTeX .",
          "url": "https://lwu1822.github.io/fastpages/organization/additionalCoding",
          "relUrl": "/organization/additionalCoding",
          "date": ""
      }
      
  

  

  
      ,"page14": {
          "title": "",
          "content": "Life . Career . Alumni Panel . Talks from Del Norte High School’s alumni about programming as a career. . Life . Psychology and the Good Life video . Thoughts from the Psychology and the Good Life video by Laurie Santos, Professor of Psychology at Yale .",
          "url": "https://lwu1822.github.io/fastpages/organization/life",
          "relUrl": "/organization/life",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page25": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lwu1822.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}