{
  
    
        "post0": {
            "title": "MC 4 Corrections",
            "content": "My score is 47/50. . . The question that I got wrong was #11. I chose B as the answer. It is wrong because newList is not sorted. Although list1 and list2 are sorted, once they are combined, the entries may not be in alphabetical order anymore. A is the correct answer because newList is being assigned to editing of the previous newList. I did not select this answer because I overlooked that newList was the argument in some of these procedures. . The second question that I got wrong was #20. I did not select statement III because I thought that when the question said to generate a list of criminal suspects, I thought that it meant the names of the suspects. The question is actually just looking for the phone numbers of possible suspects, which is why statement III is valid. . The third question that I got wrong was #37. I got this question wrong because I thought that number of steps was related to time complexity. It is actually related to space complexity, so since the space complexity is n^2, the time complexity would be more efficient. Therefore, the algorithm would “run in a reasonable amount of time”, so the correct answer is B. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/04/23/CSP-w28-mcTest4Correction.html",
            "relUrl": "/misc/2023/04/23/CSP-w28-mcTest4Correction.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: | Memory in GB: | Storage in GB: | OS: | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://lwu1822.github.io/fastpages/2023/04/05/CSP-w29-class-computersNetworks.html",
            "relUrl": "/2023/04/05/CSP-w29-class-computersNetworks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Sort Hacks",
            "content": "import java.util.Arrays; public class Bubble { public static void main(String[] args) { int[] data = {1, 9, 3, 2, 5}; int size = data.length; for (int i = 0; i &lt; size; i++) { for (int j = 0; j &lt; size - i - 1; j++) { int left = data[j]; int right = data[j+1]; if (right &lt; left) { int temp = left; data[j] = right; data[j+1] = temp; } } } for (int i = 0; i &lt; size; i++) { System.out.println(data[i]); } } } Bubble.main(null) . 1 2 3 5 9 . import java.util.Arrays; public class Selection { public static void main(String[] args) { int[] data = {1, 9, 3, 2, 5}; int size = data.length; for (int i = 0; i &lt; size; i++) { int min = data[i]; int index = i; for (int j = i + 1; j &lt; size; j++) { if (min &gt; data[j]) { min = data[j]; index = j; } } int temp = data[i]; data[i] = min; data[index] = temp; } for (int i = 0; i &lt; size; i++) { System.out.println(data[i]); } } } Selection.main(null) . 1 2 3 5 9 . import java.util.Arrays; public class Insertion { public static void main(String[] args) { int[] data = {1, 9, 3, 2, 5}; int size = data.length; for (int i = 1; i &lt; size; i++) { int index = 0; int num = 0; boolean swap = false; for (int j = i; j &gt; 0; j--) { num = data[i]; if (num &lt; data[j-1]) { index = j-1; swap = true; } } if (swap) { for (int k = i; k &gt; index; k--) { data[k] = data[k-1]; } data[index] = num; } } for (int i = 0; i &lt; size; i++) { System.out.println(data[i]); } } } Insertion.main(null) . 1 2 3 5 9 . public class Test{ public Test() { merge(0); } public void merge(int a) { if (a == 1) { return; } a++; merge(a); System.out.println(a); } public static void main(String[] args) { Test b = new Test(); } } Test.main(null) . 1 . import java.util.Arrays; public class Merge { public Merge() { } private static void mergeSort(int[] data) { int size = data.length; if (size &lt; 2) { return; } int midIndex = size / 2; int[] leftHalf = new int[midIndex]; int[] rightHalf = new int[size - midIndex]; for (int i = 0; i &lt; midIndex; i++) { leftHalf[i] = data[i]; } for (int i = midIndex; i &lt; size; i++) { rightHalf[i - midIndex] = data[i]; } mergeSort(leftHalf); mergeSort(rightHalf); merge(data, leftHalf, rightHalf); } private static void merge(int[] data, int[] leftHalf, int[] rightHalf) { int leftSize = leftHalf.length; int rightSize = rightHalf.length; int i = 0; int j = 0; int k = 0; while (i &lt; leftSize &amp;&amp; j &lt; rightSize) { if (leftHalf[i] &lt;= rightHalf[j]) { data[k] = leftHalf[i]; i++; } else { data[k] = rightHalf[j]; j++; } k++; } while (i &lt; leftSize) { data[k] = leftHalf[i]; i++; k++; } while (j &lt; leftSize) { data[k] = rightHalf[j]; j++; k++; } } public static void printArray(int[] data) { for (int i = 0; i &lt; data.length; i++) { System.out.println(data[i]); } } public static void main(String[] args) { int[] data = {1, 9, 3, 2, 5}; mergeSort(data); printArray(data); } } Merge.main(null) . 1 2 3 5 9 . public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList() { } public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { private String name = null; // name of queue private int count = 0; // number of objects in queue LinkedList&lt;T&gt; head = null, tail = null; /** Constructor * Queue constructor * Parameters to name queue and Data Objects */ /* public Queue(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } */ /** Queue Accessors / Getters * These gettrs return Queue Meta Data */ public String getName() {return this.name;} public int getCount() {return this.count;} /** Add an object * Parameter is a Data Object that is added to end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } this.count++; } /** Add a list of Objects * Paramter is a serise of Data Objects to be added to Queue * */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.add(data); } // printQueue(); } /** Delete Head Element * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial or empty condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } this.count--; } return data; } /** Peak at Head Data * Returns the data of head element * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** Get Head * Returns the head object * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** Get Tail * Returns the tail object * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** Implements Iterator * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** Print Queue * Prints which by usage validates iterable and getters * */ public void print() { System.out.print(this.getName() + &quot; &quot; + this.getCount() +&quot;: &quot;); for (Object obj: this) System.out.print(&quot;&quot; + obj + &quot; &quot;); System.out.println(); } public void printQueue() { for (Object obj: this){ System.out.print(&quot;&quot; + obj + &quot; &quot;); } System.out.println(); } public void test() { System.out.println(); /* int size = this.queueSize(); System.out.println(size); for (int i = 0; i &lt; size; i++) { for (int j = 0; j &lt; size - i - 1; j++) { } } */ /* for (Object obj: this){ System.out.print(&quot;&quot; + obj + &quot; &quot;); } System.out.println(); System.out.println(this.queueSize()); */ } // RETURN SIZE OF QUEUE public int queueSize(Queue&lt;T&gt; queue) { int size = 0; for (T data : queue) { size++; } return size; } public void test(LinkedList&lt;T&gt; test) { System.out.println(&quot;hi&quot;); } public Queue&lt;T&gt; bubble(Queue&lt;T&gt; queue) { LinkedList&lt;T&gt; head = queue.getHead(); int size = queueSize(queue); for (int i = 0; i &lt; size; i++) { for (int j = 0; j &lt; size - i - 1; j++) { T left = head.getData(); T right = head.getNext().getData(); System.out.println(&quot;left: &quot; + left); System.out.println(&quot;right: &quot; + right); } } return queue; } } . public class Test&lt;T&gt; extends Queue&lt;T&gt; { public int swap = 0; public int comparison = 0; public int getSwap() { return swap; } public int getComparison() { return comparison; } public Queue&lt;T&gt; bubble(Queue&lt;T&gt; queue) { LinkedList&lt;T&gt; head = queue.getHead(); int size = queueSize(queue); LinkedList&lt;T&gt; leftList = queue.getHead(); LinkedList&lt;T&gt; rightList = queue.getHead().getNext(); for (int i = 0; i &lt; size; i++) { leftList = queue.getHead(); rightList = queue.getHead().getNext(); for (int j = 0; j &lt; size - i - 1; j++) { comparison++; T left = leftList.getData(); T right = rightList.getData(); if (left.toString().compareTo(right.toString()) &gt; 0) { T temp = left; leftList.setData(right); leftList.getNext().setData(temp); swap++; } leftList = leftList.getNext(); rightList = leftList.getNext(); } } Queue&lt;T&gt; queueReturn = new Queue&lt;&gt;(); for (int i = 0; i &lt; size; i++) { queueReturn.add(leftList.getData()); leftList = leftList.getNext(); } return queueReturn; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail tail.setPrevNode(this.tail); this.tail = tail; // update tail } } public void addList(T[] lists) { for (T data : lists) { this.add(data); } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } /** * Changes the head * */ public void setHead(LinkedList&lt;T&gt; h) { this.head = h; } /** * Returns size of queue * * @return size of queue */ public int size() { int sz = 0; for (T e: this) { sz++; } return sz; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;count: &quot; + count + &quot;, data: &quot; + str; } } . class QueueTester { public static void main(String[] args) { Integer[] words = new Integer[] {1, 9, 3, 2, 5}; Queue&lt;Integer&gt; queue = new Queue&lt;&gt;(); queue.addList(words); Test test2 = new Test(); System.out.println(test2.bubble(queue)); test2.bubble(queue).printQueue(); } } QueueTester.main(null); . REPL.$JShell$16E$Queue@171e4fdd 1 2 3 5 9 . class QueueTester { public static void main(String[] args) { long start = System.nanoTime(); int rand = 0; Integer[] words = new Integer[5000]; for (int i = 0; i &lt; 5000; i++) { rand = (int)(Math.random() * 5001); words[i] = rand; } Queue&lt;Integer&gt; queue = new Queue&lt;&gt;(); queue.addList(words); Test test2 = new Test(); System.out.println(test2.bubble(queue)); test2.bubble(queue); long end = System.nanoTime(); long diff = end - start; System.out.println(&quot;time: &quot; + diff + &quot; nanoseconds&quot;); System.out.println(&quot;swaps: &quot; + test2.getSwap()); System.out.println(&quot;comparison: &quot; + test2.getComparison()); } } QueueTester.main(null); . REPL.$JShell$16E$Queue@480d27a8 time: 1358933252 nanoseconds swaps: 6191332 comparison: 24995000 . idk . /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { private String name = null; // name of queue private int count = 0; // number of objects in queue LinkedList&lt;T&gt; head = null, tail = null; /** Constructor * Queue constructor * Parameters to name queue and Data Objects */ public Queue(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** Queue Accessors / Getters * These gettrs return Queue Meta Data */ public String getName() {return this.name;} public int getCount() {return this.count;} /** Add an object * Parameter is a Data Object that is added to end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } this.count++; } /** Add a list of Objects * Paramter is a serise of Data Objects to be added to Queue * */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.add(data); } } /** Delete Head Element * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial or empty condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } this.count--; } return data; } /** Peak at Head Data * Returns the data of head element * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** Get Head * Returns the head object * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** Get Tail * Returns the tail object * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** Implements Iterator * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** Print Queue * Prints which by usage validates iterable and getters * */ public void print() { System.out.print(this.getName() + &quot; &quot; + this.getCount() +&quot;: &quot;); for (Object obj: this) System.out.print(&quot;&quot; + obj + &quot; &quot;); System.out.println(); } } .",
            "url": "https://lwu1822.github.io/fastpages/2023/04/04/CSA-w29-sort.html",
            "relUrl": "/2023/04/04/CSA-w29-sort.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "HasMaps and BigO",
            "content": "Data for HashMap and Hacks . Find a data source. To develop concepts use a few records. . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Collectable and defines abstract methods */ public class Animal extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* Getters * */ public String getName() { return this.name; } public int getAge() { return this.age; } public String getColor() { return this.color; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // convert to Coolection and sort in name order Animal.setOrder(KeyType.name); List&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(animals); Animal.setOrder(KeyType.title); for (Animal animal : animals) System.out.println(animal); } } Animal.main(null); . class [LREPL.$JShell$17$Animal; 6 Collectable: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 Animal: Cat, Black, 10 Animal: Dog, Brown, 14 Animal: Kitty, Calico, 1 Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 . HashMap . Below is an example using a HashMap and listed are some key things to consider when using this data structure. . Hashing:HashMap uses a hash function to map keys to their corresponding buckets. The hash function is used to compute the index of the array where the key-value pair should be stored. A good hash function should generate a unique hash code for each key, but collisions (i.e., two keys with the same hash code) can still occur. Hash map in Java does not maintain insertion order either by key or by the order inserted. | Performance: HashMap provides constant-time performance (O(1)) for get() and put() operations, as long as the hash function is well-distributed and there are no hash collisions. However, in the worst case, the performance of a HashMap can degrade to O(n), where n is the number of elements in the map. . | Key and value types: HashMap allows any non-null object as a key, and any object (including null) as a value. However, to use a class as a key, it must implement the equals() and hashCode() methods. HashMap uses the equals() method to check if two keys are equal, and the hashCode() method to generate the hash code for the key. . | Iteration: HashMap provides several ways to iterate over the key-value pairs in the map, including using keySet(), values(), and entrySet(). The entrySet() method returns a Set view of the key-value pairs in the map, which can be used to iterate over the pairs and modify the map as you go. . | Thread safety: HashMap is not thread-safe, which means that if multiple threads access the same HashMap instance concurrently and at least one thread modifies the map structurally, the behavior is undefined. To make a HashMap thread-safe, you can use the ConcurrentHashMap class instead, which provides concurrent access and is designed for high concurrency. In a Full Stack project it would be best to use a NoSQL database to avoid concurrency issues. . | import java.util.HashMap; public class Pets { // create a new HashMap HashMap&lt;String, Animal&gt; names = new HashMap&lt;&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap names.put(&quot;Leo&quot;, new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;)); names.put(&quot;Porky&quot;, new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;)); names.put(&quot;Ro-Ro&quot;, new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;)); names.put(&quot;Midnight&quot;, new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;)); names.put(&quot;Hobbes&quot;, new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;)); names.put(&quot;Duke&quot;, new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;)); } /* Remove Pet * */ public Animal remove(String key) { // check if a key exists in the HashMap then remove Animal animal = null; if (names.containsKey(key)) { animal = names.get(key); names.remove(key); } return animal; } /* Print Pets * */ public void print() { // iterate over the keys in the HashMap for (String name: names.keySet()) { Animal obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getColor() + &quot; &quot; + obj.getName() + &quot; and is &quot; + obj.getAge() + &quot; years old.&quot;); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); pets.print(); // remove Pet String key = &quot;Hobbes&quot;; Animal animal = pets.remove(&quot;Hobbes&quot;); if (animal == null) { System.out.println( key + &quot; not found&quot;); } else { System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + animal); } pets.print(); } } Pets.main(null); . Hobbes is a Calico Kitty and is 1 years old. Leo is a Gold Lion and is 8 years old. Porky is a Pink Pig and is 3 years old. Ro-Ro is a Red Robin and is 7 years old. Duke is a Brown Dog and is 14 years old. Midnight is a Black Cat and is 10 years old. Removed: Hobbes, Animal: Kitty, Calico, 1 Leo is a Gold Lion and is 8 years old. Porky is a Pink Pig and is 3 years old. Ro-Ro is a Red Robin and is 7 years old. Duke is a Brown Dog and is 14 years old. Midnight is a Black Cat and is 10 years old. . Below is an example using a java.util.Set and listed are some key things to consider when using this data structure. A Set works similarly to a key in a HashMap, a Set is just the Key. . No duplicates:A Set does not allow duplicate elements. If you try to add an element that already exists in the Set, the add() method will return false and the Set will not be modified. Duplicate add is shown in example. | Unordered: A Set does not maintain the insertion order of elements. The order of elements in a Set may change as elements are added or removed. . | Equality: Two Sets are considered equal if they have the same elements, regardless of their order. The equals() method is used to test for Set equality. . | Implementation classes: Java provides several implementation classes for the Set interface, including HashSet, LinkedHashSet, and TreeSet. Each implementation has different performance characteristics and is optimized for different use cases. . | Iterator: The iterator() method can be used to iterate over the elements in a Set. The order in which elements are returned by the iterator is not defined and may change over time as elements are added or removed from the Set. The forEach() method is another way to iterate over the elements in a Set, and it allows you to pass a lambda expression to process each element in the Set. Lambda expression is shown in example. . | import java.util.HashSet; import java.util.Set; public class AnimalSet { public static void main(String[] args) { // create a new HashSet Set&lt;String&gt; animals = new HashSet&lt;&gt;(); // add some elements to the Set animals.add(&quot;lion&quot;); animals.add(&quot;dog&quot;); animals.add(&quot;cat&quot;); // print out the Set System.out.println(animals); // check if an element is in the Set boolean hasLion = animals.contains(&quot;lion&quot;); System.out.println(&quot;Has lion: &quot; + hasLion); // remove an element from the Set animals.remove(&quot;lion&quot;); System.out.println(&quot;Removed lion&quot;); // print out the Set System.out.println(animals); // add duplicate System.out.println(&quot;add duplicate dog&quot;); animals.add(&quot;dog&quot;); // no action System.out.println(animals); // add duplicate System.out.println(&quot;add pig&quot;); animals.add(&quot;pig&quot;); System.out.println(animals); // using forEach() method with a lambda expression animals.forEach(animal -&gt; { String message = &quot;I &quot;; //ternary operator message += animal.equals(&quot;dog&quot;) ? &quot;like&quot; : &quot;don&#39;t like&quot;; message += &quot; &quot; + animal + &quot;s &quot; + &quot;for pets&quot;; System.out.println(message); }); } } AnimalSet.main(null); . [cat, dog, lion] Has lion: true Removed lion [cat, dog] add duplicate dog [cat, dog] add pig [cat, dog, pig] I don&#39;t like cats for pets I like dogs for pets I don&#39;t like pigs for pets . Hacks . Analyze the Big O complexity on Sorts. . Establish analytics including:time to sort, number of comparisons and number of swaps.- Average the results for each each Sort, run each at least 12 times and 5000 elements. You should throw out High and Low when doing analysis. | Make your final/judgement on best sort: Number of Comparisons, Number of Swaps, Big O complexity, and Total Time. | . Build your own Hashmap. Make a HashMap to correspond to a Data Structure using a Collection. . Be sure to have 5000 records | Perform analysis on Binary Search vs HashMap Lookup, try using random to search and find 100 keys in 5000 records. Perform 12 times and throw out high and low. | . Extra, Practical learning . Performing Iteration, Delete, and Add operations are another way to analyze Collection vs HashMap data structure. | A HashMap and a Collection can be used in a Class, POJO and API. | Make a Diagram on the Pros and Cons of Collection vs HashMap | . /* * Animal class extends Collectable and defines abstract methods */ public class ClassRating extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { ClassRating.key = key; } public enum KeyType implements KeyTypes {title, classname, rating} // Instance data private final String classname; private final int rating; /* constructor * */ public ClassRating(String classname, int rating) { super.setType(&quot;ClassRating&quot;); this.classname = classname; this.rating = rating; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return ClassRating.key; } /* Getters * */ public String getClassname() { return this.classname; } public int getRating() { return this.rating; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.classname.equals(this.getKey())) { output += this.classname; } else if (KeyType.rating.equals(this.getKey())) { output += &quot;00&quot; + this.rating; output = output.substring(output.length() - 2); } else { output += super.getType() + &quot;: &quot; + this.classname + &quot;, &quot; + this.rating; } return output; } // Test data initializer public static ClassRating[] classes() { return new ClassRating[]{ new ClassRating(&quot;AP CSA&quot;, 4), new ClassRating(&quot;AP Stats&quot;, 3), new ClassRating(&quot;AP US History&quot;, 4) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy ClassRating[] objs = classes(); // print with title ClassRating.setOrder(KeyType.title); ClassRating.print(objs); // convert to Coolection and sort in name order ClassRating.setOrder(KeyType.classname); List&lt;ClassRating&gt; classes = new ArrayList&lt;ClassRating&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(classes); ClassRating.setOrder(KeyType.title); for (ClassRating classLoop : classes) System.out.println(classLoop); } } ClassRating.main(null); . class [LREPL.$JShell$15B$ClassRating; 3 Collectable: ClassRating listed by title ClassRating: AP CSA, 4 ClassRating: AP Stats, 3 ClassRating: AP US History, 4 ClassRating: AP CSA, 4 ClassRating: AP Stats, 3 ClassRating: AP US History, 4 . import java.util.HashMap; public class Reviews { // create a new HashMap HashMap&lt;Integer, ClassRating&gt; names = new HashMap&lt;&gt;(); /* Add Pets * */ public Reviews() { // add some key-value pairs to the HashMap for (int i = 0; i &lt; 5000; i++) { names.put(i, new ClassRating(&quot;AP CSA&quot;, 5)); } } /* Remove Pet * */ public ClassRating remove(String key) { // check if a key exists in the HashMap then remove ClassRating classReview = null; if (names.containsKey(key)) { classReview = names.get(key); names.remove(key); } return classReview; } /* Print Pets * */ public void print() { // iterate over the keys in the HashMap for (Integer name: names.keySet()) { ClassRating obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getClassname() + &quot; &quot; + obj.getRating()); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Reviews cr = new Reviews(); cr.print(); // // remove Pet // String key = &quot;Hobbes&quot;; // Animal animal = pets.remove(&quot;Hobbes&quot;); // if (animal == null) { // System.out.println( key + &quot; not found&quot;); // } else { // System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + animal); // } // pets.print(); } } Reviews.main(null); . 0 is a AP CSA 5 1 is a AP CSA 5 2 is a AP CSA 5 3 is a AP CSA 5 4 is a AP CSA 5 5 is a AP CSA 5 6 is a AP CSA 5 7 is a AP CSA 5 8 is a AP CSA 5 9 is a AP CSA 5 10 is a AP CSA 5 11 is a AP CSA 5 12 is a AP CSA 5 13 is a AP CSA 5 14 is a AP CSA 5 15 is a AP CSA 5 16 is a AP CSA 5 17 is a AP CSA 5 18 is a AP CSA 5 19 is a AP CSA 5 20 is a AP CSA 5 21 is a AP CSA 5 22 is a AP CSA 5 23 is a AP CSA 5 24 is a AP CSA 5 25 is a AP CSA 5 26 is a AP CSA 5 27 is a AP CSA 5 28 is a AP CSA 5 29 is a AP CSA 5 30 is a AP CSA 5 31 is a AP CSA 5 32 is a AP CSA 5 33 is a AP CSA 5 34 is a AP CSA 5 35 is a AP CSA 5 36 is a AP CSA 5 37 is a AP CSA 5 38 is a AP CSA 5 39 is a AP CSA 5 40 is a AP CSA 5 41 is a AP CSA 5 42 is a AP CSA 5 43 is a AP CSA 5 44 is a AP CSA 5 45 is a AP CSA 5 46 is a AP CSA 5 47 is a AP CSA 5 48 is a AP CSA 5 49 is a AP CSA 5 50 is a AP CSA 5 51 is a AP CSA 5 52 is a AP CSA 5 53 is a AP CSA 5 54 is a AP CSA 5 55 is a AP CSA 5 56 is a AP CSA 5 57 is a AP CSA 5 58 is a AP CSA 5 59 is a AP CSA 5 60 is a AP CSA 5 61 is a AP CSA 5 62 is a AP CSA 5 63 is a AP CSA 5 64 is a AP CSA 5 65 is a AP CSA 5 66 is a AP CSA 5 67 is a AP CSA 5 68 is a AP CSA 5 69 is a AP CSA 5 70 is a AP CSA 5 71 is a AP CSA 5 72 is a AP CSA 5 73 is a AP CSA 5 74 is a AP CSA 5 75 is a AP CSA 5 76 is a AP CSA 5 77 is a AP CSA 5 78 is a AP CSA 5 79 is a AP CSA 5 80 is a AP CSA 5 81 is a AP CSA 5 82 is a AP CSA 5 83 is a AP CSA 5 84 is a AP CSA 5 85 is a AP CSA 5 86 is a AP CSA 5 87 is a AP CSA 5 88 is a AP CSA 5 89 is a AP CSA 5 90 is a AP CSA 5 91 is a AP CSA 5 92 is a AP CSA 5 93 is a AP CSA 5 94 is a AP CSA 5 95 is a AP CSA 5 96 is a AP CSA 5 97 is a AP CSA 5 98 is a AP CSA 5 99 is a AP CSA 5 100 is a AP CSA 5 101 is a AP CSA 5 102 is a AP CSA 5 103 is a AP CSA 5 104 is a AP CSA 5 105 is a AP CSA 5 106 is a AP CSA 5 107 is a AP CSA 5 108 is a AP CSA 5 109 is a AP CSA 5 110 is a AP CSA 5 111 is a AP CSA 5 112 is a AP CSA 5 113 is a AP CSA 5 114 is a AP CSA 5 115 is a AP CSA 5 116 is a AP CSA 5 117 is a AP CSA 5 118 is a AP CSA 5 119 is a AP CSA 5 120 is a AP CSA 5 121 is a AP CSA 5 122 is a AP CSA 5 123 is a AP CSA 5 124 is a AP CSA 5 125 is a AP CSA 5 126 is a AP CSA 5 127 is a AP CSA 5 128 is a AP CSA 5 129 is a AP CSA 5 130 is a AP CSA 5 131 is a AP CSA 5 132 is a AP CSA 5 133 is a AP CSA 5 134 is a AP CSA 5 135 is a AP CSA 5 136 is a AP CSA 5 137 is a AP CSA 5 138 is a AP CSA 5 139 is a AP CSA 5 140 is a AP CSA 5 141 is a AP CSA 5 142 is a AP CSA 5 143 is a AP CSA 5 144 is a AP CSA 5 145 is a AP CSA 5 146 is a AP CSA 5 147 is a AP CSA 5 148 is a AP CSA 5 149 is a AP CSA 5 150 is a AP CSA 5 151 is a AP CSA 5 152 is a AP CSA 5 153 is a AP CSA 5 154 is a AP CSA 5 155 is a AP CSA 5 156 is a AP CSA 5 157 is a AP CSA 5 158 is a AP CSA 5 159 is a AP CSA 5 160 is a AP CSA 5 161 is a AP CSA 5 162 is a AP CSA 5 163 is a AP CSA 5 164 is a AP CSA 5 165 is a AP CSA 5 166 is a AP CSA 5 167 is a AP CSA 5 168 is a AP CSA 5 169 is a AP CSA 5 170 is a AP CSA 5 171 is a AP CSA 5 172 is a AP CSA 5 173 is a AP CSA 5 174 is a AP CSA 5 175 is a AP CSA 5 176 is a AP CSA 5 177 is a AP CSA 5 178 is a AP CSA 5 179 is a AP CSA 5 180 is a AP CSA 5 181 is a AP CSA 5 182 is a AP CSA 5 183 is a AP CSA 5 184 is a AP CSA 5 185 is a AP CSA 5 186 is a AP CSA 5 187 is a AP CSA 5 188 is a AP CSA 5 189 is a AP CSA 5 190 is a AP CSA 5 191 is a AP CSA 5 192 is a AP CSA 5 193 is a AP CSA 5 194 is a AP CSA 5 195 is a AP CSA 5 196 is a AP CSA 5 197 is a AP CSA 5 198 is a AP CSA 5 199 is a AP CSA 5 200 is a AP CSA 5 201 is a AP CSA 5 202 is a AP CSA 5 203 is a AP CSA 5 204 is a AP CSA 5 205 is a AP CSA 5 206 is a AP CSA 5 207 is a AP CSA 5 208 is a AP CSA 5 209 is a AP CSA 5 210 is a AP CSA 5 211 is a AP CSA 5 212 is a AP CSA 5 213 is a AP CSA 5 214 is a AP CSA 5 215 is a AP CSA 5 216 is a AP CSA 5 217 is a AP CSA 5 218 is a AP CSA 5 219 is a AP CSA 5 220 is a AP CSA 5 221 is a AP CSA 5 222 is a AP CSA 5 223 is a AP CSA 5 224 is a AP CSA 5 225 is a AP CSA 5 226 is a AP CSA 5 227 is a AP CSA 5 228 is a AP CSA 5 229 is a AP CSA 5 230 is a AP CSA 5 231 is a AP CSA 5 232 is a AP CSA 5 233 is a AP CSA 5 234 is a AP CSA 5 235 is a AP CSA 5 236 is a AP CSA 5 237 is a AP CSA 5 238 is a AP CSA 5 239 is a AP CSA 5 240 is a AP CSA 5 241 is a AP CSA 5 242 is a AP CSA 5 243 is a AP CSA 5 244 is a AP CSA 5 245 is a AP CSA 5 246 is a AP CSA 5 247 is a AP CSA 5 248 is a AP CSA 5 249 is a AP CSA 5 250 is a AP CSA 5 251 is a AP CSA 5 252 is a AP CSA 5 253 is a AP CSA 5 254 is a AP CSA 5 255 is a AP CSA 5 256 is a AP CSA 5 257 is a AP CSA 5 258 is a AP CSA 5 259 is a AP CSA 5 260 is a AP CSA 5 261 is a AP CSA 5 262 is a AP CSA 5 263 is a AP CSA 5 264 is a AP CSA 5 265 is a AP CSA 5 266 is a AP CSA 5 267 is a AP CSA 5 268 is a AP CSA 5 269 is a AP CSA 5 270 is a AP CSA 5 271 is a AP CSA 5 272 is a AP CSA 5 273 is a AP CSA 5 274 is a AP CSA 5 275 is a AP CSA 5 276 is a AP CSA 5 277 is a AP CSA 5 278 is a AP CSA 5 279 is a AP CSA 5 280 is a AP CSA 5 281 is a AP CSA 5 282 is a AP CSA 5 283 is a AP CSA 5 284 is a AP CSA 5 285 is a AP CSA 5 286 is a AP CSA 5 287 is a AP CSA 5 288 is a AP CSA 5 289 is a AP CSA 5 290 is a AP CSA 5 291 is a AP CSA 5 292 is a AP CSA 5 293 is a AP CSA 5 294 is a AP CSA 5 295 is a AP CSA 5 296 is a AP CSA 5 297 is a AP CSA 5 298 is a AP CSA 5 299 is a AP CSA 5 300 is a AP CSA 5 301 is a AP CSA 5 302 is a AP CSA 5 303 is a AP CSA 5 304 is a AP CSA 5 305 is a AP CSA 5 306 is a AP CSA 5 307 is a AP CSA 5 308 is a AP CSA 5 309 is a AP CSA 5 310 is a AP CSA 5 311 is a AP CSA 5 312 is a AP CSA 5 313 is a AP CSA 5 314 is a AP CSA 5 315 is a AP CSA 5 316 is a AP CSA 5 317 is a AP CSA 5 318 is a AP CSA 5 319 is a AP CSA 5 320 is a AP CSA 5 321 is a AP CSA 5 322 is a AP CSA 5 323 is a AP CSA 5 324 is a AP CSA 5 325 is a AP CSA 5 326 is a AP CSA 5 327 is a AP CSA 5 328 is a AP CSA 5 329 is a AP CSA 5 330 is a AP CSA 5 331 is a AP CSA 5 332 is a AP CSA 5 333 is a AP CSA 5 334 is a AP CSA 5 335 is a AP CSA 5 336 is a AP CSA 5 337 is a AP CSA 5 338 is a AP CSA 5 339 is a AP CSA 5 340 is a AP CSA 5 341 is a AP CSA 5 342 is a AP CSA 5 343 is a AP CSA 5 344 is a AP CSA 5 345 is a AP CSA 5 346 is a AP CSA 5 347 is a AP CSA 5 348 is a AP CSA 5 349 is a AP CSA 5 350 is a AP CSA 5 351 is a AP CSA 5 352 is a AP CSA 5 353 is a AP CSA 5 354 is a AP CSA 5 355 is a AP CSA 5 356 is a AP CSA 5 357 is a AP CSA 5 358 is a AP CSA 5 359 is a AP CSA 5 360 is a AP CSA 5 361 is a AP CSA 5 362 is a AP CSA 5 363 is a AP CSA 5 364 is a AP CSA 5 365 is a AP CSA 5 366 is a AP CSA 5 367 is a AP CSA 5 368 is a AP CSA 5 369 is a AP CSA 5 370 is a AP CSA 5 371 is a AP CSA 5 372 is a AP CSA 5 373 is a AP CSA 5 374 is a AP CSA 5 375 is a AP CSA 5 376 is a AP CSA 5 377 is a AP CSA 5 378 is a AP CSA 5 379 is a AP CSA 5 380 is a AP CSA 5 381 is a AP CSA 5 382 is a AP CSA 5 383 is a AP CSA 5 384 is a AP CSA 5 385 is a AP CSA 5 386 is a AP CSA 5 387 is a AP CSA 5 388 is a AP CSA 5 389 is a AP CSA 5 390 is a AP CSA 5 391 is a AP CSA 5 392 is a AP CSA 5 393 is a AP CSA 5 394 is a AP CSA 5 395 is a AP CSA 5 396 is a AP CSA 5 397 is a AP CSA 5 398 is a AP CSA 5 399 is a AP CSA 5 400 is a AP CSA 5 401 is a AP CSA 5 402 is a AP CSA 5 403 is a AP CSA 5 404 is a AP CSA 5 405 is a AP CSA 5 406 is a AP CSA 5 407 is a AP CSA 5 408 is a AP CSA 5 409 is a AP CSA 5 410 is a AP CSA 5 411 is a AP CSA 5 412 is a AP CSA 5 413 is a AP CSA 5 414 is a AP CSA 5 415 is a AP CSA 5 416 is a AP CSA 5 417 is a AP CSA 5 418 is a AP CSA 5 419 is a AP CSA 5 420 is a AP CSA 5 421 is a AP CSA 5 422 is a AP CSA 5 423 is a AP CSA 5 424 is a AP CSA 5 425 is a AP CSA 5 426 is a AP CSA 5 427 is a AP CSA 5 428 is a AP CSA 5 429 is a AP CSA 5 430 is a AP CSA 5 431 is a AP CSA 5 432 is a AP CSA 5 433 is a AP CSA 5 434 is a AP CSA 5 435 is a AP CSA 5 436 is a AP CSA 5 437 is a AP CSA 5 438 is a AP CSA 5 439 is a AP CSA 5 440 is a AP CSA 5 441 is a AP CSA 5 442 is a AP CSA 5 443 is a AP CSA 5 444 is a AP CSA 5 445 is a AP CSA 5 446 is a AP CSA 5 447 is a AP CSA 5 448 is a AP CSA 5 449 is a AP CSA 5 450 is a AP CSA 5 451 is a AP CSA 5 452 is a AP CSA 5 453 is a AP CSA 5 454 is a AP CSA 5 455 is a AP CSA 5 456 is a AP CSA 5 457 is a AP CSA 5 458 is a AP CSA 5 459 is a AP CSA 5 460 is a AP CSA 5 461 is a AP CSA 5 462 is a AP CSA 5 463 is a AP CSA 5 464 is a AP CSA 5 465 is a AP CSA 5 466 is a AP CSA 5 467 is a AP CSA 5 468 is a AP CSA 5 469 is a AP CSA 5 470 is a AP CSA 5 471 is a AP CSA 5 472 is a AP CSA 5 473 is a AP CSA 5 474 is a AP CSA 5 475 is a AP CSA 5 476 is a AP CSA 5 477 is a AP CSA 5 478 is a AP CSA 5 479 is a AP CSA 5 480 is a AP CSA 5 481 is a AP CSA 5 482 is a AP CSA 5 483 is a AP CSA 5 484 is a AP CSA 5 485 is a AP CSA 5 486 is a AP CSA 5 487 is a AP CSA 5 488 is a AP CSA 5 489 is a AP CSA 5 490 is a AP CSA 5 491 is a AP CSA 5 492 is a AP CSA 5 493 is a AP CSA 5 494 is a AP CSA 5 495 is a AP CSA 5 496 is a AP CSA 5 497 is a AP CSA 5 498 is a AP CSA 5 499 is a AP CSA 5 500 is a AP CSA 5 501 is a AP CSA 5 502 is a AP CSA 5 503 is a AP CSA 5 504 is a AP CSA 5 505 is a AP CSA 5 506 is a AP CSA 5 507 is a AP CSA 5 508 is a AP CSA 5 509 is a AP CSA 5 510 is a AP CSA 5 511 is a AP CSA 5 512 is a AP CSA 5 513 is a AP CSA 5 514 is a AP CSA 5 515 is a AP CSA 5 516 is a AP CSA 5 517 is a AP CSA 5 518 is a AP CSA 5 519 is a AP CSA 5 520 is a AP CSA 5 521 is a AP CSA 5 522 is a AP CSA 5 523 is a AP CSA 5 524 is a AP CSA 5 525 is a AP CSA 5 526 is a AP CSA 5 527 is a AP CSA 5 528 is a AP CSA 5 529 is a AP CSA 5 530 is a AP CSA 5 531 is a AP CSA 5 532 is a AP CSA 5 533 is a AP CSA 5 534 is a AP CSA 5 535 is a AP CSA 5 536 is a AP CSA 5 537 is a AP CSA 5 538 is a AP CSA 5 539 is a AP CSA 5 540 is a AP CSA 5 541 is a AP CSA 5 542 is a AP CSA 5 543 is a AP CSA 5 544 is a AP CSA 5 545 is a AP CSA 5 546 is a AP CSA 5 547 is a AP CSA 5 548 is a AP CSA 5 549 is a AP CSA 5 550 is a AP CSA 5 551 is a AP CSA 5 552 is a AP CSA 5 553 is a AP CSA 5 554 is a AP CSA 5 555 is a AP CSA 5 556 is a AP CSA 5 557 is a AP CSA 5 558 is a AP CSA 5 559 is a AP CSA 5 560 is a AP CSA 5 561 is a AP CSA 5 562 is a AP CSA 5 563 is a AP CSA 5 564 is a AP CSA 5 565 is a AP CSA 5 566 is a AP CSA 5 567 is a AP CSA 5 568 is a AP CSA 5 569 is a AP CSA 5 570 is a AP CSA 5 571 is a AP CSA 5 572 is a AP CSA 5 573 is a AP CSA 5 574 is a AP CSA 5 575 is a AP CSA 5 576 is a AP CSA 5 577 is a AP CSA 5 578 is a AP CSA 5 579 is a AP CSA 5 580 is a AP CSA 5 581 is a AP CSA 5 582 is a AP CSA 5 583 is a AP CSA 5 584 is a AP CSA 5 585 is a AP CSA 5 586 is a AP CSA 5 587 is a AP CSA 5 588 is a AP CSA 5 589 is a AP CSA 5 590 is a AP CSA 5 591 is a AP CSA 5 592 is a AP CSA 5 593 is a AP CSA 5 594 is a AP CSA 5 595 is a AP CSA 5 596 is a AP CSA 5 597 is a AP CSA 5 598 is a AP CSA 5 599 is a AP CSA 5 600 is a AP CSA 5 601 is a AP CSA 5 602 is a AP CSA 5 603 is a AP CSA 5 604 is a AP CSA 5 605 is a AP CSA 5 606 is a AP CSA 5 607 is a AP CSA 5 608 is a AP CSA 5 609 is a AP CSA 5 610 is a AP CSA 5 611 is a AP CSA 5 612 is a AP CSA 5 613 is a AP CSA 5 614 is a AP CSA 5 615 is a AP CSA 5 616 is a AP CSA 5 617 is a AP CSA 5 618 is a AP CSA 5 619 is a AP CSA 5 620 is a AP CSA 5 621 is a AP CSA 5 622 is a AP CSA 5 623 is a AP CSA 5 624 is a AP CSA 5 625 is a AP CSA 5 626 is a AP CSA 5 627 is a AP CSA 5 628 is a AP CSA 5 629 is a AP CSA 5 630 is a AP CSA 5 631 is a AP CSA 5 632 is a AP CSA 5 633 is a AP CSA 5 634 is a AP CSA 5 635 is a AP CSA 5 636 is a AP CSA 5 637 is a AP CSA 5 638 is a AP CSA 5 639 is a AP CSA 5 640 is a AP CSA 5 641 is a AP CSA 5 642 is a AP CSA 5 643 is a AP CSA 5 644 is a AP CSA 5 645 is a AP CSA 5 646 is a AP CSA 5 647 is a AP CSA 5 648 is a AP CSA 5 649 is a AP CSA 5 650 is a AP CSA 5 651 is a AP CSA 5 652 is a AP CSA 5 653 is a AP CSA 5 654 is a AP CSA 5 655 is a AP CSA 5 656 is a AP CSA 5 657 is a AP CSA 5 658 is a AP CSA 5 659 is a AP CSA 5 660 is a AP CSA 5 661 is a AP CSA 5 662 is a AP CSA 5 663 is a AP CSA 5 664 is a AP CSA 5 665 is a AP CSA 5 666 is a AP CSA 5 667 is a AP CSA 5 668 is a AP CSA 5 669 is a AP CSA 5 670 is a AP CSA 5 671 is a AP CSA 5 672 is a AP CSA 5 673 is a AP CSA 5 674 is a AP CSA 5 675 is a AP CSA 5 676 is a AP CSA 5 677 is a AP CSA 5 678 is a AP CSA 5 679 is a AP CSA 5 680 is a AP CSA 5 681 is a AP CSA 5 682 is a AP CSA 5 683 is a AP CSA 5 684 is a AP CSA 5 685 is a AP CSA 5 686 is a AP CSA 5 687 is a AP CSA 5 688 is a AP CSA 5 689 is a AP CSA 5 690 is a AP CSA 5 691 is a AP CSA 5 692 is a AP CSA 5 693 is a AP CSA 5 694 is a AP CSA 5 695 is a AP CSA 5 696 is a AP CSA 5 697 is a AP CSA 5 698 is a AP CSA 5 699 is a AP CSA 5 700 is a AP CSA 5 701 is a AP CSA 5 702 is a AP CSA 5 703 is a AP CSA 5 704 is a AP CSA 5 705 is a AP CSA 5 706 is a AP CSA 5 707 is a AP CSA 5 708 is a AP CSA 5 709 is a AP CSA 5 710 is a AP CSA 5 711 is a AP CSA 5 712 is a AP CSA 5 713 is a AP CSA 5 714 is a AP CSA 5 715 is a AP CSA 5 716 is a AP CSA 5 717 is a AP CSA 5 718 is a AP CSA 5 719 is a AP CSA 5 720 is a AP CSA 5 721 is a AP CSA 5 722 is a AP CSA 5 723 is a AP CSA 5 724 is a AP CSA 5 725 is a AP CSA 5 726 is a AP CSA 5 727 is a AP CSA 5 728 is a AP CSA 5 729 is a AP CSA 5 730 is a AP CSA 5 731 is a AP CSA 5 732 is a AP CSA 5 733 is a AP CSA 5 734 is a AP CSA 5 735 is a AP CSA 5 736 is a AP CSA 5 737 is a AP CSA 5 738 is a AP CSA 5 739 is a AP CSA 5 740 is a AP CSA 5 741 is a AP CSA 5 742 is a AP CSA 5 743 is a AP CSA 5 744 is a AP CSA 5 745 is a AP CSA 5 746 is a AP CSA 5 747 is a AP CSA 5 748 is a AP CSA 5 749 is a AP CSA 5 750 is a AP CSA 5 751 is a AP CSA 5 752 is a AP CSA 5 753 is a AP CSA 5 754 is a AP CSA 5 755 is a AP CSA 5 756 is a AP CSA 5 757 is a AP CSA 5 758 is a AP CSA 5 759 is a AP CSA 5 760 is a AP CSA 5 761 is a AP CSA 5 762 is a AP CSA 5 763 is a AP CSA 5 764 is a AP CSA 5 765 is a AP CSA 5 766 is a AP CSA 5 767 is a AP CSA 5 768 is a AP CSA 5 769 is a AP CSA 5 770 is a AP CSA 5 771 is a AP CSA 5 772 is a AP CSA 5 773 is a AP CSA 5 774 is a AP CSA 5 775 is a AP CSA 5 776 is a AP CSA 5 777 is a AP CSA 5 778 is a AP CSA 5 779 is a AP CSA 5 780 is a AP CSA 5 781 is a AP CSA 5 782 is a AP CSA 5 783 is a AP CSA 5 784 is a AP CSA 5 785 is a AP CSA 5 786 is a AP CSA 5 787 is a AP CSA 5 788 is a AP CSA 5 789 is a AP CSA 5 790 is a AP CSA 5 791 is a AP CSA 5 792 is a AP CSA 5 793 is a AP CSA 5 794 is a AP CSA 5 795 is a AP CSA 5 796 is a AP CSA 5 797 is a AP CSA 5 798 is a AP CSA 5 799 is a AP CSA 5 800 is a AP CSA 5 801 is a AP CSA 5 802 is a AP CSA 5 803 is a AP CSA 5 804 is a AP CSA 5 805 is a AP CSA 5 806 is a AP CSA 5 807 is a AP CSA 5 808 is a AP CSA 5 809 is a AP CSA 5 810 is a AP CSA 5 811 is a AP CSA 5 812 is a AP CSA 5 813 is a AP CSA 5 814 is a AP CSA 5 815 is a AP CSA 5 816 is a AP CSA 5 817 is a AP CSA 5 818 is a AP CSA 5 819 is a AP CSA 5 820 is a AP CSA 5 821 is a AP CSA 5 822 is a AP CSA 5 823 is a AP CSA 5 824 is a AP CSA 5 825 is a AP CSA 5 826 is a AP CSA 5 827 is a AP CSA 5 828 is a AP CSA 5 829 is a AP CSA 5 830 is a AP CSA 5 831 is a AP CSA 5 832 is a AP CSA 5 833 is a AP CSA 5 834 is a AP CSA 5 835 is a AP CSA 5 836 is a AP CSA 5 837 is a AP CSA 5 838 is a AP CSA 5 839 is a AP CSA 5 840 is a AP CSA 5 841 is a AP CSA 5 842 is a AP CSA 5 843 is a AP CSA 5 844 is a AP CSA 5 845 is a AP CSA 5 846 is a AP CSA 5 847 is a AP CSA 5 848 is a AP CSA 5 849 is a AP CSA 5 850 is a AP CSA 5 851 is a AP CSA 5 852 is a AP CSA 5 853 is a AP CSA 5 854 is a AP CSA 5 855 is a AP CSA 5 856 is a AP CSA 5 857 is a AP CSA 5 858 is a AP CSA 5 859 is a AP CSA 5 860 is a AP CSA 5 861 is a AP CSA 5 862 is a AP CSA 5 863 is a AP CSA 5 864 is a AP CSA 5 865 is a AP CSA 5 866 is a AP CSA 5 867 is a AP CSA 5 868 is a AP CSA 5 869 is a AP CSA 5 870 is a AP CSA 5 871 is a AP CSA 5 872 is a AP CSA 5 873 is a AP CSA 5 874 is a AP CSA 5 875 is a AP CSA 5 876 is a AP CSA 5 877 is a AP CSA 5 878 is a AP CSA 5 879 is a AP CSA 5 880 is a AP CSA 5 881 is a AP CSA 5 882 is a AP CSA 5 883 is a AP CSA 5 884 is a AP CSA 5 885 is a AP CSA 5 886 is a AP CSA 5 887 is a AP CSA 5 888 is a AP CSA 5 889 is a AP CSA 5 890 is a AP CSA 5 891 is a AP CSA 5 892 is a AP CSA 5 893 is a AP CSA 5 894 is a AP CSA 5 895 is a AP CSA 5 896 is a AP CSA 5 897 is a AP CSA 5 898 is a AP CSA 5 899 is a AP CSA 5 900 is a AP CSA 5 901 is a AP CSA 5 902 is a AP CSA 5 903 is a AP CSA 5 904 is a AP CSA 5 905 is a AP CSA 5 906 is a AP CSA 5 907 is a AP CSA 5 908 is a AP CSA 5 909 is a AP CSA 5 910 is a AP CSA 5 911 is a AP CSA 5 912 is a AP CSA 5 913 is a AP CSA 5 914 is a AP CSA 5 915 is a AP CSA 5 916 is a AP CSA 5 917 is a AP CSA 5 918 is a AP CSA 5 919 is a AP CSA 5 920 is a AP CSA 5 921 is a AP CSA 5 922 is a AP CSA 5 923 is a AP CSA 5 924 is a AP CSA 5 925 is a AP CSA 5 926 is a AP CSA 5 927 is a AP CSA 5 928 is a AP CSA 5 929 is a AP CSA 5 930 is a AP CSA 5 931 is a AP CSA 5 932 is a AP CSA 5 933 is a AP CSA 5 934 is a AP CSA 5 935 is a AP CSA 5 936 is a AP CSA 5 937 is a AP CSA 5 938 is a AP CSA 5 939 is a AP CSA 5 940 is a AP CSA 5 941 is a AP CSA 5 942 is a AP CSA 5 943 is a AP CSA 5 944 is a AP CSA 5 945 is a AP CSA 5 946 is a AP CSA 5 947 is a AP CSA 5 948 is a AP CSA 5 949 is a AP CSA 5 950 is a AP CSA 5 951 is a AP CSA 5 952 is a AP CSA 5 953 is a AP CSA 5 954 is a AP CSA 5 955 is a AP CSA 5 956 is a AP CSA 5 957 is a AP CSA 5 958 is a AP CSA 5 959 is a AP CSA 5 960 is a AP CSA 5 961 is a AP CSA 5 962 is a AP CSA 5 963 is a AP CSA 5 964 is a AP CSA 5 965 is a AP CSA 5 966 is a AP CSA 5 967 is a AP CSA 5 968 is a AP CSA 5 969 is a AP CSA 5 970 is a AP CSA 5 971 is a AP CSA 5 972 is a AP CSA 5 973 is a AP CSA 5 974 is a AP CSA 5 975 is a AP CSA 5 976 is a AP CSA 5 977 is a AP CSA 5 978 is a AP CSA 5 979 is a AP CSA 5 980 is a AP CSA 5 981 is a AP CSA 5 982 is a AP CSA 5 983 is a AP CSA 5 984 is a AP CSA 5 985 is a AP CSA 5 986 is a AP CSA 5 987 is a AP CSA 5 988 is a AP CSA 5 989 is a AP CSA 5 990 is a AP CSA 5 991 is a AP CSA 5 992 is a AP CSA 5 993 is a AP CSA 5 994 is a AP CSA 5 995 is a AP CSA 5 996 is a AP CSA 5 997 is a AP CSA 5 998 is a AP CSA 5 999 is a AP CSA 5 1000 is a AP CSA 5 1001 is a AP CSA 5 1002 is a AP CSA 5 1003 is a AP CSA 5 1004 is a AP CSA 5 1005 is a AP CSA 5 1006 is a AP CSA 5 1007 is a AP CSA 5 1008 is a AP CSA 5 1009 is a AP CSA 5 1010 is a AP CSA 5 1011 is a AP CSA 5 1012 is a AP CSA 5 1013 is a AP CSA 5 1014 is a AP CSA 5 1015 is a AP CSA 5 1016 is a AP CSA 5 1017 is a AP CSA 5 1018 is a AP CSA 5 1019 is a AP CSA 5 1020 is a AP CSA 5 1021 is a AP CSA 5 1022 is a AP CSA 5 1023 is a AP CSA 5 1024 is a AP CSA 5 1025 is a AP CSA 5 1026 is a AP CSA 5 1027 is a AP CSA 5 1028 is a AP CSA 5 1029 is a AP CSA 5 1030 is a AP CSA 5 1031 is a AP CSA 5 1032 is a AP CSA 5 1033 is a AP CSA 5 1034 is a AP CSA 5 1035 is a AP CSA 5 1036 is a AP CSA 5 1037 is a AP CSA 5 1038 is a AP CSA 5 1039 is a AP CSA 5 1040 is a AP CSA 5 1041 is a AP CSA 5 1042 is a AP CSA 5 1043 is a AP CSA 5 1044 is a AP CSA 5 1045 is a AP CSA 5 1046 is a AP CSA 5 1047 is a AP CSA 5 1048 is a AP CSA 5 1049 is a AP CSA 5 1050 is a AP CSA 5 1051 is a AP CSA 5 1052 is a AP CSA 5 1053 is a AP CSA 5 1054 is a AP CSA 5 1055 is a AP CSA 5 1056 is a AP CSA 5 1057 is a AP CSA 5 1058 is a AP CSA 5 1059 is a AP CSA 5 1060 is a AP CSA 5 1061 is a AP CSA 5 1062 is a AP CSA 5 1063 is a AP CSA 5 1064 is a AP CSA 5 1065 is a AP CSA 5 1066 is a AP CSA 5 1067 is a AP CSA 5 1068 is a AP CSA 5 1069 is a AP CSA 5 1070 is a AP CSA 5 1071 is a AP CSA 5 1072 is a AP CSA 5 1073 is a AP CSA 5 1074 is a AP CSA 5 1075 is a AP CSA 5 1076 is a AP CSA 5 1077 is a AP CSA 5 1078 is a AP CSA 5 1079 is a AP CSA 5 1080 is a AP CSA 5 1081 is a AP CSA 5 1082 is a AP CSA 5 1083 is a AP CSA 5 1084 is a AP CSA 5 1085 is a AP CSA 5 1086 is a AP CSA 5 1087 is a AP CSA 5 1088 is a AP CSA 5 1089 is a AP CSA 5 1090 is a AP CSA 5 1091 is a AP CSA 5 1092 is a AP CSA 5 1093 is a AP CSA 5 1094 is a AP CSA 5 1095 is a AP CSA 5 1096 is a AP CSA 5 1097 is a AP CSA 5 1098 is a AP CSA 5 1099 is a AP CSA 5 1100 is a AP CSA 5 1101 is a AP CSA 5 1102 is a AP CSA 5 1103 is a AP CSA 5 1104 is a AP CSA 5 1105 is a AP CSA 5 1106 is a AP CSA 5 1107 is a AP CSA 5 1108 is a AP CSA 5 1109 is a AP CSA 5 1110 is a AP CSA 5 1111 is a AP CSA 5 1112 is a AP CSA 5 1113 is a AP CSA 5 1114 is a AP CSA 5 1115 is a AP CSA 5 1116 is a AP CSA 5 1117 is a AP CSA 5 1118 is a AP CSA 5 1119 is a AP CSA 5 1120 is a AP CSA 5 1121 is a AP CSA 5 1122 is a AP CSA 5 1123 is a AP CSA 5 1124 is a AP CSA 5 1125 is a AP CSA 5 1126 is a AP CSA 5 1127 is a AP CSA 5 1128 is a AP CSA 5 1129 is a AP CSA 5 1130 is a AP CSA 5 1131 is a AP CSA 5 1132 is a AP CSA 5 1133 is a AP CSA 5 1134 is a AP CSA 5 1135 is a AP CSA 5 1136 is a AP CSA 5 1137 is a AP CSA 5 1138 is a AP CSA 5 1139 is a AP CSA 5 1140 is a AP CSA 5 1141 is a AP CSA 5 1142 is a AP CSA 5 1143 is a AP CSA 5 1144 is a AP CSA 5 1145 is a AP CSA 5 1146 is a AP CSA 5 1147 is a AP CSA 5 1148 is a AP CSA 5 1149 is a AP CSA 5 1150 is a AP CSA 5 1151 is a AP CSA 5 1152 is a AP CSA 5 1153 is a AP CSA 5 1154 is a AP CSA 5 1155 is a AP CSA 5 1156 is a AP CSA 5 1157 is a AP CSA 5 1158 is a AP CSA 5 1159 is a AP CSA 5 1160 is a AP CSA 5 1161 is a AP CSA 5 1162 is a AP CSA 5 1163 is a AP CSA 5 1164 is a AP CSA 5 1165 is a AP CSA 5 1166 is a AP CSA 5 1167 is a AP CSA 5 1168 is a AP CSA 5 1169 is a AP CSA 5 1170 is a AP CSA 5 1171 is a AP CSA 5 1172 is a AP CSA 5 1173 is a AP CSA 5 1174 is a AP CSA 5 1175 is a AP CSA 5 1176 is a AP CSA 5 1177 is a AP CSA 5 1178 is a AP CSA 5 1179 is a AP CSA 5 1180 is a AP CSA 5 1181 is a AP CSA 5 1182 is a AP CSA 5 1183 is a AP CSA 5 1184 is a AP CSA 5 1185 is a AP CSA 5 1186 is a AP CSA 5 1187 is a AP CSA 5 1188 is a AP CSA 5 1189 is a AP CSA 5 1190 is a AP CSA 5 1191 is a AP CSA 5 1192 is a AP CSA 5 1193 is a AP CSA 5 1194 is a AP CSA 5 1195 is a AP CSA 5 1196 is a AP CSA 5 1197 is a AP CSA 5 1198 is a AP CSA 5 1199 is a AP CSA 5 1200 is a AP CSA 5 1201 is a AP CSA 5 1202 is a AP CSA 5 1203 is a AP CSA 5 1204 is a AP CSA 5 1205 is a AP CSA 5 1206 is a AP CSA 5 1207 is a AP CSA 5 1208 is a AP CSA 5 1209 is a AP CSA 5 1210 is a AP CSA 5 1211 is a AP CSA 5 1212 is a AP CSA 5 1213 is a AP CSA 5 1214 is a AP CSA 5 1215 is a AP CSA 5 1216 is a AP CSA 5 1217 is a AP CSA 5 1218 is a AP CSA 5 1219 is a AP CSA 5 1220 is a AP CSA 5 1221 is a AP CSA 5 1222 is a AP CSA 5 1223 is a AP CSA 5 1224 is a AP CSA 5 1225 is a AP CSA 5 1226 is a AP CSA 5 1227 is a AP CSA 5 1228 is a AP CSA 5 1229 is a AP CSA 5 1230 is a AP CSA 5 1231 is a AP CSA 5 1232 is a AP CSA 5 1233 is a AP CSA 5 1234 is a AP CSA 5 1235 is a AP CSA 5 1236 is a AP CSA 5 1237 is a AP CSA 5 1238 is a AP CSA 5 1239 is a AP CSA 5 1240 is a AP CSA 5 1241 is a AP CSA 5 1242 is a AP CSA 5 1243 is a AP CSA 5 1244 is a AP CSA 5 1245 is a AP CSA 5 1246 is a AP CSA 5 1247 is a AP CSA 5 1248 is a AP CSA 5 1249 is a AP CSA 5 1250 is a AP CSA 5 1251 is a AP CSA 5 1252 is a AP CSA 5 1253 is a AP CSA 5 1254 is a AP CSA 5 1255 is a AP CSA 5 1256 is a AP CSA 5 1257 is a AP CSA 5 1258 is a AP CSA 5 1259 is a AP CSA 5 1260 is a AP CSA 5 1261 is a AP CSA 5 1262 is a AP CSA 5 1263 is a AP CSA 5 1264 is a AP CSA 5 1265 is a AP CSA 5 1266 is a AP CSA 5 1267 is a AP CSA 5 1268 is a AP CSA 5 1269 is a AP CSA 5 1270 is a AP CSA 5 1271 is a AP CSA 5 1272 is a AP CSA 5 1273 is a AP CSA 5 1274 is a AP CSA 5 1275 is a AP CSA 5 1276 is a AP CSA 5 1277 is a AP CSA 5 1278 is a AP CSA 5 1279 is a AP CSA 5 1280 is a AP CSA 5 1281 is a AP CSA 5 1282 is a AP CSA 5 1283 is a AP CSA 5 1284 is a AP CSA 5 1285 is a AP CSA 5 1286 is a AP CSA 5 1287 is a AP CSA 5 1288 is a AP CSA 5 1289 is a AP CSA 5 1290 is a AP CSA 5 1291 is a AP CSA 5 1292 is a AP CSA 5 1293 is a AP CSA 5 1294 is a AP CSA 5 1295 is a AP CSA 5 1296 is a AP CSA 5 1297 is a AP CSA 5 1298 is a AP CSA 5 1299 is a AP CSA 5 1300 is a AP CSA 5 1301 is a AP CSA 5 1302 is a AP CSA 5 1303 is a AP CSA 5 1304 is a AP CSA 5 1305 is a AP CSA 5 1306 is a AP CSA 5 1307 is a AP CSA 5 1308 is a AP CSA 5 1309 is a AP CSA 5 1310 is a AP CSA 5 1311 is a AP CSA 5 1312 is a AP CSA 5 1313 is a AP CSA 5 1314 is a AP CSA 5 1315 is a AP CSA 5 1316 is a AP CSA 5 1317 is a AP CSA 5 1318 is a AP CSA 5 1319 is a AP CSA 5 1320 is a AP CSA 5 1321 is a AP CSA 5 1322 is a AP CSA 5 1323 is a AP CSA 5 1324 is a AP CSA 5 1325 is a AP CSA 5 1326 is a AP CSA 5 1327 is a AP CSA 5 1328 is a AP CSA 5 1329 is a AP CSA 5 1330 is a AP CSA 5 1331 is a AP CSA 5 1332 is a AP CSA 5 1333 is a AP CSA 5 1334 is a AP CSA 5 1335 is a AP CSA 5 1336 is a AP CSA 5 1337 is a AP CSA 5 1338 is a AP CSA 5 1339 is a AP CSA 5 1340 is a AP CSA 5 1341 is a AP CSA 5 1342 is a AP CSA 5 1343 is a AP CSA 5 1344 is a AP CSA 5 1345 is a AP CSA 5 1346 is a AP CSA 5 1347 is a AP CSA 5 1348 is a AP CSA 5 1349 is a AP CSA 5 1350 is a AP CSA 5 1351 is a AP CSA 5 1352 is a AP CSA 5 1353 is a AP CSA 5 1354 is a AP CSA 5 1355 is a AP CSA 5 1356 is a AP CSA 5 1357 is a AP CSA 5 1358 is a AP CSA 5 1359 is a AP CSA 5 1360 is a AP CSA 5 1361 is a AP CSA 5 1362 is a AP CSA 5 1363 is a AP CSA 5 1364 is a AP CSA 5 1365 is a AP CSA 5 1366 is a AP CSA 5 1367 is a AP CSA 5 1368 is a AP CSA 5 1369 is a AP CSA 5 1370 is a AP CSA 5 1371 is a AP CSA 5 1372 is a AP CSA 5 1373 is a AP CSA 5 1374 is a AP CSA 5 1375 is a AP CSA 5 1376 is a AP CSA 5 1377 is a AP CSA 5 1378 is a AP CSA 5 1379 is a AP CSA 5 1380 is a AP CSA 5 1381 is a AP CSA 5 1382 is a AP CSA 5 1383 is a AP CSA 5 1384 is a AP CSA 5 1385 is a AP CSA 5 1386 is a AP CSA 5 1387 is a AP CSA 5 1388 is a AP CSA 5 1389 is a AP CSA 5 1390 is a AP CSA 5 1391 is a AP CSA 5 1392 is a AP CSA 5 1393 is a AP CSA 5 1394 is a AP CSA 5 1395 is a AP CSA 5 1396 is a AP CSA 5 1397 is a AP CSA 5 1398 is a AP CSA 5 1399 is a AP CSA 5 1400 is a AP CSA 5 1401 is a AP CSA 5 1402 is a AP CSA 5 1403 is a AP CSA 5 1404 is a AP CSA 5 1405 is a AP CSA 5 1406 is a AP CSA 5 1407 is a AP CSA 5 1408 is a AP CSA 5 1409 is a AP CSA 5 1410 is a AP CSA 5 1411 is a AP CSA 5 1412 is a AP CSA 5 1413 is a AP CSA 5 1414 is a AP CSA 5 1415 is a AP CSA 5 1416 is a AP CSA 5 1417 is a AP CSA 5 1418 is a AP CSA 5 1419 is a AP CSA 5 1420 is a AP CSA 5 1421 is a AP CSA 5 1422 is a AP CSA 5 1423 is a AP CSA 5 1424 is a AP CSA 5 1425 is a AP CSA 5 1426 is a AP CSA 5 1427 is a AP CSA 5 1428 is a AP CSA 5 1429 is a AP CSA 5 1430 is a AP CSA 5 1431 is a AP CSA 5 1432 is a AP CSA 5 1433 is a AP CSA 5 1434 is a AP CSA 5 1435 is a AP CSA 5 1436 is a AP CSA 5 1437 is a AP CSA 5 1438 is a AP CSA 5 1439 is a AP CSA 5 1440 is a AP CSA 5 1441 is a AP CSA 5 1442 is a AP CSA 5 1443 is a AP CSA 5 1444 is a AP CSA 5 1445 is a AP CSA 5 1446 is a AP CSA 5 1447 is a AP CSA 5 1448 is a AP CSA 5 1449 is a AP CSA 5 1450 is a AP CSA 5 1451 is a AP CSA 5 1452 is a AP CSA 5 1453 is a AP CSA 5 1454 is a AP CSA 5 1455 is a AP CSA 5 1456 is a AP CSA 5 1457 is a AP CSA 5 1458 is a AP CSA 5 1459 is a AP CSA 5 1460 is a AP CSA 5 1461 is a AP CSA 5 1462 is a AP CSA 5 1463 is a AP CSA 5 1464 is a AP CSA 5 1465 is a AP CSA 5 1466 is a AP CSA 5 1467 is a AP CSA 5 1468 is a AP CSA 5 1469 is a AP CSA 5 1470 is a AP CSA 5 1471 is a AP CSA 5 1472 is a AP CSA 5 1473 is a AP CSA 5 1474 is a AP CSA 5 1475 is a AP CSA 5 1476 is a AP CSA 5 1477 is a AP CSA 5 1478 is a AP CSA 5 1479 is a AP CSA 5 1480 is a AP CSA 5 1481 is a AP CSA 5 1482 is a AP CSA 5 1483 is a AP CSA 5 1484 is a AP CSA 5 1485 is a AP CSA 5 1486 is a AP CSA 5 1487 is a AP CSA 5 1488 is a AP CSA 5 1489 is a AP CSA 5 1490 is a AP CSA 5 1491 is a AP CSA 5 1492 is a AP CSA 5 1493 is a AP CSA 5 1494 is a AP CSA 5 1495 is a AP CSA 5 1496 is a AP CSA 5 1497 is a AP CSA 5 1498 is a AP CSA 5 1499 is a AP CSA 5 1500 is a AP CSA 5 1501 is a AP CSA 5 1502 is a AP CSA 5 1503 is a AP CSA 5 1504 is a AP CSA 5 1505 is a AP CSA 5 1506 is a AP CSA 5 1507 is a AP CSA 5 1508 is a AP CSA 5 1509 is a AP CSA 5 1510 is a AP CSA 5 1511 is a AP CSA 5 1512 is a AP CSA 5 1513 is a AP CSA 5 1514 is a AP CSA 5 1515 is a AP CSA 5 1516 is a AP CSA 5 1517 is a AP CSA 5 1518 is a AP CSA 5 1519 is a AP CSA 5 1520 is a AP CSA 5 1521 is a AP CSA 5 1522 is a AP CSA 5 1523 is a AP CSA 5 1524 is a AP CSA 5 1525 is a AP CSA 5 1526 is a AP CSA 5 1527 is a AP CSA 5 1528 is a AP CSA 5 1529 is a AP CSA 5 1530 is a AP CSA 5 1531 is a AP CSA 5 1532 is a AP CSA 5 1533 is a AP CSA 5 1534 is a AP CSA 5 1535 is a AP CSA 5 1536 is a AP CSA 5 1537 is a AP CSA 5 1538 is a AP CSA 5 1539 is a AP CSA 5 1540 is a AP CSA 5 1541 is a AP CSA 5 1542 is a AP CSA 5 1543 is a AP CSA 5 1544 is a AP CSA 5 1545 is a AP CSA 5 1546 is a AP CSA 5 1547 is a AP CSA 5 1548 is a AP CSA 5 1549 is a AP CSA 5 1550 is a AP CSA 5 1551 is a AP CSA 5 1552 is a AP CSA 5 1553 is a AP CSA 5 1554 is a AP CSA 5 1555 is a AP CSA 5 1556 is a AP CSA 5 1557 is a AP CSA 5 1558 is a AP CSA 5 1559 is a AP CSA 5 1560 is a AP CSA 5 1561 is a AP CSA 5 1562 is a AP CSA 5 1563 is a AP CSA 5 1564 is a AP CSA 5 1565 is a AP CSA 5 1566 is a AP CSA 5 1567 is a AP CSA 5 1568 is a AP CSA 5 1569 is a AP CSA 5 1570 is a AP CSA 5 1571 is a AP CSA 5 1572 is a AP CSA 5 1573 is a AP CSA 5 1574 is a AP CSA 5 1575 is a AP CSA 5 1576 is a AP CSA 5 1577 is a AP CSA 5 1578 is a AP CSA 5 1579 is a AP CSA 5 1580 is a AP CSA 5 1581 is a AP CSA 5 1582 is a AP CSA 5 1583 is a AP CSA 5 1584 is a AP CSA 5 1585 is a AP CSA 5 1586 is a AP CSA 5 1587 is a AP CSA 5 1588 is a AP CSA 5 1589 is a AP CSA 5 1590 is a AP CSA 5 1591 is a AP CSA 5 1592 is a AP CSA 5 1593 is a AP CSA 5 1594 is a AP CSA 5 1595 is a AP CSA 5 1596 is a AP CSA 5 1597 is a AP CSA 5 1598 is a AP CSA 5 1599 is a AP CSA 5 1600 is a AP CSA 5 1601 is a AP CSA 5 1602 is a AP CSA 5 1603 is a AP CSA 5 1604 is a AP CSA 5 1605 is a AP CSA 5 1606 is a AP CSA 5 1607 is a AP CSA 5 1608 is a AP CSA 5 1609 is a AP CSA 5 1610 is a AP CSA 5 1611 is a AP CSA 5 1612 is a AP CSA 5 1613 is a AP CSA 5 1614 is a AP CSA 5 1615 is a AP CSA 5 1616 is a AP CSA 5 1617 is a AP CSA 5 1618 is a AP CSA 5 1619 is a AP CSA 5 1620 is a AP CSA 5 1621 is a AP CSA 5 1622 is a AP CSA 5 1623 is a AP CSA 5 1624 is a AP CSA 5 1625 is a AP CSA 5 1626 is a AP CSA 5 1627 is a AP CSA 5 1628 is a AP CSA 5 1629 is a AP CSA 5 1630 is a AP CSA 5 1631 is a AP CSA 5 1632 is a AP CSA 5 1633 is a AP CSA 5 1634 is a AP CSA 5 1635 is a AP CSA 5 1636 is a AP CSA 5 1637 is a AP CSA 5 1638 is a AP CSA 5 1639 is a AP CSA 5 1640 is a AP CSA 5 1641 is a AP CSA 5 1642 is a AP CSA 5 1643 is a AP CSA 5 1644 is a AP CSA 5 1645 is a AP CSA 5 1646 is a AP CSA 5 1647 is a AP CSA 5 1648 is a AP CSA 5 1649 is a AP CSA 5 1650 is a AP CSA 5 1651 is a AP CSA 5 1652 is a AP CSA 5 1653 is a AP CSA 5 1654 is a AP CSA 5 1655 is a AP CSA 5 1656 is a AP CSA 5 1657 is a AP CSA 5 1658 is a AP CSA 5 1659 is a AP CSA 5 1660 is a AP CSA 5 1661 is a AP CSA 5 1662 is a AP CSA 5 1663 is a AP CSA 5 1664 is a AP CSA 5 1665 is a AP CSA 5 1666 is a AP CSA 5 1667 is a AP CSA 5 1668 is a AP CSA 5 1669 is a AP CSA 5 1670 is a AP CSA 5 1671 is a AP CSA 5 1672 is a AP CSA 5 1673 is a AP CSA 5 1674 is a AP CSA 5 1675 is a AP CSA 5 1676 is a AP CSA 5 1677 is a AP CSA 5 1678 is a AP CSA 5 1679 is a AP CSA 5 1680 is a AP CSA 5 1681 is a AP CSA 5 1682 is a AP CSA 5 1683 is a AP CSA 5 1684 is a AP CSA 5 1685 is a AP CSA 5 1686 is a AP CSA 5 1687 is a AP CSA 5 1688 is a AP CSA 5 1689 is a AP CSA 5 1690 is a AP CSA 5 1691 is a AP CSA 5 1692 is a AP CSA 5 1693 is a AP CSA 5 1694 is a AP CSA 5 1695 is a AP CSA 5 1696 is a AP CSA 5 1697 is a AP CSA 5 1698 is a AP CSA 5 1699 is a AP CSA 5 1700 is a AP CSA 5 1701 is a AP CSA 5 1702 is a AP CSA 5 1703 is a AP CSA 5 1704 is a AP CSA 5 1705 is a AP CSA 5 1706 is a AP CSA 5 1707 is a AP CSA 5 1708 is a AP CSA 5 1709 is a AP CSA 5 1710 is a AP CSA 5 1711 is a AP CSA 5 1712 is a AP CSA 5 1713 is a AP CSA 5 1714 is a AP CSA 5 1715 is a AP CSA 5 1716 is a AP CSA 5 1717 is a AP CSA 5 1718 is a AP CSA 5 1719 is a AP CSA 5 1720 is a AP CSA 5 1721 is a AP CSA 5 1722 is a AP CSA 5 1723 is a AP CSA 5 1724 is a AP CSA 5 1725 is a AP CSA 5 1726 is a AP CSA 5 1727 is a AP CSA 5 1728 is a AP CSA 5 1729 is a AP CSA 5 1730 is a AP CSA 5 1731 is a AP CSA 5 1732 is a AP CSA 5 1733 is a AP CSA 5 1734 is a AP CSA 5 1735 is a AP CSA 5 1736 is a AP CSA 5 1737 is a AP CSA 5 1738 is a AP CSA 5 1739 is a AP CSA 5 1740 is a AP CSA 5 1741 is a AP CSA 5 1742 is a AP CSA 5 1743 is a AP CSA 5 1744 is a AP CSA 5 1745 is a AP CSA 5 1746 is a AP CSA 5 1747 is a AP CSA 5 1748 is a AP CSA 5 1749 is a AP CSA 5 1750 is a AP CSA 5 1751 is a AP CSA 5 1752 is a AP CSA 5 1753 is a AP CSA 5 1754 is a AP CSA 5 1755 is a AP CSA 5 1756 is a AP CSA 5 1757 is a AP CSA 5 1758 is a AP CSA 5 1759 is a AP CSA 5 1760 is a AP CSA 5 1761 is a AP CSA 5 1762 is a AP CSA 5 1763 is a AP CSA 5 1764 is a AP CSA 5 1765 is a AP CSA 5 1766 is a AP CSA 5 1767 is a AP CSA 5 1768 is a AP CSA 5 1769 is a AP CSA 5 1770 is a AP CSA 5 1771 is a AP CSA 5 1772 is a AP CSA 5 1773 is a AP CSA 5 1774 is a AP CSA 5 1775 is a AP CSA 5 1776 is a AP CSA 5 1777 is a AP CSA 5 1778 is a AP CSA 5 1779 is a AP CSA 5 1780 is a AP CSA 5 1781 is a AP CSA 5 1782 is a AP CSA 5 1783 is a AP CSA 5 1784 is a AP CSA 5 1785 is a AP CSA 5 1786 is a AP CSA 5 1787 is a AP CSA 5 1788 is a AP CSA 5 1789 is a AP CSA 5 1790 is a AP CSA 5 1791 is a AP CSA 5 1792 is a AP CSA 5 1793 is a AP CSA 5 1794 is a AP CSA 5 1795 is a AP CSA 5 1796 is a AP CSA 5 1797 is a AP CSA 5 1798 is a AP CSA 5 1799 is a AP CSA 5 1800 is a AP CSA 5 1801 is a AP CSA 5 1802 is a AP CSA 5 1803 is a AP CSA 5 1804 is a AP CSA 5 1805 is a AP CSA 5 1806 is a AP CSA 5 1807 is a AP CSA 5 1808 is a AP CSA 5 1809 is a AP CSA 5 1810 is a AP CSA 5 1811 is a AP CSA 5 1812 is a AP CSA 5 1813 is a AP CSA 5 1814 is a AP CSA 5 1815 is a AP CSA 5 1816 is a AP CSA 5 1817 is a AP CSA 5 1818 is a AP CSA 5 1819 is a AP CSA 5 1820 is a AP CSA 5 1821 is a AP CSA 5 1822 is a AP CSA 5 1823 is a AP CSA 5 1824 is a AP CSA 5 1825 is a AP CSA 5 1826 is a AP CSA 5 1827 is a AP CSA 5 1828 is a AP CSA 5 1829 is a AP CSA 5 1830 is a AP CSA 5 1831 is a AP CSA 5 1832 is a AP CSA 5 1833 is a AP CSA 5 1834 is a AP CSA 5 1835 is a AP CSA 5 1836 is a AP CSA 5 1837 is a AP CSA 5 1838 is a AP CSA 5 1839 is a AP CSA 5 1840 is a AP CSA 5 1841 is a AP CSA 5 1842 is a AP CSA 5 1843 is a AP CSA 5 1844 is a AP CSA 5 1845 is a AP CSA 5 1846 is a AP CSA 5 1847 is a AP CSA 5 1848 is a AP CSA 5 1849 is a AP CSA 5 1850 is a AP CSA 5 1851 is a AP CSA 5 1852 is a AP CSA 5 1853 is a AP CSA 5 1854 is a AP CSA 5 1855 is a AP CSA 5 1856 is a AP CSA 5 1857 is a AP CSA 5 1858 is a AP CSA 5 1859 is a AP CSA 5 1860 is a AP CSA 5 1861 is a AP CSA 5 1862 is a AP CSA 5 1863 is a AP CSA 5 1864 is a AP CSA 5 1865 is a AP CSA 5 1866 is a AP CSA 5 1867 is a AP CSA 5 1868 is a AP CSA 5 1869 is a AP CSA 5 1870 is a AP CSA 5 1871 is a AP CSA 5 1872 is a AP CSA 5 1873 is a AP CSA 5 1874 is a AP CSA 5 1875 is a AP CSA 5 1876 is a AP CSA 5 1877 is a AP CSA 5 1878 is a AP CSA 5 1879 is a AP CSA 5 1880 is a AP CSA 5 1881 is a AP CSA 5 1882 is a AP CSA 5 1883 is a AP CSA 5 1884 is a AP CSA 5 1885 is a AP CSA 5 1886 is a AP CSA 5 1887 is a AP CSA 5 1888 is a AP CSA 5 1889 is a AP CSA 5 1890 is a AP CSA 5 1891 is a AP CSA 5 1892 is a AP CSA 5 1893 is a AP CSA 5 1894 is a AP CSA 5 1895 is a AP CSA 5 1896 is a AP CSA 5 1897 is a AP CSA 5 1898 is a AP CSA 5 1899 is a AP CSA 5 1900 is a AP CSA 5 1901 is a AP CSA 5 1902 is a AP CSA 5 1903 is a AP CSA 5 1904 is a AP CSA 5 1905 is a AP CSA 5 1906 is a AP CSA 5 1907 is a AP CSA 5 1908 is a AP CSA 5 1909 is a AP CSA 5 1910 is a AP CSA 5 1911 is a AP CSA 5 1912 is a AP CSA 5 1913 is a AP CSA 5 1914 is a AP CSA 5 1915 is a AP CSA 5 1916 is a AP CSA 5 1917 is a AP CSA 5 1918 is a AP CSA 5 1919 is a AP CSA 5 1920 is a AP CSA 5 1921 is a AP CSA 5 1922 is a AP CSA 5 1923 is a AP CSA 5 1924 is a AP CSA 5 1925 is a AP CSA 5 1926 is a AP CSA 5 1927 is a AP CSA 5 1928 is a AP CSA 5 1929 is a AP CSA 5 1930 is a AP CSA 5 1931 is a AP CSA 5 1932 is a AP CSA 5 1933 is a AP CSA 5 1934 is a AP CSA 5 1935 is a AP CSA 5 1936 is a AP CSA 5 1937 is a AP CSA 5 1938 is a AP CSA 5 1939 is a AP CSA 5 1940 is a AP CSA 5 1941 is a AP CSA 5 1942 is a AP CSA 5 1943 is a AP CSA 5 1944 is a AP CSA 5 1945 is a AP CSA 5 1946 is a AP CSA 5 1947 is a AP CSA 5 1948 is a AP CSA 5 1949 is a AP CSA 5 1950 is a AP CSA 5 1951 is a AP CSA 5 1952 is a AP CSA 5 1953 is a AP CSA 5 1954 is a AP CSA 5 1955 is a AP CSA 5 1956 is a AP CSA 5 1957 is a AP CSA 5 1958 is a AP CSA 5 1959 is a AP CSA 5 1960 is a AP CSA 5 1961 is a AP CSA 5 1962 is a AP CSA 5 1963 is a AP CSA 5 1964 is a AP CSA 5 1965 is a AP CSA 5 1966 is a AP CSA 5 1967 is a AP CSA 5 1968 is a AP CSA 5 1969 is a AP CSA 5 1970 is a AP CSA 5 1971 is a AP CSA 5 1972 is a AP CSA 5 1973 is a AP CSA 5 1974 is a AP CSA 5 1975 is a AP CSA 5 1976 is a AP CSA 5 1977 is a AP CSA 5 1978 is a AP CSA 5 1979 is a AP CSA 5 1980 is a AP CSA 5 1981 is a AP CSA 5 1982 is a AP CSA 5 1983 is a AP CSA 5 1984 is a AP CSA 5 1985 is a AP CSA 5 1986 is a AP CSA 5 1987 is a AP CSA 5 1988 is a AP CSA 5 1989 is a AP CSA 5 1990 is a AP CSA 5 1991 is a AP CSA 5 1992 is a AP CSA 5 1993 is a AP CSA 5 1994 is a AP CSA 5 1995 is a AP CSA 5 1996 is a AP CSA 5 1997 is a AP CSA 5 1998 is a AP CSA 5 1999 is a AP CSA 5 2000 is a AP CSA 5 2001 is a AP CSA 5 2002 is a AP CSA 5 2003 is a AP CSA 5 2004 is a AP CSA 5 2005 is a AP CSA 5 2006 is a AP CSA 5 2007 is a AP CSA 5 2008 is a AP CSA 5 2009 is a AP CSA 5 2010 is a AP CSA 5 2011 is a AP CSA 5 2012 is a AP CSA 5 2013 is a AP CSA 5 2014 is a AP CSA 5 2015 is a AP CSA 5 2016 is a AP CSA 5 2017 is a AP CSA 5 2018 is a AP CSA 5 2019 is a AP CSA 5 2020 is a AP CSA 5 2021 is a AP CSA 5 2022 is a AP CSA 5 2023 is a AP CSA 5 2024 is a AP CSA 5 2025 is a AP CSA 5 2026 is a AP CSA 5 2027 is a AP CSA 5 2028 is a AP CSA 5 2029 is a AP CSA 5 2030 is a AP CSA 5 2031 is a AP CSA 5 2032 is a AP CSA 5 2033 is a AP CSA 5 2034 is a AP CSA 5 2035 is a AP CSA 5 2036 is a AP CSA 5 2037 is a AP CSA 5 2038 is a AP CSA 5 2039 is a AP CSA 5 2040 is a AP CSA 5 2041 is a AP CSA 5 2042 is a AP CSA 5 2043 is a AP CSA 5 2044 is a AP CSA 5 2045 is a AP CSA 5 2046 is a AP CSA 5 2047 is a AP CSA 5 2048 is a AP CSA 5 2049 is a AP CSA 5 2050 is a AP CSA 5 2051 is a AP CSA 5 2052 is a AP CSA 5 2053 is a AP CSA 5 2054 is a AP CSA 5 2055 is a AP CSA 5 2056 is a AP CSA 5 2057 is a AP CSA 5 2058 is a AP CSA 5 2059 is a AP CSA 5 2060 is a AP CSA 5 2061 is a AP CSA 5 2062 is a AP CSA 5 2063 is a AP CSA 5 2064 is a AP CSA 5 2065 is a AP CSA 5 2066 is a AP CSA 5 2067 is a AP CSA 5 2068 is a AP CSA 5 2069 is a AP CSA 5 2070 is a AP CSA 5 2071 is a AP CSA 5 2072 is a AP CSA 5 2073 is a AP CSA 5 2074 is a AP CSA 5 2075 is a AP CSA 5 2076 is a AP CSA 5 2077 is a AP CSA 5 2078 is a AP CSA 5 2079 is a AP CSA 5 2080 is a AP CSA 5 2081 is a AP CSA 5 2082 is a AP CSA 5 2083 is a AP CSA 5 2084 is a AP CSA 5 2085 is a AP CSA 5 2086 is a AP CSA 5 2087 is a AP CSA 5 2088 is a AP CSA 5 2089 is a AP CSA 5 2090 is a AP CSA 5 2091 is a AP CSA 5 2092 is a AP CSA 5 2093 is a AP CSA 5 2094 is a AP CSA 5 2095 is a AP CSA 5 2096 is a AP CSA 5 2097 is a AP CSA 5 2098 is a AP CSA 5 2099 is a AP CSA 5 2100 is a AP CSA 5 2101 is a AP CSA 5 2102 is a AP CSA 5 2103 is a AP CSA 5 2104 is a AP CSA 5 2105 is a AP CSA 5 2106 is a AP CSA 5 2107 is a AP CSA 5 2108 is a AP CSA 5 2109 is a AP CSA 5 2110 is a AP CSA 5 2111 is a AP CSA 5 2112 is a AP CSA 5 2113 is a AP CSA 5 2114 is a AP CSA 5 2115 is a AP CSA 5 2116 is a AP CSA 5 2117 is a AP CSA 5 2118 is a AP CSA 5 2119 is a AP CSA 5 2120 is a AP CSA 5 2121 is a AP CSA 5 2122 is a AP CSA 5 2123 is a AP CSA 5 2124 is a AP CSA 5 2125 is a AP CSA 5 2126 is a AP CSA 5 2127 is a AP CSA 5 2128 is a AP CSA 5 2129 is a AP CSA 5 2130 is a AP CSA 5 2131 is a AP CSA 5 2132 is a AP CSA 5 2133 is a AP CSA 5 2134 is a AP CSA 5 2135 is a AP CSA 5 2136 is a AP CSA 5 2137 is a AP CSA 5 2138 is a AP CSA 5 2139 is a AP CSA 5 2140 is a AP CSA 5 2141 is a AP CSA 5 2142 is a AP CSA 5 2143 is a AP CSA 5 2144 is a AP CSA 5 2145 is a AP CSA 5 2146 is a AP CSA 5 2147 is a AP CSA 5 2148 is a AP CSA 5 2149 is a AP CSA 5 2150 is a AP CSA 5 2151 is a AP CSA 5 2152 is a AP CSA 5 2153 is a AP CSA 5 2154 is a AP CSA 5 2155 is a AP CSA 5 2156 is a AP CSA 5 2157 is a AP CSA 5 2158 is a AP CSA 5 2159 is a AP CSA 5 2160 is a AP CSA 5 2161 is a AP CSA 5 2162 is a AP CSA 5 2163 is a AP CSA 5 2164 is a AP CSA 5 2165 is a AP CSA 5 2166 is a AP CSA 5 2167 is a AP CSA 5 2168 is a AP CSA 5 2169 is a AP CSA 5 2170 is a AP CSA 5 2171 is a AP CSA 5 2172 is a AP CSA 5 2173 is a AP CSA 5 2174 is a AP CSA 5 2175 is a AP CSA 5 2176 is a AP CSA 5 2177 is a AP CSA 5 2178 is a AP CSA 5 2179 is a AP CSA 5 2180 is a AP CSA 5 2181 is a AP CSA 5 2182 is a AP CSA 5 2183 is a AP CSA 5 2184 is a AP CSA 5 2185 is a AP CSA 5 2186 is a AP CSA 5 2187 is a AP CSA 5 2188 is a AP CSA 5 2189 is a AP CSA 5 2190 is a AP CSA 5 2191 is a AP CSA 5 2192 is a AP CSA 5 2193 is a AP CSA 5 2194 is a AP CSA 5 2195 is a AP CSA 5 2196 is a AP CSA 5 2197 is a AP CSA 5 2198 is a AP CSA 5 2199 is a AP CSA 5 2200 is a AP CSA 5 2201 is a AP CSA 5 2202 is a AP CSA 5 2203 is a AP CSA 5 2204 is a AP CSA 5 2205 is a AP CSA 5 2206 is a AP CSA 5 2207 is a AP CSA 5 2208 is a AP CSA 5 2209 is a AP CSA 5 2210 is a AP CSA 5 2211 is a AP CSA 5 2212 is a AP CSA 5 2213 is a AP CSA 5 2214 is a AP CSA 5 2215 is a AP CSA 5 2216 is a AP CSA 5 2217 is a AP CSA 5 2218 is a AP CSA 5 2219 is a AP CSA 5 2220 is a AP CSA 5 2221 is a AP CSA 5 2222 is a AP CSA 5 2223 is a AP CSA 5 2224 is a AP CSA 5 2225 is a AP CSA 5 2226 is a AP CSA 5 2227 is a AP CSA 5 2228 is a AP CSA 5 2229 is a AP CSA 5 2230 is a AP CSA 5 2231 is a AP CSA 5 2232 is a AP CSA 5 2233 is a AP CSA 5 2234 is a AP CSA 5 2235 is a AP CSA 5 2236 is a AP CSA 5 2237 is a AP CSA 5 2238 is a AP CSA 5 2239 is a AP CSA 5 2240 is a AP CSA 5 2241 is a AP CSA 5 2242 is a AP CSA 5 2243 is a AP CSA 5 2244 is a AP CSA 5 2245 is a AP CSA 5 2246 is a AP CSA 5 2247 is a AP CSA 5 2248 is a AP CSA 5 2249 is a AP CSA 5 2250 is a AP CSA 5 2251 is a AP CSA 5 2252 is a AP CSA 5 2253 is a AP CSA 5 2254 is a AP CSA 5 2255 is a AP CSA 5 2256 is a AP CSA 5 2257 is a AP CSA 5 2258 is a AP CSA 5 2259 is a AP CSA 5 2260 is a AP CSA 5 2261 is a AP CSA 5 2262 is a AP CSA 5 2263 is a AP CSA 5 2264 is a AP CSA 5 2265 is a AP CSA 5 2266 is a AP CSA 5 2267 is a AP CSA 5 2268 is a AP CSA 5 2269 is a AP CSA 5 2270 is a AP CSA 5 2271 is a AP CSA 5 2272 is a AP CSA 5 2273 is a AP CSA 5 2274 is a AP CSA 5 2275 is a AP CSA 5 2276 is a AP CSA 5 2277 is a AP CSA 5 2278 is a AP CSA 5 2279 is a AP CSA 5 2280 is a AP CSA 5 2281 is a AP CSA 5 2282 is a AP CSA 5 2283 is a AP CSA 5 2284 is a AP CSA 5 2285 is a AP CSA 5 2286 is a AP CSA 5 2287 is a AP CSA 5 2288 is a AP CSA 5 2289 is a AP CSA 5 2290 is a AP CSA 5 2291 is a AP CSA 5 2292 is a AP CSA 5 2293 is a AP CSA 5 2294 is a AP CSA 5 2295 is a AP CSA 5 2296 is a AP CSA 5 2297 is a AP CSA 5 2298 is a AP CSA 5 2299 is a AP CSA 5 2300 is a AP CSA 5 2301 is a AP CSA 5 2302 is a AP CSA 5 2303 is a AP CSA 5 2304 is a AP CSA 5 2305 is a AP CSA 5 2306 is a AP CSA 5 2307 is a AP CSA 5 2308 is a AP CSA 5 2309 is a AP CSA 5 2310 is a AP CSA 5 2311 is a AP CSA 5 2312 is a AP CSA 5 2313 is a AP CSA 5 2314 is a AP CSA 5 2315 is a AP CSA 5 2316 is a AP CSA 5 2317 is a AP CSA 5 2318 is a AP CSA 5 2319 is a AP CSA 5 2320 is a AP CSA 5 2321 is a AP CSA 5 2322 is a AP CSA 5 2323 is a AP CSA 5 2324 is a AP CSA 5 2325 is a AP CSA 5 2326 is a AP CSA 5 2327 is a AP CSA 5 2328 is a AP CSA 5 2329 is a AP CSA 5 2330 is a AP CSA 5 2331 is a AP CSA 5 2332 is a AP CSA 5 2333 is a AP CSA 5 2334 is a AP CSA 5 2335 is a AP CSA 5 2336 is a AP CSA 5 2337 is a AP CSA 5 2338 is a AP CSA 5 2339 is a AP CSA 5 2340 is a AP CSA 5 2341 is a AP CSA 5 2342 is a AP CSA 5 2343 is a AP CSA 5 2344 is a AP CSA 5 2345 is a AP CSA 5 2346 is a AP CSA 5 2347 is a AP CSA 5 2348 is a AP CSA 5 2349 is a AP CSA 5 2350 is a AP CSA 5 2351 is a AP CSA 5 2352 is a AP CSA 5 2353 is a AP CSA 5 2354 is a AP CSA 5 2355 is a AP CSA 5 2356 is a AP CSA 5 2357 is a AP CSA 5 2358 is a AP CSA 5 2359 is a AP CSA 5 2360 is a AP CSA 5 2361 is a AP CSA 5 2362 is a AP CSA 5 2363 is a AP CSA 5 2364 is a AP CSA 5 2365 is a AP CSA 5 2366 is a AP CSA 5 2367 is a AP CSA 5 2368 is a AP CSA 5 2369 is a AP CSA 5 2370 is a AP CSA 5 2371 is a AP CSA 5 2372 is a AP CSA 5 2373 is a AP CSA 5 2374 is a AP CSA 5 2375 is a AP CSA 5 2376 is a AP CSA 5 2377 is a AP CSA 5 2378 is a AP CSA 5 2379 is a AP CSA 5 2380 is a AP CSA 5 2381 is a AP CSA 5 2382 is a AP CSA 5 2383 is a AP CSA 5 2384 is a AP CSA 5 2385 is a AP CSA 5 2386 is a AP CSA 5 2387 is a AP CSA 5 2388 is a AP CSA 5 2389 is a AP CSA 5 2390 is a AP CSA 5 2391 is a AP CSA 5 2392 is a AP CSA 5 2393 is a AP CSA 5 2394 is a AP CSA 5 2395 is a AP CSA 5 2396 is a AP CSA 5 2397 is a AP CSA 5 2398 is a AP CSA 5 2399 is a AP CSA 5 2400 is a AP CSA 5 2401 is a AP CSA 5 2402 is a AP CSA 5 2403 is a AP CSA 5 2404 is a AP CSA 5 2405 is a AP CSA 5 2406 is a AP CSA 5 2407 is a AP CSA 5 2408 is a AP CSA 5 2409 is a AP CSA 5 2410 is a AP CSA 5 2411 is a AP CSA 5 2412 is a AP CSA 5 2413 is a AP CSA 5 2414 is a AP CSA 5 2415 is a AP CSA 5 2416 is a AP CSA 5 2417 is a AP CSA 5 2418 is a AP CSA 5 2419 is a AP CSA 5 2420 is a AP CSA 5 2421 is a AP CSA 5 2422 is a AP CSA 5 2423 is a AP CSA 5 2424 is a AP CSA 5 2425 is a AP CSA 5 2426 is a AP CSA 5 2427 is a AP CSA 5 2428 is a AP CSA 5 2429 is a AP CSA 5 2430 is a AP CSA 5 2431 is a AP CSA 5 2432 is a AP CSA 5 2433 is a AP CSA 5 2434 is a AP CSA 5 2435 is a AP CSA 5 2436 is a AP CSA 5 2437 is a AP CSA 5 2438 is a AP CSA 5 2439 is a AP CSA 5 2440 is a AP CSA 5 2441 is a AP CSA 5 2442 is a AP CSA 5 2443 is a AP CSA 5 2444 is a AP CSA 5 2445 is a AP CSA 5 2446 is a AP CSA 5 2447 is a AP CSA 5 2448 is a AP CSA 5 2449 is a AP CSA 5 2450 is a AP CSA 5 2451 is a AP CSA 5 2452 is a AP CSA 5 2453 is a AP CSA 5 2454 is a AP CSA 5 2455 is a AP CSA 5 2456 is a AP CSA 5 2457 is a AP CSA 5 2458 is a AP CSA 5 2459 is a AP CSA 5 2460 is a AP CSA 5 2461 is a AP CSA 5 2462 is a AP CSA 5 2463 is a AP CSA 5 2464 is a AP CSA 5 2465 is a AP CSA 5 2466 is a AP CSA 5 2467 is a AP CSA 5 2468 is a AP CSA 5 2469 is a AP CSA 5 2470 is a AP CSA 5 2471 is a AP CSA 5 2472 is a AP CSA 5 2473 is a AP CSA 5 2474 is a AP CSA 5 2475 is a AP CSA 5 2476 is a AP CSA 5 2477 is a AP CSA 5 2478 is a AP CSA 5 2479 is a AP CSA 5 2480 is a AP CSA 5 2481 is a AP CSA 5 2482 is a AP CSA 5 2483 is a AP CSA 5 2484 is a AP CSA 5 2485 is a AP CSA 5 2486 is a AP CSA 5 2487 is a AP CSA 5 2488 is a AP CSA 5 2489 is a AP CSA 5 2490 is a AP CSA 5 2491 is a AP CSA 5 2492 is a AP CSA 5 2493 is a AP CSA 5 2494 is a AP CSA 5 2495 is a AP CSA 5 2496 is a AP CSA 5 2497 is a AP CSA 5 2498 is a AP CSA 5 2499 is a AP CSA 5 2500 is a AP CSA 5 2501 is a AP CSA 5 2502 is a AP CSA 5 2503 is a AP CSA 5 2504 is a AP CSA 5 2505 is a AP CSA 5 2506 is a AP CSA 5 2507 is a AP CSA 5 2508 is a AP CSA 5 2509 is a AP CSA 5 2510 is a AP CSA 5 2511 is a AP CSA 5 2512 is a AP CSA 5 2513 is a AP CSA 5 2514 is a AP CSA 5 2515 is a AP CSA 5 2516 is a AP CSA 5 2517 is a AP CSA 5 2518 is a AP CSA 5 2519 is a AP CSA 5 2520 is a AP CSA 5 2521 is a AP CSA 5 2522 is a AP CSA 5 2523 is a AP CSA 5 2524 is a AP CSA 5 2525 is a AP CSA 5 2526 is a AP CSA 5 2527 is a AP CSA 5 2528 is a AP CSA 5 2529 is a AP CSA 5 2530 is a AP CSA 5 2531 is a AP CSA 5 2532 is a AP CSA 5 2533 is a AP CSA 5 2534 is a AP CSA 5 2535 is a AP CSA 5 2536 is a AP CSA 5 2537 is a AP CSA 5 2538 is a AP CSA 5 2539 is a AP CSA 5 2540 is a AP CSA 5 2541 is a AP CSA 5 2542 is a AP CSA 5 2543 is a AP CSA 5 2544 is a AP CSA 5 2545 is a AP CSA 5 2546 is a AP CSA 5 2547 is a AP CSA 5 2548 is a AP CSA 5 2549 is a AP CSA 5 2550 is a AP CSA 5 2551 is a AP CSA 5 2552 is a AP CSA 5 2553 is a AP CSA 5 2554 is a AP CSA 5 2555 is a AP CSA 5 2556 is a AP CSA 5 2557 is a AP CSA 5 2558 is a AP CSA 5 2559 is a AP CSA 5 2560 is a AP CSA 5 2561 is a AP CSA 5 2562 is a AP CSA 5 2563 is a AP CSA 5 2564 is a AP CSA 5 2565 is a AP CSA 5 2566 is a AP CSA 5 2567 is a AP CSA 5 2568 is a AP CSA 5 2569 is a AP CSA 5 2570 is a AP CSA 5 2571 is a AP CSA 5 2572 is a AP CSA 5 2573 is a AP CSA 5 2574 is a AP CSA 5 2575 is a AP CSA 5 2576 is a AP CSA 5 2577 is a AP CSA 5 2578 is a AP CSA 5 2579 is a AP CSA 5 2580 is a AP CSA 5 2581 is a AP CSA 5 2582 is a AP CSA 5 2583 is a AP CSA 5 2584 is a AP CSA 5 2585 is a AP CSA 5 2586 is a AP CSA 5 2587 is a AP CSA 5 2588 is a AP CSA 5 2589 is a AP CSA 5 2590 is a AP CSA 5 2591 is a AP CSA 5 2592 is a AP CSA 5 2593 is a AP CSA 5 2594 is a AP CSA 5 2595 is a AP CSA 5 2596 is a AP CSA 5 2597 is a AP CSA 5 2598 is a AP CSA 5 2599 is a AP CSA 5 2600 is a AP CSA 5 2601 is a AP CSA 5 2602 is a AP CSA 5 2603 is a AP CSA 5 2604 is a AP CSA 5 2605 is a AP CSA 5 2606 is a AP CSA 5 2607 is a AP CSA 5 2608 is a AP CSA 5 2609 is a AP CSA 5 2610 is a AP CSA 5 2611 is a AP CSA 5 2612 is a AP CSA 5 2613 is a AP CSA 5 2614 is a AP CSA 5 2615 is a AP CSA 5 2616 is a AP CSA 5 2617 is a AP CSA 5 2618 is a AP CSA 5 2619 is a AP CSA 5 2620 is a AP CSA 5 2621 is a AP CSA 5 2622 is a AP CSA 5 2623 is a AP CSA 5 2624 is a AP CSA 5 2625 is a AP CSA 5 2626 is a AP CSA 5 2627 is a AP CSA 5 2628 is a AP CSA 5 2629 is a AP CSA 5 2630 is a AP CSA 5 2631 is a AP CSA 5 2632 is a AP CSA 5 2633 is a AP CSA 5 2634 is a AP CSA 5 2635 is a AP CSA 5 2636 is a AP CSA 5 2637 is a AP CSA 5 2638 is a AP CSA 5 2639 is a AP CSA 5 2640 is a AP CSA 5 2641 is a AP CSA 5 2642 is a AP CSA 5 2643 is a AP CSA 5 2644 is a AP CSA 5 2645 is a AP CSA 5 2646 is a AP CSA 5 2647 is a AP CSA 5 2648 is a AP CSA 5 2649 is a AP CSA 5 2650 is a AP CSA 5 2651 is a AP CSA 5 2652 is a AP CSA 5 2653 is a AP CSA 5 2654 is a AP CSA 5 2655 is a AP CSA 5 2656 is a AP CSA 5 2657 is a AP CSA 5 2658 is a AP CSA 5 2659 is a AP CSA 5 2660 is a AP CSA 5 2661 is a AP CSA 5 2662 is a AP CSA 5 2663 is a AP CSA 5 2664 is a AP CSA 5 2665 is a AP CSA 5 2666 is a AP CSA 5 2667 is a AP CSA 5 2668 is a AP CSA 5 2669 is a AP CSA 5 2670 is a AP CSA 5 2671 is a AP CSA 5 2672 is a AP CSA 5 2673 is a AP CSA 5 2674 is a AP CSA 5 2675 is a AP CSA 5 2676 is a AP CSA 5 2677 is a AP CSA 5 2678 is a AP CSA 5 2679 is a AP CSA 5 2680 is a AP CSA 5 2681 is a AP CSA 5 2682 is a AP CSA 5 2683 is a AP CSA 5 2684 is a AP CSA 5 2685 is a AP CSA 5 2686 is a AP CSA 5 2687 is a AP CSA 5 2688 is a AP CSA 5 2689 is a AP CSA 5 2690 is a AP CSA 5 2691 is a AP CSA 5 2692 is a AP CSA 5 2693 is a AP CSA 5 2694 is a AP CSA 5 2695 is a AP CSA 5 2696 is a AP CSA 5 2697 is a AP CSA 5 2698 is a AP CSA 5 2699 is a AP CSA 5 2700 is a AP CSA 5 2701 is a AP CSA 5 2702 is a AP CSA 5 2703 is a AP CSA 5 2704 is a AP CSA 5 2705 is a AP CSA 5 2706 is a AP CSA 5 2707 is a AP CSA 5 2708 is a AP CSA 5 2709 is a AP CSA 5 2710 is a AP CSA 5 2711 is a AP CSA 5 2712 is a AP CSA 5 2713 is a AP CSA 5 2714 is a AP CSA 5 2715 is a AP CSA 5 2716 is a AP CSA 5 2717 is a AP CSA 5 2718 is a AP CSA 5 2719 is a AP CSA 5 2720 is a AP CSA 5 2721 is a AP CSA 5 2722 is a AP CSA 5 2723 is a AP CSA 5 2724 is a AP CSA 5 2725 is a AP CSA 5 2726 is a AP CSA 5 2727 is a AP CSA 5 2728 is a AP CSA 5 2729 is a AP CSA 5 2730 is a AP CSA 5 2731 is a AP CSA 5 2732 is a AP CSA 5 2733 is a AP CSA 5 2734 is a AP CSA 5 2735 is a AP CSA 5 2736 is a AP CSA 5 2737 is a AP CSA 5 2738 is a AP CSA 5 2739 is a AP CSA 5 2740 is a AP CSA 5 2741 is a AP CSA 5 2742 is a AP CSA 5 2743 is a AP CSA 5 2744 is a AP CSA 5 2745 is a AP CSA 5 2746 is a AP CSA 5 2747 is a AP CSA 5 2748 is a AP CSA 5 2749 is a AP CSA 5 2750 is a AP CSA 5 2751 is a AP CSA 5 2752 is a AP CSA 5 2753 is a AP CSA 5 2754 is a AP CSA 5 2755 is a AP CSA 5 2756 is a AP CSA 5 2757 is a AP CSA 5 2758 is a AP CSA 5 2759 is a AP CSA 5 2760 is a AP CSA 5 2761 is a AP CSA 5 2762 is a AP CSA 5 2763 is a AP CSA 5 2764 is a AP CSA 5 2765 is a AP CSA 5 2766 is a AP CSA 5 2767 is a AP CSA 5 2768 is a AP CSA 5 2769 is a AP CSA 5 2770 is a AP CSA 5 2771 is a AP CSA 5 2772 is a AP CSA 5 2773 is a AP CSA 5 2774 is a AP CSA 5 2775 is a AP CSA 5 2776 is a AP CSA 5 2777 is a AP CSA 5 2778 is a AP CSA 5 2779 is a AP CSA 5 2780 is a AP CSA 5 2781 is a AP CSA 5 2782 is a AP CSA 5 2783 is a AP CSA 5 2784 is a AP CSA 5 2785 is a AP CSA 5 2786 is a AP CSA 5 2787 is a AP CSA 5 2788 is a AP CSA 5 2789 is a AP CSA 5 2790 is a AP CSA 5 2791 is a AP CSA 5 2792 is a AP CSA 5 2793 is a AP CSA 5 2794 is a AP CSA 5 2795 is a AP CSA 5 2796 is a AP CSA 5 2797 is a AP CSA 5 2798 is a AP CSA 5 2799 is a AP CSA 5 2800 is a AP CSA 5 2801 is a AP CSA 5 2802 is a AP CSA 5 2803 is a AP CSA 5 2804 is a AP CSA 5 2805 is a AP CSA 5 2806 is a AP CSA 5 2807 is a AP CSA 5 2808 is a AP CSA 5 2809 is a AP CSA 5 2810 is a AP CSA 5 2811 is a AP CSA 5 2812 is a AP CSA 5 2813 is a AP CSA 5 2814 is a AP CSA 5 2815 is a AP CSA 5 2816 is a AP CSA 5 2817 is a AP CSA 5 2818 is a AP CSA 5 2819 is a AP CSA 5 2820 is a AP CSA 5 2821 is a AP CSA 5 2822 is a AP CSA 5 2823 is a AP CSA 5 2824 is a AP CSA 5 2825 is a AP CSA 5 2826 is a AP CSA 5 2827 is a AP CSA 5 2828 is a AP CSA 5 2829 is a AP CSA 5 2830 is a AP CSA 5 2831 is a AP CSA 5 2832 is a AP CSA 5 2833 is a AP CSA 5 2834 is a AP CSA 5 2835 is a AP CSA 5 2836 is a AP CSA 5 2837 is a AP CSA 5 2838 is a AP CSA 5 2839 is a AP CSA 5 2840 is a AP CSA 5 2841 is a AP CSA 5 2842 is a AP CSA 5 2843 is a AP CSA 5 2844 is a AP CSA 5 2845 is a AP CSA 5 2846 is a AP CSA 5 2847 is a AP CSA 5 2848 is a AP CSA 5 2849 is a AP CSA 5 2850 is a AP CSA 5 2851 is a AP CSA 5 2852 is a AP CSA 5 2853 is a AP CSA 5 2854 is a AP CSA 5 2855 is a AP CSA 5 2856 is a AP CSA 5 2857 is a AP CSA 5 2858 is a AP CSA 5 2859 is a AP CSA 5 2860 is a AP CSA 5 2861 is a AP CSA 5 2862 is a AP CSA 5 2863 is a AP CSA 5 2864 is a AP CSA 5 2865 is a AP CSA 5 2866 is a AP CSA 5 2867 is a AP CSA 5 2868 is a AP CSA 5 2869 is a AP CSA 5 2870 is a AP CSA 5 2871 is a AP CSA 5 2872 is a AP CSA 5 2873 is a AP CSA 5 2874 is a AP CSA 5 2875 is a AP CSA 5 2876 is a AP CSA 5 2877 is a AP CSA 5 2878 is a AP CSA 5 2879 is a AP CSA 5 2880 is a AP CSA 5 2881 is a AP CSA 5 2882 is a AP CSA 5 2883 is a AP CSA 5 2884 is a AP CSA 5 2885 is a AP CSA 5 2886 is a AP CSA 5 2887 is a AP CSA 5 2888 is a AP CSA 5 2889 is a AP CSA 5 2890 is a AP CSA 5 2891 is a AP CSA 5 2892 is a AP CSA 5 2893 is a AP CSA 5 2894 is a AP CSA 5 2895 is a AP CSA 5 2896 is a AP CSA 5 2897 is a AP CSA 5 2898 is a AP CSA 5 2899 is a AP CSA 5 2900 is a AP CSA 5 2901 is a AP CSA 5 2902 is a AP CSA 5 2903 is a AP CSA 5 2904 is a AP CSA 5 2905 is a AP CSA 5 2906 is a AP CSA 5 2907 is a AP CSA 5 2908 is a AP CSA 5 2909 is a AP CSA 5 2910 is a AP CSA 5 2911 is a AP CSA 5 2912 is a AP CSA 5 2913 is a AP CSA 5 2914 is a AP CSA 5 2915 is a AP CSA 5 2916 is a AP CSA 5 2917 is a AP CSA 5 2918 is a AP CSA 5 2919 is a AP CSA 5 2920 is a AP CSA 5 2921 is a AP CSA 5 2922 is a AP CSA 5 2923 is a AP CSA 5 2924 is a AP CSA 5 2925 is a AP CSA 5 2926 is a AP CSA 5 2927 is a AP CSA 5 2928 is a AP CSA 5 2929 is a AP CSA 5 2930 is a AP CSA 5 2931 is a AP CSA 5 2932 is a AP CSA 5 2933 is a AP CSA 5 2934 is a AP CSA 5 2935 is a AP CSA 5 2936 is a AP CSA 5 2937 is a AP CSA 5 2938 is a AP CSA 5 2939 is a AP CSA 5 2940 is a AP CSA 5 2941 is a AP CSA 5 2942 is a AP CSA 5 2943 is a AP CSA 5 2944 is a AP CSA 5 2945 is a AP CSA 5 2946 is a AP CSA 5 2947 is a AP CSA 5 2948 is a AP CSA 5 2949 is a AP CSA 5 2950 is a AP CSA 5 2951 is a AP CSA 5 2952 is a AP CSA 5 2953 is a AP CSA 5 2954 is a AP CSA 5 2955 is a AP CSA 5 2956 is a AP CSA 5 2957 is a AP CSA 5 2958 is a AP CSA 5 2959 is a AP CSA 5 2960 is a AP CSA 5 2961 is a AP CSA 5 2962 is a AP CSA 5 2963 is a AP CSA 5 2964 is a AP CSA 5 2965 is a AP CSA 5 2966 is a AP CSA 5 2967 is a AP CSA 5 2968 is a AP CSA 5 2969 is a AP CSA 5 2970 is a AP CSA 5 2971 is a AP CSA 5 2972 is a AP CSA 5 2973 is a AP CSA 5 2974 is a AP CSA 5 2975 is a AP CSA 5 2976 is a AP CSA 5 2977 is a AP CSA 5 2978 is a AP CSA 5 2979 is a AP CSA 5 2980 is a AP CSA 5 2981 is a AP CSA 5 2982 is a AP CSA 5 2983 is a AP CSA 5 2984 is a AP CSA 5 2985 is a AP CSA 5 2986 is a AP CSA 5 2987 is a AP CSA 5 2988 is a AP CSA 5 2989 is a AP CSA 5 2990 is a AP CSA 5 2991 is a AP CSA 5 2992 is a AP CSA 5 2993 is a AP CSA 5 2994 is a AP CSA 5 2995 is a AP CSA 5 2996 is a AP CSA 5 2997 is a AP CSA 5 2998 is a AP CSA 5 2999 is a AP CSA 5 3000 is a AP CSA 5 3001 is a AP CSA 5 3002 is a AP CSA 5 3003 is a AP CSA 5 3004 is a AP CSA 5 3005 is a AP CSA 5 3006 is a AP CSA 5 3007 is a AP CSA 5 3008 is a AP CSA 5 3009 is a AP CSA 5 3010 is a AP CSA 5 3011 is a AP CSA 5 3012 is a AP CSA 5 3013 is a AP CSA 5 3014 is a AP CSA 5 3015 is a AP CSA 5 3016 is a AP CSA 5 3017 is a AP CSA 5 3018 is a AP CSA 5 3019 is a AP CSA 5 3020 is a AP CSA 5 3021 is a AP CSA 5 3022 is a AP CSA 5 3023 is a AP CSA 5 3024 is a AP CSA 5 3025 is a AP CSA 5 3026 is a AP CSA 5 3027 is a AP CSA 5 3028 is a AP CSA 5 3029 is a AP CSA 5 3030 is a AP CSA 5 3031 is a AP CSA 5 3032 is a AP CSA 5 3033 is a AP CSA 5 3034 is a AP CSA 5 3035 is a AP CSA 5 3036 is a AP CSA 5 3037 is a AP CSA 5 3038 is a AP CSA 5 3039 is a AP CSA 5 3040 is a AP CSA 5 3041 is a AP CSA 5 3042 is a AP CSA 5 3043 is a AP CSA 5 3044 is a AP CSA 5 3045 is a AP CSA 5 3046 is a AP CSA 5 3047 is a AP CSA 5 3048 is a AP CSA 5 3049 is a AP CSA 5 3050 is a AP CSA 5 3051 is a AP CSA 5 3052 is a AP CSA 5 3053 is a AP CSA 5 3054 is a AP CSA 5 3055 is a AP CSA 5 3056 is a AP CSA 5 3057 is a AP CSA 5 3058 is a AP CSA 5 3059 is a AP CSA 5 3060 is a AP CSA 5 3061 is a AP CSA 5 3062 is a AP CSA 5 3063 is a AP CSA 5 3064 is a AP CSA 5 3065 is a AP CSA 5 3066 is a AP CSA 5 3067 is a AP CSA 5 3068 is a AP CSA 5 3069 is a AP CSA 5 3070 is a AP CSA 5 3071 is a AP CSA 5 3072 is a AP CSA 5 3073 is a AP CSA 5 3074 is a AP CSA 5 3075 is a AP CSA 5 3076 is a AP CSA 5 3077 is a AP CSA 5 3078 is a AP CSA 5 3079 is a AP CSA 5 3080 is a AP CSA 5 3081 is a AP CSA 5 3082 is a AP CSA 5 3083 is a AP CSA 5 3084 is a AP CSA 5 3085 is a AP CSA 5 3086 is a AP CSA 5 3087 is a AP CSA 5 3088 is a AP CSA 5 3089 is a AP CSA 5 3090 is a AP CSA 5 3091 is a AP CSA 5 3092 is a AP CSA 5 3093 is a AP CSA 5 3094 is a AP CSA 5 3095 is a AP CSA 5 3096 is a AP CSA 5 3097 is a AP CSA 5 3098 is a AP CSA 5 3099 is a AP CSA 5 3100 is a AP CSA 5 3101 is a AP CSA 5 3102 is a AP CSA 5 3103 is a AP CSA 5 3104 is a AP CSA 5 3105 is a AP CSA 5 3106 is a AP CSA 5 3107 is a AP CSA 5 3108 is a AP CSA 5 3109 is a AP CSA 5 3110 is a AP CSA 5 3111 is a AP CSA 5 3112 is a AP CSA 5 3113 is a AP CSA 5 3114 is a AP CSA 5 3115 is a AP CSA 5 3116 is a AP CSA 5 3117 is a AP CSA 5 3118 is a AP CSA 5 3119 is a AP CSA 5 3120 is a AP CSA 5 3121 is a AP CSA 5 3122 is a AP CSA 5 3123 is a AP CSA 5 3124 is a AP CSA 5 3125 is a AP CSA 5 3126 is a AP CSA 5 3127 is a AP CSA 5 3128 is a AP CSA 5 3129 is a AP CSA 5 3130 is a AP CSA 5 3131 is a AP CSA 5 3132 is a AP CSA 5 3133 is a AP CSA 5 3134 is a AP CSA 5 3135 is a AP CSA 5 3136 is a AP CSA 5 3137 is a AP CSA 5 3138 is a AP CSA 5 3139 is a AP CSA 5 3140 is a AP CSA 5 3141 is a AP CSA 5 3142 is a AP CSA 5 3143 is a AP CSA 5 3144 is a AP CSA 5 3145 is a AP CSA 5 3146 is a AP CSA 5 3147 is a AP CSA 5 3148 is a AP CSA 5 3149 is a AP CSA 5 3150 is a AP CSA 5 3151 is a AP CSA 5 3152 is a AP CSA 5 3153 is a AP CSA 5 3154 is a AP CSA 5 3155 is a AP CSA 5 3156 is a AP CSA 5 3157 is a AP CSA 5 3158 is a AP CSA 5 3159 is a AP CSA 5 3160 is a AP CSA 5 3161 is a AP CSA 5 3162 is a AP CSA 5 3163 is a AP CSA 5 3164 is a AP CSA 5 3165 is a AP CSA 5 3166 is a AP CSA 5 3167 is a AP CSA 5 3168 is a AP CSA 5 3169 is a AP CSA 5 3170 is a AP CSA 5 3171 is a AP CSA 5 3172 is a AP CSA 5 3173 is a AP CSA 5 3174 is a AP CSA 5 3175 is a AP CSA 5 3176 is a AP CSA 5 3177 is a AP CSA 5 3178 is a AP CSA 5 3179 is a AP CSA 5 3180 is a AP CSA 5 3181 is a AP CSA 5 3182 is a AP CSA 5 3183 is a AP CSA 5 3184 is a AP CSA 5 3185 is a AP CSA 5 3186 is a AP CSA 5 3187 is a AP CSA 5 3188 is a AP CSA 5 3189 is a AP CSA 5 3190 is a AP CSA 5 3191 is a AP CSA 5 3192 is a AP CSA 5 3193 is a AP CSA 5 3194 is a AP CSA 5 3195 is a AP CSA 5 3196 is a AP CSA 5 3197 is a AP CSA 5 3198 is a AP CSA 5 3199 is a AP CSA 5 3200 is a AP CSA 5 3201 is a AP CSA 5 3202 is a AP CSA 5 3203 is a AP CSA 5 3204 is a AP CSA 5 3205 is a AP CSA 5 3206 is a AP CSA 5 3207 is a AP CSA 5 3208 is a AP CSA 5 3209 is a AP CSA 5 3210 is a AP CSA 5 3211 is a AP CSA 5 3212 is a AP CSA 5 3213 is a AP CSA 5 3214 is a AP CSA 5 3215 is a AP CSA 5 3216 is a AP CSA 5 3217 is a AP CSA 5 3218 is a AP CSA 5 3219 is a AP CSA 5 3220 is a AP CSA 5 3221 is a AP CSA 5 3222 is a AP CSA 5 3223 is a AP CSA 5 3224 is a AP CSA 5 3225 is a AP CSA 5 3226 is a AP CSA 5 3227 is a AP CSA 5 3228 is a AP CSA 5 3229 is a AP CSA 5 3230 is a AP CSA 5 3231 is a AP CSA 5 3232 is a AP CSA 5 3233 is a AP CSA 5 3234 is a AP CSA 5 3235 is a AP CSA 5 3236 is a AP CSA 5 3237 is a AP CSA 5 3238 is a AP CSA 5 3239 is a AP CSA 5 3240 is a AP CSA 5 3241 is a AP CSA 5 3242 is a AP CSA 5 3243 is a AP CSA 5 3244 is a AP CSA 5 3245 is a AP CSA 5 3246 is a AP CSA 5 3247 is a AP CSA 5 3248 is a AP CSA 5 3249 is a AP CSA 5 3250 is a AP CSA 5 3251 is a AP CSA 5 3252 is a AP CSA 5 3253 is a AP CSA 5 3254 is a AP CSA 5 3255 is a AP CSA 5 3256 is a AP CSA 5 3257 is a AP CSA 5 3258 is a AP CSA 5 3259 is a AP CSA 5 3260 is a AP CSA 5 3261 is a AP CSA 5 3262 is a AP CSA 5 3263 is a AP CSA 5 3264 is a AP CSA 5 3265 is a AP CSA 5 3266 is a AP CSA 5 3267 is a AP CSA 5 3268 is a AP CSA 5 3269 is a AP CSA 5 3270 is a AP CSA 5 3271 is a AP CSA 5 3272 is a AP CSA 5 3273 is a AP CSA 5 3274 is a AP CSA 5 3275 is a AP CSA 5 3276 is a AP CSA 5 3277 is a AP CSA 5 3278 is a AP CSA 5 3279 is a AP CSA 5 3280 is a AP CSA 5 3281 is a AP CSA 5 3282 is a AP CSA 5 3283 is a AP CSA 5 3284 is a AP CSA 5 3285 is a AP CSA 5 3286 is a AP CSA 5 3287 is a AP CSA 5 3288 is a AP CSA 5 3289 is a AP CSA 5 3290 is a AP CSA 5 3291 is a AP CSA 5 3292 is a AP CSA 5 3293 is a AP CSA 5 3294 is a AP CSA 5 3295 is a AP CSA 5 3296 is a AP CSA 5 3297 is a AP CSA 5 3298 is a AP CSA 5 3299 is a AP CSA 5 3300 is a AP CSA 5 3301 is a AP CSA 5 3302 is a AP CSA 5 3303 is a AP CSA 5 3304 is a AP CSA 5 3305 is a AP CSA 5 3306 is a AP CSA 5 3307 is a AP CSA 5 3308 is a AP CSA 5 3309 is a AP CSA 5 3310 is a AP CSA 5 3311 is a AP CSA 5 3312 is a AP CSA 5 3313 is a AP CSA 5 3314 is a AP CSA 5 3315 is a AP CSA 5 3316 is a AP CSA 5 3317 is a AP CSA 5 3318 is a AP CSA 5 3319 is a AP CSA 5 3320 is a AP CSA 5 3321 is a AP CSA 5 3322 is a AP CSA 5 3323 is a AP CSA 5 3324 is a AP CSA 5 3325 is a AP CSA 5 3326 is a AP CSA 5 3327 is a AP CSA 5 3328 is a AP CSA 5 3329 is a AP CSA 5 3330 is a AP CSA 5 3331 is a AP CSA 5 3332 is a AP CSA 5 3333 is a AP CSA 5 3334 is a AP CSA 5 3335 is a AP CSA 5 3336 is a AP CSA 5 3337 is a AP CSA 5 3338 is a AP CSA 5 3339 is a AP CSA 5 3340 is a AP CSA 5 3341 is a AP CSA 5 3342 is a AP CSA 5 3343 is a AP CSA 5 3344 is a AP CSA 5 3345 is a AP CSA 5 3346 is a AP CSA 5 3347 is a AP CSA 5 3348 is a AP CSA 5 3349 is a AP CSA 5 3350 is a AP CSA 5 3351 is a AP CSA 5 3352 is a AP CSA 5 3353 is a AP CSA 5 3354 is a AP CSA 5 3355 is a AP CSA 5 3356 is a AP CSA 5 3357 is a AP CSA 5 3358 is a AP CSA 5 3359 is a AP CSA 5 3360 is a AP CSA 5 3361 is a AP CSA 5 3362 is a AP CSA 5 3363 is a AP CSA 5 3364 is a AP CSA 5 3365 is a AP CSA 5 3366 is a AP CSA 5 3367 is a AP CSA 5 3368 is a AP CSA 5 3369 is a AP CSA 5 3370 is a AP CSA 5 3371 is a AP CSA 5 3372 is a AP CSA 5 3373 is a AP CSA 5 3374 is a AP CSA 5 3375 is a AP CSA 5 3376 is a AP CSA 5 3377 is a AP CSA 5 3378 is a AP CSA 5 3379 is a AP CSA 5 3380 is a AP CSA 5 3381 is a AP CSA 5 3382 is a AP CSA 5 3383 is a AP CSA 5 3384 is a AP CSA 5 3385 is a AP CSA 5 3386 is a AP CSA 5 3387 is a AP CSA 5 3388 is a AP CSA 5 3389 is a AP CSA 5 3390 is a AP CSA 5 3391 is a AP CSA 5 3392 is a AP CSA 5 3393 is a AP CSA 5 3394 is a AP CSA 5 3395 is a AP CSA 5 3396 is a AP CSA 5 3397 is a AP CSA 5 3398 is a AP CSA 5 3399 is a AP CSA 5 3400 is a AP CSA 5 3401 is a AP CSA 5 3402 is a AP CSA 5 3403 is a AP CSA 5 3404 is a AP CSA 5 3405 is a AP CSA 5 3406 is a AP CSA 5 3407 is a AP CSA 5 3408 is a AP CSA 5 3409 is a AP CSA 5 3410 is a AP CSA 5 3411 is a AP CSA 5 3412 is a AP CSA 5 3413 is a AP CSA 5 3414 is a AP CSA 5 3415 is a AP CSA 5 3416 is a AP CSA 5 3417 is a AP CSA 5 3418 is a AP CSA 5 3419 is a AP CSA 5 3420 is a AP CSA 5 3421 is a AP CSA 5 3422 is a AP CSA 5 3423 is a AP CSA 5 3424 is a AP CSA 5 3425 is a AP CSA 5 3426 is a AP CSA 5 3427 is a AP CSA 5 3428 is a AP CSA 5 3429 is a AP CSA 5 3430 is a AP CSA 5 3431 is a AP CSA 5 3432 is a AP CSA 5 3433 is a AP CSA 5 3434 is a AP CSA 5 3435 is a AP CSA 5 3436 is a AP CSA 5 3437 is a AP CSA 5 3438 is a AP CSA 5 3439 is a AP CSA 5 3440 is a AP CSA 5 3441 is a AP CSA 5 3442 is a AP CSA 5 3443 is a AP CSA 5 3444 is a AP CSA 5 3445 is a AP CSA 5 3446 is a AP CSA 5 3447 is a AP CSA 5 3448 is a AP CSA 5 3449 is a AP CSA 5 3450 is a AP CSA 5 3451 is a AP CSA 5 3452 is a AP CSA 5 3453 is a AP CSA 5 3454 is a AP CSA 5 3455 is a AP CSA 5 3456 is a AP CSA 5 3457 is a AP CSA 5 3458 is a AP CSA 5 3459 is a AP CSA 5 3460 is a AP CSA 5 3461 is a AP CSA 5 3462 is a AP CSA 5 3463 is a AP CSA 5 3464 is a AP CSA 5 3465 is a AP CSA 5 3466 is a AP CSA 5 3467 is a AP CSA 5 3468 is a AP CSA 5 3469 is a AP CSA 5 3470 is a AP CSA 5 3471 is a AP CSA 5 3472 is a AP CSA 5 3473 is a AP CSA 5 3474 is a AP CSA 5 3475 is a AP CSA 5 3476 is a AP CSA 5 3477 is a AP CSA 5 3478 is a AP CSA 5 3479 is a AP CSA 5 3480 is a AP CSA 5 3481 is a AP CSA 5 3482 is a AP CSA 5 3483 is a AP CSA 5 3484 is a AP CSA 5 3485 is a AP CSA 5 3486 is a AP CSA 5 3487 is a AP CSA 5 3488 is a AP CSA 5 3489 is a AP CSA 5 3490 is a AP CSA 5 3491 is a AP CSA 5 3492 is a AP CSA 5 3493 is a AP CSA 5 3494 is a AP CSA 5 3495 is a AP CSA 5 3496 is a AP CSA 5 3497 is a AP CSA 5 3498 is a AP CSA 5 3499 is a AP CSA 5 3500 is a AP CSA 5 3501 is a AP CSA 5 3502 is a AP CSA 5 3503 is a AP CSA 5 3504 is a AP CSA 5 3505 is a AP CSA 5 3506 is a AP CSA 5 3507 is a AP CSA 5 3508 is a AP CSA 5 3509 is a AP CSA 5 3510 is a AP CSA 5 3511 is a AP CSA 5 3512 is a AP CSA 5 3513 is a AP CSA 5 3514 is a AP CSA 5 3515 is a AP CSA 5 3516 is a AP CSA 5 3517 is a AP CSA 5 3518 is a AP CSA 5 3519 is a AP CSA 5 3520 is a AP CSA 5 3521 is a AP CSA 5 3522 is a AP CSA 5 3523 is a AP CSA 5 3524 is a AP CSA 5 3525 is a AP CSA 5 3526 is a AP CSA 5 3527 is a AP CSA 5 3528 is a AP CSA 5 3529 is a AP CSA 5 3530 is a AP CSA 5 3531 is a AP CSA 5 3532 is a AP CSA 5 3533 is a AP CSA 5 3534 is a AP CSA 5 3535 is a AP CSA 5 3536 is a AP CSA 5 3537 is a AP CSA 5 3538 is a AP CSA 5 3539 is a AP CSA 5 3540 is a AP CSA 5 3541 is a AP CSA 5 3542 is a AP CSA 5 3543 is a AP CSA 5 3544 is a AP CSA 5 3545 is a AP CSA 5 3546 is a AP CSA 5 3547 is a AP CSA 5 3548 is a AP CSA 5 3549 is a AP CSA 5 3550 is a AP CSA 5 3551 is a AP CSA 5 3552 is a AP CSA 5 3553 is a AP CSA 5 3554 is a AP CSA 5 3555 is a AP CSA 5 3556 is a AP CSA 5 3557 is a AP CSA 5 3558 is a AP CSA 5 3559 is a AP CSA 5 3560 is a AP CSA 5 3561 is a AP CSA 5 3562 is a AP CSA 5 3563 is a AP CSA 5 3564 is a AP CSA 5 3565 is a AP CSA 5 3566 is a AP CSA 5 3567 is a AP CSA 5 3568 is a AP CSA 5 3569 is a AP CSA 5 3570 is a AP CSA 5 3571 is a AP CSA 5 3572 is a AP CSA 5 3573 is a AP CSA 5 3574 is a AP CSA 5 3575 is a AP CSA 5 3576 is a AP CSA 5 3577 is a AP CSA 5 3578 is a AP CSA 5 3579 is a AP CSA 5 3580 is a AP CSA 5 3581 is a AP CSA 5 3582 is a AP CSA 5 3583 is a AP CSA 5 3584 is a AP CSA 5 3585 is a AP CSA 5 3586 is a AP CSA 5 3587 is a AP CSA 5 3588 is a AP CSA 5 3589 is a AP CSA 5 3590 is a AP CSA 5 3591 is a AP CSA 5 3592 is a AP CSA 5 3593 is a AP CSA 5 3594 is a AP CSA 5 3595 is a AP CSA 5 3596 is a AP CSA 5 3597 is a AP CSA 5 3598 is a AP CSA 5 3599 is a AP CSA 5 3600 is a AP CSA 5 3601 is a AP CSA 5 3602 is a AP CSA 5 3603 is a AP CSA 5 3604 is a AP CSA 5 3605 is a AP CSA 5 3606 is a AP CSA 5 3607 is a AP CSA 5 3608 is a AP CSA 5 3609 is a AP CSA 5 3610 is a AP CSA 5 3611 is a AP CSA 5 3612 is a AP CSA 5 3613 is a AP CSA 5 3614 is a AP CSA 5 3615 is a AP CSA 5 3616 is a AP CSA 5 3617 is a AP CSA 5 3618 is a AP CSA 5 3619 is a AP CSA 5 3620 is a AP CSA 5 3621 is a AP CSA 5 3622 is a AP CSA 5 3623 is a AP CSA 5 3624 is a AP CSA 5 3625 is a AP CSA 5 3626 is a AP CSA 5 3627 is a AP CSA 5 3628 is a AP CSA 5 3629 is a AP CSA 5 3630 is a AP CSA 5 3631 is a AP CSA 5 3632 is a AP CSA 5 3633 is a AP CSA 5 3634 is a AP CSA 5 3635 is a AP CSA 5 3636 is a AP CSA 5 3637 is a AP CSA 5 3638 is a AP CSA 5 3639 is a AP CSA 5 3640 is a AP CSA 5 3641 is a AP CSA 5 3642 is a AP CSA 5 3643 is a AP CSA 5 3644 is a AP CSA 5 3645 is a AP CSA 5 3646 is a AP CSA 5 3647 is a AP CSA 5 3648 is a AP CSA 5 3649 is a AP CSA 5 3650 is a AP CSA 5 3651 is a AP CSA 5 3652 is a AP CSA 5 3653 is a AP CSA 5 3654 is a AP CSA 5 3655 is a AP CSA 5 3656 is a AP CSA 5 3657 is a AP CSA 5 3658 is a AP CSA 5 3659 is a AP CSA 5 3660 is a AP CSA 5 3661 is a AP CSA 5 3662 is a AP CSA 5 3663 is a AP CSA 5 3664 is a AP CSA 5 3665 is a AP CSA 5 3666 is a AP CSA 5 3667 is a AP CSA 5 3668 is a AP CSA 5 3669 is a AP CSA 5 3670 is a AP CSA 5 3671 is a AP CSA 5 3672 is a AP CSA 5 3673 is a AP CSA 5 3674 is a AP CSA 5 3675 is a AP CSA 5 3676 is a AP CSA 5 3677 is a AP CSA 5 3678 is a AP CSA 5 3679 is a AP CSA 5 3680 is a AP CSA 5 3681 is a AP CSA 5 3682 is a AP CSA 5 3683 is a AP CSA 5 3684 is a AP CSA 5 3685 is a AP CSA 5 3686 is a AP CSA 5 3687 is a AP CSA 5 3688 is a AP CSA 5 3689 is a AP CSA 5 3690 is a AP CSA 5 3691 is a AP CSA 5 3692 is a AP CSA 5 3693 is a AP CSA 5 3694 is a AP CSA 5 3695 is a AP CSA 5 3696 is a AP CSA 5 3697 is a AP CSA 5 3698 is a AP CSA 5 3699 is a AP CSA 5 3700 is a AP CSA 5 3701 is a AP CSA 5 3702 is a AP CSA 5 3703 is a AP CSA 5 3704 is a AP CSA 5 3705 is a AP CSA 5 3706 is a AP CSA 5 3707 is a AP CSA 5 3708 is a AP CSA 5 3709 is a AP CSA 5 3710 is a AP CSA 5 3711 is a AP CSA 5 3712 is a AP CSA 5 3713 is a AP CSA 5 3714 is a AP CSA 5 3715 is a AP CSA 5 3716 is a AP CSA 5 3717 is a AP CSA 5 3718 is a AP CSA 5 3719 is a AP CSA 5 3720 is a AP CSA 5 3721 is a AP CSA 5 3722 is a AP CSA 5 3723 is a AP CSA 5 3724 is a AP CSA 5 3725 is a AP CSA 5 3726 is a AP CSA 5 3727 is a AP CSA 5 3728 is a AP CSA 5 3729 is a AP CSA 5 3730 is a AP CSA 5 3731 is a AP CSA 5 3732 is a AP CSA 5 3733 is a AP CSA 5 3734 is a AP CSA 5 3735 is a AP CSA 5 3736 is a AP CSA 5 3737 is a AP CSA 5 3738 is a AP CSA 5 3739 is a AP CSA 5 3740 is a AP CSA 5 3741 is a AP CSA 5 3742 is a AP CSA 5 3743 is a AP CSA 5 3744 is a AP CSA 5 3745 is a AP CSA 5 3746 is a AP CSA 5 3747 is a AP CSA 5 3748 is a AP CSA 5 3749 is a AP CSA 5 3750 is a AP CSA 5 3751 is a AP CSA 5 3752 is a AP CSA 5 3753 is a AP CSA 5 3754 is a AP CSA 5 3755 is a AP CSA 5 3756 is a AP CSA 5 3757 is a AP CSA 5 3758 is a AP CSA 5 3759 is a AP CSA 5 3760 is a AP CSA 5 3761 is a AP CSA 5 3762 is a AP CSA 5 3763 is a AP CSA 5 3764 is a AP CSA 5 3765 is a AP CSA 5 3766 is a AP CSA 5 3767 is a AP CSA 5 3768 is a AP CSA 5 3769 is a AP CSA 5 3770 is a AP CSA 5 3771 is a AP CSA 5 3772 is a AP CSA 5 3773 is a AP CSA 5 3774 is a AP CSA 5 3775 is a AP CSA 5 3776 is a AP CSA 5 3777 is a AP CSA 5 3778 is a AP CSA 5 3779 is a AP CSA 5 3780 is a AP CSA 5 3781 is a AP CSA 5 3782 is a AP CSA 5 3783 is a AP CSA 5 3784 is a AP CSA 5 3785 is a AP CSA 5 3786 is a AP CSA 5 3787 is a AP CSA 5 3788 is a AP CSA 5 3789 is a AP CSA 5 3790 is a AP CSA 5 3791 is a AP CSA 5 3792 is a AP CSA 5 3793 is a AP CSA 5 3794 is a AP CSA 5 3795 is a AP CSA 5 3796 is a AP CSA 5 3797 is a AP CSA 5 3798 is a AP CSA 5 3799 is a AP CSA 5 3800 is a AP CSA 5 3801 is a AP CSA 5 3802 is a AP CSA 5 3803 is a AP CSA 5 3804 is a AP CSA 5 3805 is a AP CSA 5 3806 is a AP CSA 5 3807 is a AP CSA 5 3808 is a AP CSA 5 3809 is a AP CSA 5 3810 is a AP CSA 5 3811 is a AP CSA 5 3812 is a AP CSA 5 3813 is a AP CSA 5 3814 is a AP CSA 5 3815 is a AP CSA 5 3816 is a AP CSA 5 3817 is a AP CSA 5 3818 is a AP CSA 5 3819 is a AP CSA 5 3820 is a AP CSA 5 3821 is a AP CSA 5 3822 is a AP CSA 5 3823 is a AP CSA 5 3824 is a AP CSA 5 3825 is a AP CSA 5 3826 is a AP CSA 5 3827 is a AP CSA 5 3828 is a AP CSA 5 3829 is a AP CSA 5 3830 is a AP CSA 5 3831 is a AP CSA 5 3832 is a AP CSA 5 3833 is a AP CSA 5 3834 is a AP CSA 5 3835 is a AP CSA 5 3836 is a AP CSA 5 3837 is a AP CSA 5 3838 is a AP CSA 5 3839 is a AP CSA 5 3840 is a AP CSA 5 3841 is a AP CSA 5 3842 is a AP CSA 5 3843 is a AP CSA 5 3844 is a AP CSA 5 3845 is a AP CSA 5 3846 is a AP CSA 5 3847 is a AP CSA 5 3848 is a AP CSA 5 3849 is a AP CSA 5 3850 is a AP CSA 5 3851 is a AP CSA 5 3852 is a AP CSA 5 3853 is a AP CSA 5 3854 is a AP CSA 5 3855 is a AP CSA 5 3856 is a AP CSA 5 3857 is a AP CSA 5 3858 is a AP CSA 5 3859 is a AP CSA 5 3860 is a AP CSA 5 3861 is a AP CSA 5 3862 is a AP CSA 5 3863 is a AP CSA 5 3864 is a AP CSA 5 3865 is a AP CSA 5 3866 is a AP CSA 5 3867 is a AP CSA 5 3868 is a AP CSA 5 3869 is a AP CSA 5 3870 is a AP CSA 5 3871 is a AP CSA 5 3872 is a AP CSA 5 3873 is a AP CSA 5 3874 is a AP CSA 5 3875 is a AP CSA 5 3876 is a AP CSA 5 3877 is a AP CSA 5 3878 is a AP CSA 5 3879 is a AP CSA 5 3880 is a AP CSA 5 3881 is a AP CSA 5 3882 is a AP CSA 5 3883 is a AP CSA 5 3884 is a AP CSA 5 3885 is a AP CSA 5 3886 is a AP CSA 5 3887 is a AP CSA 5 3888 is a AP CSA 5 3889 is a AP CSA 5 3890 is a AP CSA 5 3891 is a AP CSA 5 3892 is a AP CSA 5 3893 is a AP CSA 5 3894 is a AP CSA 5 3895 is a AP CSA 5 3896 is a AP CSA 5 3897 is a AP CSA 5 3898 is a AP CSA 5 3899 is a AP CSA 5 3900 is a AP CSA 5 3901 is a AP CSA 5 3902 is a AP CSA 5 3903 is a AP CSA 5 3904 is a AP CSA 5 3905 is a AP CSA 5 3906 is a AP CSA 5 3907 is a AP CSA 5 3908 is a AP CSA 5 3909 is a AP CSA 5 3910 is a AP CSA 5 3911 is a AP CSA 5 3912 is a AP CSA 5 3913 is a AP CSA 5 3914 is a AP CSA 5 3915 is a AP CSA 5 3916 is a AP CSA 5 3917 is a AP CSA 5 3918 is a AP CSA 5 3919 is a AP CSA 5 3920 is a AP CSA 5 3921 is a AP CSA 5 3922 is a AP CSA 5 3923 is a AP CSA 5 3924 is a AP CSA 5 3925 is a AP CSA 5 3926 is a AP CSA 5 3927 is a AP CSA 5 3928 is a AP CSA 5 3929 is a AP CSA 5 3930 is a AP CSA 5 3931 is a AP CSA 5 3932 is a AP CSA 5 3933 is a AP CSA 5 3934 is a AP CSA 5 3935 is a AP CSA 5 3936 is a AP CSA 5 3937 is a AP CSA 5 3938 is a AP CSA 5 3939 is a AP CSA 5 3940 is a AP CSA 5 3941 is a AP CSA 5 3942 is a AP CSA 5 3943 is a AP CSA 5 3944 is a AP CSA 5 3945 is a AP CSA 5 3946 is a AP CSA 5 3947 is a AP CSA 5 3948 is a AP CSA 5 3949 is a AP CSA 5 3950 is a AP CSA 5 3951 is a AP CSA 5 3952 is a AP CSA 5 3953 is a AP CSA 5 3954 is a AP CSA 5 3955 is a AP CSA 5 3956 is a AP CSA 5 3957 is a AP CSA 5 3958 is a AP CSA 5 3959 is a AP CSA 5 3960 is a AP CSA 5 3961 is a AP CSA 5 3962 is a AP CSA 5 3963 is a AP CSA 5 3964 is a AP CSA 5 3965 is a AP CSA 5 3966 is a AP CSA 5 3967 is a AP CSA 5 3968 is a AP CSA 5 3969 is a AP CSA 5 3970 is a AP CSA 5 3971 is a AP CSA 5 3972 is a AP CSA 5 3973 is a AP CSA 5 3974 is a AP CSA 5 3975 is a AP CSA 5 3976 is a AP CSA 5 3977 is a AP CSA 5 3978 is a AP CSA 5 3979 is a AP CSA 5 3980 is a AP CSA 5 3981 is a AP CSA 5 3982 is a AP CSA 5 3983 is a AP CSA 5 3984 is a AP CSA 5 3985 is a AP CSA 5 3986 is a AP CSA 5 3987 is a AP CSA 5 3988 is a AP CSA 5 3989 is a AP CSA 5 3990 is a AP CSA 5 3991 is a AP CSA 5 3992 is a AP CSA 5 3993 is a AP CSA 5 3994 is a AP CSA 5 3995 is a AP CSA 5 3996 is a AP CSA 5 3997 is a AP CSA 5 3998 is a AP CSA 5 3999 is a AP CSA 5 4000 is a AP CSA 5 4001 is a AP CSA 5 4002 is a AP CSA 5 4003 is a AP CSA 5 4004 is a AP CSA 5 4005 is a AP CSA 5 4006 is a AP CSA 5 4007 is a AP CSA 5 4008 is a AP CSA 5 4009 is a AP CSA 5 4010 is a AP CSA 5 4011 is a AP CSA 5 4012 is a AP CSA 5 4013 is a AP CSA 5 4014 is a AP CSA 5 4015 is a AP CSA 5 4016 is a AP CSA 5 4017 is a AP CSA 5 4018 is a AP CSA 5 4019 is a AP CSA 5 4020 is a AP CSA 5 4021 is a AP CSA 5 4022 is a AP CSA 5 4023 is a AP CSA 5 4024 is a AP CSA 5 4025 is a AP CSA 5 4026 is a AP CSA 5 4027 is a AP CSA 5 4028 is a AP CSA 5 4029 is a AP CSA 5 4030 is a AP CSA 5 4031 is a AP CSA 5 4032 is a AP CSA 5 4033 is a AP CSA 5 4034 is a AP CSA 5 4035 is a AP CSA 5 4036 is a AP CSA 5 4037 is a AP CSA 5 4038 is a AP CSA 5 4039 is a AP CSA 5 4040 is a AP CSA 5 4041 is a AP CSA 5 4042 is a AP CSA 5 4043 is a AP CSA 5 4044 is a AP CSA 5 4045 is a AP CSA 5 4046 is a AP CSA 5 4047 is a AP CSA 5 4048 is a AP CSA 5 4049 is a AP CSA 5 4050 is a AP CSA 5 4051 is a AP CSA 5 4052 is a AP CSA 5 4053 is a AP CSA 5 4054 is a AP CSA 5 4055 is a AP CSA 5 4056 is a AP CSA 5 4057 is a AP CSA 5 4058 is a AP CSA 5 4059 is a AP CSA 5 4060 is a AP CSA 5 4061 is a AP CSA 5 4062 is a AP CSA 5 4063 is a AP CSA 5 4064 is a AP CSA 5 4065 is a AP CSA 5 4066 is a AP CSA 5 4067 is a AP CSA 5 4068 is a AP CSA 5 4069 is a AP CSA 5 4070 is a AP CSA 5 4071 is a AP CSA 5 4072 is a AP CSA 5 4073 is a AP CSA 5 4074 is a AP CSA 5 4075 is a AP CSA 5 4076 is a AP CSA 5 4077 is a AP CSA 5 4078 is a AP CSA 5 4079 is a AP CSA 5 4080 is a AP CSA 5 4081 is a AP CSA 5 4082 is a AP CSA 5 4083 is a AP CSA 5 4084 is a AP CSA 5 4085 is a AP CSA 5 4086 is a AP CSA 5 4087 is a AP CSA 5 4088 is a AP CSA 5 4089 is a AP CSA 5 4090 is a AP CSA 5 4091 is a AP CSA 5 4092 is a AP CSA 5 4093 is a AP CSA 5 4094 is a AP CSA 5 4095 is a AP CSA 5 4096 is a AP CSA 5 4097 is a AP CSA 5 4098 is a AP CSA 5 4099 is a AP CSA 5 4100 is a AP CSA 5 4101 is a AP CSA 5 4102 is a AP CSA 5 4103 is a AP CSA 5 4104 is a AP CSA 5 4105 is a AP CSA 5 4106 is a AP CSA 5 4107 is a AP CSA 5 4108 is a AP CSA 5 4109 is a AP CSA 5 4110 is a AP CSA 5 4111 is a AP CSA 5 4112 is a AP CSA 5 4113 is a AP CSA 5 4114 is a AP CSA 5 4115 is a AP CSA 5 4116 is a AP CSA 5 4117 is a AP CSA 5 4118 is a AP CSA 5 4119 is a AP CSA 5 4120 is a AP CSA 5 4121 is a AP CSA 5 4122 is a AP CSA 5 4123 is a AP CSA 5 4124 is a AP CSA 5 4125 is a AP CSA 5 4126 is a AP CSA 5 4127 is a AP CSA 5 4128 is a AP CSA 5 4129 is a AP CSA 5 4130 is a AP CSA 5 4131 is a AP CSA 5 4132 is a AP CSA 5 4133 is a AP CSA 5 4134 is a AP CSA 5 4135 is a AP CSA 5 4136 is a AP CSA 5 4137 is a AP CSA 5 4138 is a AP CSA 5 4139 is a AP CSA 5 4140 is a AP CSA 5 4141 is a AP CSA 5 4142 is a AP CSA 5 4143 is a AP CSA 5 4144 is a AP CSA 5 4145 is a AP CSA 5 4146 is a AP CSA 5 4147 is a AP CSA 5 4148 is a AP CSA 5 4149 is a AP CSA 5 4150 is a AP CSA 5 4151 is a AP CSA 5 4152 is a AP CSA 5 4153 is a AP CSA 5 4154 is a AP CSA 5 4155 is a AP CSA 5 4156 is a AP CSA 5 4157 is a AP CSA 5 4158 is a AP CSA 5 4159 is a AP CSA 5 4160 is a AP CSA 5 4161 is a AP CSA 5 4162 is a AP CSA 5 4163 is a AP CSA 5 4164 is a AP CSA 5 4165 is a AP CSA 5 4166 is a AP CSA 5 4167 is a AP CSA 5 4168 is a AP CSA 5 4169 is a AP CSA 5 4170 is a AP CSA 5 4171 is a AP CSA 5 4172 is a AP CSA 5 4173 is a AP CSA 5 4174 is a AP CSA 5 4175 is a AP CSA 5 4176 is a AP CSA 5 4177 is a AP CSA 5 4178 is a AP CSA 5 4179 is a AP CSA 5 4180 is a AP CSA 5 4181 is a AP CSA 5 4182 is a AP CSA 5 4183 is a AP CSA 5 4184 is a AP CSA 5 4185 is a AP CSA 5 4186 is a AP CSA 5 4187 is a AP CSA 5 4188 is a AP CSA 5 4189 is a AP CSA 5 4190 is a AP CSA 5 4191 is a AP CSA 5 4192 is a AP CSA 5 4193 is a AP CSA 5 4194 is a AP CSA 5 4195 is a AP CSA 5 4196 is a AP CSA 5 4197 is a AP CSA 5 4198 is a AP CSA 5 4199 is a AP CSA 5 4200 is a AP CSA 5 4201 is a AP CSA 5 4202 is a AP CSA 5 4203 is a AP CSA 5 4204 is a AP CSA 5 4205 is a AP CSA 5 4206 is a AP CSA 5 4207 is a AP CSA 5 4208 is a AP CSA 5 4209 is a AP CSA 5 4210 is a AP CSA 5 4211 is a AP CSA 5 4212 is a AP CSA 5 4213 is a AP CSA 5 4214 is a AP CSA 5 4215 is a AP CSA 5 4216 is a AP CSA 5 4217 is a AP CSA 5 4218 is a AP CSA 5 4219 is a AP CSA 5 4220 is a AP CSA 5 4221 is a AP CSA 5 4222 is a AP CSA 5 4223 is a AP CSA 5 4224 is a AP CSA 5 4225 is a AP CSA 5 4226 is a AP CSA 5 4227 is a AP CSA 5 4228 is a AP CSA 5 4229 is a AP CSA 5 4230 is a AP CSA 5 4231 is a AP CSA 5 4232 is a AP CSA 5 4233 is a AP CSA 5 4234 is a AP CSA 5 4235 is a AP CSA 5 4236 is a AP CSA 5 4237 is a AP CSA 5 4238 is a AP CSA 5 4239 is a AP CSA 5 4240 is a AP CSA 5 4241 is a AP CSA 5 4242 is a AP CSA 5 4243 is a AP CSA 5 4244 is a AP CSA 5 4245 is a AP CSA 5 4246 is a AP CSA 5 4247 is a AP CSA 5 4248 is a AP CSA 5 4249 is a AP CSA 5 4250 is a AP CSA 5 4251 is a AP CSA 5 4252 is a AP CSA 5 4253 is a AP CSA 5 4254 is a AP CSA 5 4255 is a AP CSA 5 4256 is a AP CSA 5 4257 is a AP CSA 5 4258 is a AP CSA 5 4259 is a AP CSA 5 4260 is a AP CSA 5 4261 is a AP CSA 5 4262 is a AP CSA 5 4263 is a AP CSA 5 4264 is a AP CSA 5 4265 is a AP CSA 5 4266 is a AP CSA 5 4267 is a AP CSA 5 4268 is a AP CSA 5 4269 is a AP CSA 5 4270 is a AP CSA 5 4271 is a AP CSA 5 4272 is a AP CSA 5 4273 is a AP CSA 5 4274 is a AP CSA 5 4275 is a AP CSA 5 4276 is a AP CSA 5 4277 is a AP CSA 5 4278 is a AP CSA 5 4279 is a AP CSA 5 4280 is a AP CSA 5 4281 is a AP CSA 5 4282 is a AP CSA 5 4283 is a AP CSA 5 4284 is a AP CSA 5 4285 is a AP CSA 5 4286 is a AP CSA 5 4287 is a AP CSA 5 4288 is a AP CSA 5 4289 is a AP CSA 5 4290 is a AP CSA 5 4291 is a AP CSA 5 4292 is a AP CSA 5 4293 is a AP CSA 5 4294 is a AP CSA 5 4295 is a AP CSA 5 4296 is a AP CSA 5 4297 is a AP CSA 5 4298 is a AP CSA 5 4299 is a AP CSA 5 4300 is a AP CSA 5 4301 is a AP CSA 5 4302 is a AP CSA 5 4303 is a AP CSA 5 4304 is a AP CSA 5 4305 is a AP CSA 5 4306 is a AP CSA 5 4307 is a AP CSA 5 4308 is a AP CSA 5 4309 is a AP CSA 5 4310 is a AP CSA 5 4311 is a AP CSA 5 4312 is a AP CSA 5 4313 is a AP CSA 5 4314 is a AP CSA 5 4315 is a AP CSA 5 4316 is a AP CSA 5 4317 is a AP CSA 5 4318 is a AP CSA 5 4319 is a AP CSA 5 4320 is a AP CSA 5 4321 is a AP CSA 5 4322 is a AP CSA 5 4323 is a AP CSA 5 4324 is a AP CSA 5 4325 is a AP CSA 5 4326 is a AP CSA 5 4327 is a AP CSA 5 4328 is a AP CSA 5 4329 is a AP CSA 5 4330 is a AP CSA 5 4331 is a AP CSA 5 4332 is a AP CSA 5 4333 is a AP CSA 5 4334 is a AP CSA 5 4335 is a AP CSA 5 4336 is a AP CSA 5 4337 is a AP CSA 5 4338 is a AP CSA 5 4339 is a AP CSA 5 4340 is a AP CSA 5 4341 is a AP CSA 5 4342 is a AP CSA 5 4343 is a AP CSA 5 4344 is a AP CSA 5 4345 is a AP CSA 5 4346 is a AP CSA 5 4347 is a AP CSA 5 4348 is a AP CSA 5 4349 is a AP CSA 5 4350 is a AP CSA 5 4351 is a AP CSA 5 4352 is a AP CSA 5 4353 is a AP CSA 5 4354 is a AP CSA 5 4355 is a AP CSA 5 4356 is a AP CSA 5 4357 is a AP CSA 5 4358 is a AP CSA 5 4359 is a AP CSA 5 4360 is a AP CSA 5 4361 is a AP CSA 5 4362 is a AP CSA 5 4363 is a AP CSA 5 4364 is a AP CSA 5 4365 is a AP CSA 5 4366 is a AP CSA 5 4367 is a AP CSA 5 4368 is a AP CSA 5 4369 is a AP CSA 5 4370 is a AP CSA 5 4371 is a AP CSA 5 4372 is a AP CSA 5 4373 is a AP CSA 5 4374 is a AP CSA 5 4375 is a AP CSA 5 4376 is a AP CSA 5 4377 is a AP CSA 5 4378 is a AP CSA 5 4379 is a AP CSA 5 4380 is a AP CSA 5 4381 is a AP CSA 5 4382 is a AP CSA 5 4383 is a AP CSA 5 4384 is a AP CSA 5 4385 is a AP CSA 5 4386 is a AP CSA 5 4387 is a AP CSA 5 4388 is a AP CSA 5 4389 is a AP CSA 5 4390 is a AP CSA 5 4391 is a AP CSA 5 4392 is a AP CSA 5 4393 is a AP CSA 5 4394 is a AP CSA 5 4395 is a AP CSA 5 4396 is a AP CSA 5 4397 is a AP CSA 5 4398 is a AP CSA 5 4399 is a AP CSA 5 4400 is a AP CSA 5 4401 is a AP CSA 5 4402 is a AP CSA 5 4403 is a AP CSA 5 4404 is a AP CSA 5 4405 is a AP CSA 5 4406 is a AP CSA 5 4407 is a AP CSA 5 4408 is a AP CSA 5 4409 is a AP CSA 5 4410 is a AP CSA 5 4411 is a AP CSA 5 4412 is a AP CSA 5 4413 is a AP CSA 5 4414 is a AP CSA 5 4415 is a AP CSA 5 4416 is a AP CSA 5 4417 is a AP CSA 5 4418 is a AP CSA 5 4419 is a AP CSA 5 4420 is a AP CSA 5 4421 is a AP CSA 5 4422 is a AP CSA 5 4423 is a AP CSA 5 4424 is a AP CSA 5 4425 is a AP CSA 5 4426 is a AP CSA 5 4427 is a AP CSA 5 4428 is a AP CSA 5 4429 is a AP CSA 5 4430 is a AP CSA 5 4431 is a AP CSA 5 4432 is a AP CSA 5 4433 is a AP CSA 5 4434 is a AP CSA 5 4435 is a AP CSA 5 4436 is a AP CSA 5 4437 is a AP CSA 5 4438 is a AP CSA 5 4439 is a AP CSA 5 4440 is a AP CSA 5 4441 is a AP CSA 5 4442 is a AP CSA 5 4443 is a AP CSA 5 4444 is a AP CSA 5 4445 is a AP CSA 5 4446 is a AP CSA 5 4447 is a AP CSA 5 4448 is a AP CSA 5 4449 is a AP CSA 5 4450 is a AP CSA 5 4451 is a AP CSA 5 4452 is a AP CSA 5 4453 is a AP CSA 5 4454 is a AP CSA 5 4455 is a AP CSA 5 4456 is a AP CSA 5 4457 is a AP CSA 5 4458 is a AP CSA 5 4459 is a AP CSA 5 4460 is a AP CSA 5 4461 is a AP CSA 5 4462 is a AP CSA 5 4463 is a AP CSA 5 4464 is a AP CSA 5 4465 is a AP CSA 5 4466 is a AP CSA 5 4467 is a AP CSA 5 4468 is a AP CSA 5 4469 is a AP CSA 5 4470 is a AP CSA 5 4471 is a AP CSA 5 4472 is a AP CSA 5 4473 is a AP CSA 5 4474 is a AP CSA 5 4475 is a AP CSA 5 4476 is a AP CSA 5 4477 is a AP CSA 5 4478 is a AP CSA 5 4479 is a AP CSA 5 4480 is a AP CSA 5 4481 is a AP CSA 5 4482 is a AP CSA 5 4483 is a AP CSA 5 4484 is a AP CSA 5 4485 is a AP CSA 5 4486 is a AP CSA 5 4487 is a AP CSA 5 4488 is a AP CSA 5 4489 is a AP CSA 5 4490 is a AP CSA 5 4491 is a AP CSA 5 4492 is a AP CSA 5 4493 is a AP CSA 5 4494 is a AP CSA 5 4495 is a AP CSA 5 4496 is a AP CSA 5 4497 is a AP CSA 5 4498 is a AP CSA 5 4499 is a AP CSA 5 4500 is a AP CSA 5 4501 is a AP CSA 5 4502 is a AP CSA 5 4503 is a AP CSA 5 4504 is a AP CSA 5 4505 is a AP CSA 5 4506 is a AP CSA 5 4507 is a AP CSA 5 4508 is a AP CSA 5 4509 is a AP CSA 5 4510 is a AP CSA 5 4511 is a AP CSA 5 4512 is a AP CSA 5 4513 is a AP CSA 5 4514 is a AP CSA 5 4515 is a AP CSA 5 4516 is a AP CSA 5 4517 is a AP CSA 5 4518 is a AP CSA 5 4519 is a AP CSA 5 4520 is a AP CSA 5 4521 is a AP CSA 5 4522 is a AP CSA 5 4523 is a AP CSA 5 4524 is a AP CSA 5 4525 is a AP CSA 5 4526 is a AP CSA 5 4527 is a AP CSA 5 4528 is a AP CSA 5 4529 is a AP CSA 5 4530 is a AP CSA 5 4531 is a AP CSA 5 4532 is a AP CSA 5 4533 is a AP CSA 5 4534 is a AP CSA 5 4535 is a AP CSA 5 4536 is a AP CSA 5 4537 is a AP CSA 5 4538 is a AP CSA 5 4539 is a AP CSA 5 4540 is a AP CSA 5 4541 is a AP CSA 5 4542 is a AP CSA 5 4543 is a AP CSA 5 4544 is a AP CSA 5 4545 is a AP CSA 5 4546 is a AP CSA 5 4547 is a AP CSA 5 4548 is a AP CSA 5 4549 is a AP CSA 5 4550 is a AP CSA 5 4551 is a AP CSA 5 4552 is a AP CSA 5 4553 is a AP CSA 5 4554 is a AP CSA 5 4555 is a AP CSA 5 4556 is a AP CSA 5 4557 is a AP CSA 5 4558 is a AP CSA 5 4559 is a AP CSA 5 4560 is a AP CSA 5 4561 is a AP CSA 5 4562 is a AP CSA 5 4563 is a AP CSA 5 4564 is a AP CSA 5 4565 is a AP CSA 5 4566 is a AP CSA 5 4567 is a AP CSA 5 4568 is a AP CSA 5 4569 is a AP CSA 5 4570 is a AP CSA 5 4571 is a AP CSA 5 4572 is a AP CSA 5 4573 is a AP CSA 5 4574 is a AP CSA 5 4575 is a AP CSA 5 4576 is a AP CSA 5 4577 is a AP CSA 5 4578 is a AP CSA 5 4579 is a AP CSA 5 4580 is a AP CSA 5 4581 is a AP CSA 5 4582 is a AP CSA 5 4583 is a AP CSA 5 4584 is a AP CSA 5 4585 is a AP CSA 5 4586 is a AP CSA 5 4587 is a AP CSA 5 4588 is a AP CSA 5 4589 is a AP CSA 5 4590 is a AP CSA 5 4591 is a AP CSA 5 4592 is a AP CSA 5 4593 is a AP CSA 5 4594 is a AP CSA 5 4595 is a AP CSA 5 4596 is a AP CSA 5 4597 is a AP CSA 5 4598 is a AP CSA 5 4599 is a AP CSA 5 4600 is a AP CSA 5 4601 is a AP CSA 5 4602 is a AP CSA 5 4603 is a AP CSA 5 4604 is a AP CSA 5 4605 is a AP CSA 5 4606 is a AP CSA 5 4607 is a AP CSA 5 4608 is a AP CSA 5 4609 is a AP CSA 5 4610 is a AP CSA 5 4611 is a AP CSA 5 4612 is a AP CSA 5 4613 is a AP CSA 5 4614 is a AP CSA 5 4615 is a AP CSA 5 4616 is a AP CSA 5 4617 is a AP CSA 5 4618 is a AP CSA 5 4619 is a AP CSA 5 4620 is a AP CSA 5 4621 is a AP CSA 5 4622 is a AP CSA 5 4623 is a AP CSA 5 4624 is a AP CSA 5 4625 is a AP CSA 5 4626 is a AP CSA 5 4627 is a AP CSA 5 4628 is a AP CSA 5 4629 is a AP CSA 5 4630 is a AP CSA 5 4631 is a AP CSA 5 4632 is a AP CSA 5 4633 is a AP CSA 5 4634 is a AP CSA 5 4635 is a AP CSA 5 4636 is a AP CSA 5 4637 is a AP CSA 5 4638 is a AP CSA 5 4639 is a AP CSA 5 4640 is a AP CSA 5 4641 is a AP CSA 5 4642 is a AP CSA 5 4643 is a AP CSA 5 4644 is a AP CSA 5 4645 is a AP CSA 5 4646 is a AP CSA 5 4647 is a AP CSA 5 4648 is a AP CSA 5 4649 is a AP CSA 5 4650 is a AP CSA 5 4651 is a AP CSA 5 4652 is a AP CSA 5 4653 is a AP CSA 5 4654 is a AP CSA 5 4655 is a AP CSA 5 4656 is a AP CSA 5 4657 is a AP CSA 5 4658 is a AP CSA 5 4659 is a AP CSA 5 4660 is a AP CSA 5 4661 is a AP CSA 5 4662 is a AP CSA 5 4663 is a AP CSA 5 4664 is a AP CSA 5 4665 is a AP CSA 5 4666 is a AP CSA 5 4667 is a AP CSA 5 4668 is a AP CSA 5 4669 is a AP CSA 5 4670 is a AP CSA 5 4671 is a AP CSA 5 4672 is a AP CSA 5 4673 is a AP CSA 5 4674 is a AP CSA 5 4675 is a AP CSA 5 4676 is a AP CSA 5 4677 is a AP CSA 5 4678 is a AP CSA 5 4679 is a AP CSA 5 4680 is a AP CSA 5 4681 is a AP CSA 5 4682 is a AP CSA 5 4683 is a AP CSA 5 4684 is a AP CSA 5 4685 is a AP CSA 5 4686 is a AP CSA 5 4687 is a AP CSA 5 4688 is a AP CSA 5 4689 is a AP CSA 5 4690 is a AP CSA 5 4691 is a AP CSA 5 4692 is a AP CSA 5 4693 is a AP CSA 5 4694 is a AP CSA 5 4695 is a AP CSA 5 4696 is a AP CSA 5 4697 is a AP CSA 5 4698 is a AP CSA 5 4699 is a AP CSA 5 4700 is a AP CSA 5 4701 is a AP CSA 5 4702 is a AP CSA 5 4703 is a AP CSA 5 4704 is a AP CSA 5 4705 is a AP CSA 5 4706 is a AP CSA 5 4707 is a AP CSA 5 4708 is a AP CSA 5 4709 is a AP CSA 5 4710 is a AP CSA 5 4711 is a AP CSA 5 4712 is a AP CSA 5 4713 is a AP CSA 5 4714 is a AP CSA 5 4715 is a AP CSA 5 4716 is a AP CSA 5 4717 is a AP CSA 5 4718 is a AP CSA 5 4719 is a AP CSA 5 4720 is a AP CSA 5 4721 is a AP CSA 5 4722 is a AP CSA 5 4723 is a AP CSA 5 4724 is a AP CSA 5 4725 is a AP CSA 5 4726 is a AP CSA 5 4727 is a AP CSA 5 4728 is a AP CSA 5 4729 is a AP CSA 5 4730 is a AP CSA 5 4731 is a AP CSA 5 4732 is a AP CSA 5 4733 is a AP CSA 5 4734 is a AP CSA 5 4735 is a AP CSA 5 4736 is a AP CSA 5 4737 is a AP CSA 5 4738 is a AP CSA 5 4739 is a AP CSA 5 4740 is a AP CSA 5 4741 is a AP CSA 5 4742 is a AP CSA 5 4743 is a AP CSA 5 4744 is a AP CSA 5 4745 is a AP CSA 5 4746 is a AP CSA 5 4747 is a AP CSA 5 4748 is a AP CSA 5 4749 is a AP CSA 5 4750 is a AP CSA 5 4751 is a AP CSA 5 4752 is a AP CSA 5 4753 is a AP CSA 5 4754 is a AP CSA 5 4755 is a AP CSA 5 4756 is a AP CSA 5 4757 is a AP CSA 5 4758 is a AP CSA 5 4759 is a AP CSA 5 4760 is a AP CSA 5 4761 is a AP CSA 5 4762 is a AP CSA 5 4763 is a AP CSA 5 4764 is a AP CSA 5 4765 is a AP CSA 5 4766 is a AP CSA 5 4767 is a AP CSA 5 4768 is a AP CSA 5 4769 is a AP CSA 5 4770 is a AP CSA 5 4771 is a AP CSA 5 4772 is a AP CSA 5 4773 is a AP CSA 5 4774 is a AP CSA 5 4775 is a AP CSA 5 4776 is a AP CSA 5 4777 is a AP CSA 5 4778 is a AP CSA 5 4779 is a AP CSA 5 4780 is a AP CSA 5 4781 is a AP CSA 5 4782 is a AP CSA 5 4783 is a AP CSA 5 4784 is a AP CSA 5 4785 is a AP CSA 5 4786 is a AP CSA 5 4787 is a AP CSA 5 4788 is a AP CSA 5 4789 is a AP CSA 5 4790 is a AP CSA 5 4791 is a AP CSA 5 4792 is a AP CSA 5 4793 is a AP CSA 5 4794 is a AP CSA 5 4795 is a AP CSA 5 4796 is a AP CSA 5 4797 is a AP CSA 5 4798 is a AP CSA 5 4799 is a AP CSA 5 4800 is a AP CSA 5 4801 is a AP CSA 5 4802 is a AP CSA 5 4803 is a AP CSA 5 4804 is a AP CSA 5 4805 is a AP CSA 5 4806 is a AP CSA 5 4807 is a AP CSA 5 4808 is a AP CSA 5 4809 is a AP CSA 5 4810 is a AP CSA 5 4811 is a AP CSA 5 4812 is a AP CSA 5 4813 is a AP CSA 5 4814 is a AP CSA 5 4815 is a AP CSA 5 4816 is a AP CSA 5 4817 is a AP CSA 5 4818 is a AP CSA 5 4819 is a AP CSA 5 4820 is a AP CSA 5 4821 is a AP CSA 5 4822 is a AP CSA 5 4823 is a AP CSA 5 4824 is a AP CSA 5 4825 is a AP CSA 5 4826 is a AP CSA 5 4827 is a AP CSA 5 4828 is a AP CSA 5 4829 is a AP CSA 5 4830 is a AP CSA 5 4831 is a AP CSA 5 4832 is a AP CSA 5 4833 is a AP CSA 5 4834 is a AP CSA 5 4835 is a AP CSA 5 4836 is a AP CSA 5 4837 is a AP CSA 5 4838 is a AP CSA 5 4839 is a AP CSA 5 4840 is a AP CSA 5 4841 is a AP CSA 5 4842 is a AP CSA 5 4843 is a AP CSA 5 4844 is a AP CSA 5 4845 is a AP CSA 5 4846 is a AP CSA 5 4847 is a AP CSA 5 4848 is a AP CSA 5 4849 is a AP CSA 5 4850 is a AP CSA 5 4851 is a AP CSA 5 4852 is a AP CSA 5 4853 is a AP CSA 5 4854 is a AP CSA 5 4855 is a AP CSA 5 4856 is a AP CSA 5 4857 is a AP CSA 5 4858 is a AP CSA 5 4859 is a AP CSA 5 4860 is a AP CSA 5 4861 is a AP CSA 5 4862 is a AP CSA 5 4863 is a AP CSA 5 4864 is a AP CSA 5 4865 is a AP CSA 5 4866 is a AP CSA 5 4867 is a AP CSA 5 4868 is a AP CSA 5 4869 is a AP CSA 5 4870 is a AP CSA 5 4871 is a AP CSA 5 4872 is a AP CSA 5 4873 is a AP CSA 5 4874 is a AP CSA 5 4875 is a AP CSA 5 4876 is a AP CSA 5 4877 is a AP CSA 5 4878 is a AP CSA 5 4879 is a AP CSA 5 4880 is a AP CSA 5 4881 is a AP CSA 5 4882 is a AP CSA 5 4883 is a AP CSA 5 4884 is a AP CSA 5 4885 is a AP CSA 5 4886 is a AP CSA 5 4887 is a AP CSA 5 4888 is a AP CSA 5 4889 is a AP CSA 5 4890 is a AP CSA 5 4891 is a AP CSA 5 4892 is a AP CSA 5 4893 is a AP CSA 5 4894 is a AP CSA 5 4895 is a AP CSA 5 4896 is a AP CSA 5 4897 is a AP CSA 5 4898 is a AP CSA 5 4899 is a AP CSA 5 4900 is a AP CSA 5 4901 is a AP CSA 5 4902 is a AP CSA 5 4903 is a AP CSA 5 4904 is a AP CSA 5 4905 is a AP CSA 5 4906 is a AP CSA 5 4907 is a AP CSA 5 4908 is a AP CSA 5 4909 is a AP CSA 5 4910 is a AP CSA 5 4911 is a AP CSA 5 4912 is a AP CSA 5 4913 is a AP CSA 5 4914 is a AP CSA 5 4915 is a AP CSA 5 4916 is a AP CSA 5 4917 is a AP CSA 5 4918 is a AP CSA 5 4919 is a AP CSA 5 4920 is a AP CSA 5 4921 is a AP CSA 5 4922 is a AP CSA 5 4923 is a AP CSA 5 4924 is a AP CSA 5 4925 is a AP CSA 5 4926 is a AP CSA 5 4927 is a AP CSA 5 4928 is a AP CSA 5 4929 is a AP CSA 5 4930 is a AP CSA 5 4931 is a AP CSA 5 4932 is a AP CSA 5 4933 is a AP CSA 5 4934 is a AP CSA 5 4935 is a AP CSA 5 4936 is a AP CSA 5 4937 is a AP CSA 5 4938 is a AP CSA 5 4939 is a AP CSA 5 4940 is a AP CSA 5 4941 is a AP CSA 5 4942 is a AP CSA 5 4943 is a AP CSA 5 4944 is a AP CSA 5 4945 is a AP CSA 5 4946 is a AP CSA 5 4947 is a AP CSA 5 4948 is a AP CSA 5 4949 is a AP CSA 5 4950 is a AP CSA 5 4951 is a AP CSA 5 4952 is a AP CSA 5 4953 is a AP CSA 5 4954 is a AP CSA 5 4955 is a AP CSA 5 4956 is a AP CSA 5 4957 is a AP CSA 5 4958 is a AP CSA 5 4959 is a AP CSA 5 4960 is a AP CSA 5 4961 is a AP CSA 5 4962 is a AP CSA 5 4963 is a AP CSA 5 4964 is a AP CSA 5 4965 is a AP CSA 5 4966 is a AP CSA 5 4967 is a AP CSA 5 4968 is a AP CSA 5 4969 is a AP CSA 5 4970 is a AP CSA 5 4971 is a AP CSA 5 4972 is a AP CSA 5 4973 is a AP CSA 5 4974 is a AP CSA 5 4975 is a AP CSA 5 4976 is a AP CSA 5 4977 is a AP CSA 5 4978 is a AP CSA 5 4979 is a AP CSA 5 4980 is a AP CSA 5 4981 is a AP CSA 5 4982 is a AP CSA 5 4983 is a AP CSA 5 4984 is a AP CSA 5 4985 is a AP CSA 5 4986 is a AP CSA 5 4987 is a AP CSA 5 4988 is a AP CSA 5 4989 is a AP CSA 5 4990 is a AP CSA 5 4991 is a AP CSA 5 4992 is a AP CSA 5 4993 is a AP CSA 5 4994 is a AP CSA 5 4995 is a AP CSA 5 4996 is a AP CSA 5 4997 is a AP CSA 5 4998 is a AP CSA 5 4999 is a AP CSA 5 .",
            "url": "https://lwu1822.github.io/fastpages/2023/04/04/CSA-w29-class-hashmapBigO.html",
            "relUrl": "/2023/04/04/CSA-w29-class-hashmapBigO.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096. | Compare Sequential and Parallel computing code and time to achieve outputs | . Response . The sequential computing time is 5.4 seconds, while the parallel computing code time is 5.6 seconds. Usually, parallel computing should be faster than sequential computing. In my case, the slower time may be due to that my laptop does not have the best performance. | . Notes . Helpful links: Pillow documentation | . | . For reference below, whenever there is img, it is the same thing as img object . pilImage.open(path to img): Opens image so that you can get information about it . img.mode: Return the format of the pixel, ex: whether it is in RGB, CMYK, etc. . img.resize(tuple with new width and height): Resize the image based on the width and height provided . img.getdata(): Returns the contents of the image (the RGB values of the pixels) . numpy.array(img.getdata()): Puts the img.getdata() contents in an array. . &quot;string %s&quot; % . img.save(filename, format): format is the file extension of the image. (Not sure if you specify it as format or format=format; refer to this link). . . with BytesIO() as buffer: Not 100% sure about this, but probably has something to do with streams. The with statement simplifies code so that you don&#39;t need to call the .close() method. (However, this applies to files, not sure if it is the same with bytes) . In with BytesIO() as buffer, the buffer is something similar to a variable (I think). If this is true, that means that img.save(buffer, format) is the same as img.save(BytesIO(), format). Since BytesIO is the memory, then this saves the image into the memory. . The reason why the image needs to be saved into memory and you can&#39;t directly access it with img is because the next line of code includes getvalue(), which only works with BytesIO and not img. . . .getvalue(): Returns the contents of the buffer in bytes . base64.b64encode(bytes): Encode bytes in base64 . . .decode(): IMPORTANT: This is not a method of the base64 library! In other words, tis is not base64.decode(). .decode() is actually a method in Python. Without any parameters, it takes the encoded string and &quot;decodes&quot; it. By &quot;decoding&quot;, the string isn&#39;t actually decoded. I&#39;m not sure how this works, but my guess is that it makes the string appear as if it isn&#39;t encoded anymore. . When a string is encoded, it looks like this: . . Notice the b&#39; characters at the front. . Now, once it is decoded, the b&#39; characters are gone: . . . .putdata(rgb values): Change pixels of image with rgb inputs that you specified . display(HTML(HTML code for image)): IPython displays image based on HTML code (in this case, HTMl works with base64 encoded values) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np path = Path(&quot;images/clouds-impression.png&quot;) img = pilImage.open(path) # test = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; # print(test) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # original baseWidth = 512 def process_image(image, baseWidth=50): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (50, 50) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (50, 36) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (50, 37) -- images -- . . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (512, 512) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (512, 374) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (512, 384) -- images -- . . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (512, 384) -- images -- . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (512, 512) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (512, 374) -- images -- . . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. (mac) | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 Reponse:The answer is 50 seconds. This is because you can combine process Y and Z together to get the minimum time, which leaves the maximum time being the minimum of times for running it in parallel.- Example 2 | Response: 25 seconds. The time it takes for running in parallel is 45 seconds. The time for running in sequential is 70 seconds. 70-45 = 25. | . | . Response: . Example 3: A and B, C and D should be assigned together so that both take 50 seconds to run. | . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . List comprehension . from IPython.display import HTML, display, Image from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from PIL import ImageEnhance from PIL import ImageFilter import PIL from io import BytesIO import base64 import numpy as np # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: img = pilImage.open(&#39;images/stop.jpg&#39;) rgba = img.convert(&#39;RGBA&#39;) data = rgba.getdata() green_rgb = (0, 128, 0) # change it to your exact bg color #average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division #new_data = [item if item[:-1][0] == 0 else (255, 255, 255, 0) for item in data] avg_data = [] [avg_data.append((item[0] + item[1] + item[2]) // 3) for item in data] new_data = [] [new_data.append((255, 255, 255, 0)) if data[i][0] &gt;= avg_data[i] * 1.5 else new_data.append(data[i]) for i in range(len(data))] rgba.putdata(new_data) rgba.save(&#39;changed.png&#39;, &#39;PNG&#39;) print(&quot;Original picture: &quot;) path = Path(&quot;images/stop.jpg&quot;) display(Image(path)) print(&quot;Red screening: &quot;) path = Path(&quot;changed.png&quot;) display(Image(path)) . Original picture: . Red screening: .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/29/CSP-w28-class-unit4_3aParallelComputing.html",
            "relUrl": "/2023/03/29/CSP-w28-class-unit4_3aParallelComputing.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a __dictionary_. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is _O(1)__ because each key only has one value. If you know the key, you would know the value. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # The values of a list are outputted as part of a set. Perhaps the set only takes in unique elements # because although the list has two 2s and 1s, the set only outputs one 1 and 2. # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Sets # There can not be the same keys in sets and hashmaps. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Strings, integers, lists, and dictionaries # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # Use a set # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # The code would be something like: lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;test&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value if (type(v) == list): print(str(k) + &quot;: &quot; + str(v[0])) for i in range(1,len(v)): print(v[i]) elif (type(v) == dict): print(str(k) + &quot;: &quot; + str(list(v)[0]) + &quot;: &quot; + str(v.get(1))) for i in range(2,len(v)+1): print(str(list(v)[i-1]) + &quot;: &quot; + v.get(i)) else: print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: Pop Synth-pop test tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) #search() # This is a very basic code segment, how can you improve upon this code? # # def add(): track = input(&quot;Enter favorite track number:&quot;) print(&quot;Enter favorite track number, enter finish to end:&quot;) favorite_tracks = {} while track != &quot;finish&quot;: favorite_tracks.update({int(track): lover_album[&quot;tracks&quot;][int(track)]}) track = input(&quot;Enter favorite track number:&quot;) return favorite_tracks decision = input(&quot;Would you like to search or add to list?&quot;) print(&quot;Would you like to search or add to list?&quot;) if decision == &quot;add&quot;: print(&quot;Favorite tracks: &quot; + str(add())) . Would you like to search or add to list? Enter favorite track number, enter finish to end: Favorite tracks: {8: &#39;Paper Rings&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;} . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | . Reponse . . . Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . alan_walker_album = { &quot;title&quot;: &quot;Different World&quot;, &quot;artist&quot;: &quot;Alan Walker&quot;, &quot;year&quot;: 2018, &quot;genre&quot;: [&quot;EDM&quot;], &quot;tracks&quot;: { 1: {&quot;song&quot;: &quot;Diamond Heart&quot;, &quot;time&quot;: &quot;4:00&quot;}, 2: {&quot;song&quot;: &quot;Faded&quot;, &quot;time&quot;: &quot;3:32&quot;}, 3: {&quot;song&quot;: &quot;Interlude&quot;, &quot;time&quot;: &quot;1:19&quot;}, 4: {&quot;song&quot;: &quot;Faded (Interlude)&quot;, &quot;time&quot;: &quot;0:42&quot;}, 5: {&quot;song&quot;: &quot;Sing Me to Sleep&quot;, &quot;time&quot;: &quot;3:08&quot;}, 6: {&quot;song&quot;: &quot;All Falls Down&quot;, &quot;time&quot;: &quot;3:19&quot;}, 7: {&quot;song&quot;: &quot;Lily&quot;, &quot;time&quot;: &quot;3:16&quot;}, 8: {&quot;song&quot;: &quot;Do It All for You&quot;, &quot;time&quot;: &quot;2:55&quot;}, 9: {&quot;song&quot;: &quot;Alone&quot;, &quot;time&quot;: &quot;2:41&quot;}, 10: {&quot;song&quot;: &quot;Darkside&quot;, &quot;time&quot;: &quot;3:32&quot;}, 11: {&quot;song&quot;: &quot;Different World&quot;, &quot;time&quot;: &quot;3:23&quot;}, 12: {&quot;song&quot;: &quot;Lonely&quot;, &quot;time&quot;: &quot;3:36&quot;}, 13: {&quot;song&quot;: &quot;Lost Control&quot;, &quot;time&quot;: &quot;3:42&quot;}, 14: {&quot;song&quot;: &quot;Intro&quot;, &quot;time&quot;: &quot;1:16&quot;}, 15: {&quot;song&quot;: &quot;I Don&#39;t Wanna Go&quot;, &quot;time&quot;: &quot;2:42&quot;} } } # Printing the dictionary print(alan_walker_album) playlist = [] addSong = input(&quot;What song would you like to add to your playlist?&quot;) while addSong != &quot;finish&quot;: for i in range(len(alan_walker_album[&quot;tracks&quot;])): songName = alan_walker_album[&quot;tracks&quot;][i+1][&quot;song&quot;] if addSong.lower() == songName.lower(): playlist.append({&quot;song&quot;: songName, &quot;time&quot;: alan_walker_album[&quot;tracks&quot;][i+1][&quot;time&quot;]}) break if (addSong.lower() != songName.lower()) and i == 14: print(&quot;Song not found in album&quot;) addSong = input(&quot;What song would you like to add to your playlist?&quot;) print(&quot;Your playlist is: &quot; + str(playlist)) totalTime = 0 minutes = 0 seconds = 0 for i in range(len(playlist)): minutes += int((playlist[i][&quot;time&quot;].split(&#39;:&#39;)[0])) seconds += int((playlist[i][&quot;time&quot;].split(&#39;:&#39;)[1])) minutes += (seconds//60) seconds = (seconds % 60) print(&quot;The total time of your playlist is: &quot; + str(minutes) + &quot;:&quot; + str(seconds)) . {&#39;title&#39;: &#39;Different World&#39;, &#39;artist&#39;: &#39;Alan Walker&#39;, &#39;year&#39;: 2018, &#39;genre&#39;: [&#39;EDM&#39;], &#39;tracks&#39;: {1: {&#39;song&#39;: &#39;Diamond Heart&#39;, &#39;time&#39;: &#39;4:00&#39;}, 2: {&#39;song&#39;: &#39;Faded&#39;, &#39;time&#39;: &#39;3:32&#39;}, 3: {&#39;song&#39;: &#39;Interlude&#39;, &#39;time&#39;: &#39;1:19&#39;}, 4: {&#39;song&#39;: &#39;Faded (Interlude)&#39;, &#39;time&#39;: &#39;0:42&#39;}, 5: {&#39;song&#39;: &#39;Sing Me to Sleep&#39;, &#39;time&#39;: &#39;3:08&#39;}, 6: {&#39;song&#39;: &#39;All Falls Down&#39;, &#39;time&#39;: &#39;3:19&#39;}, 7: {&#39;song&#39;: &#39;Lily&#39;, &#39;time&#39;: &#39;3:16&#39;}, 8: {&#39;song&#39;: &#39;Do It All for You&#39;, &#39;time&#39;: &#39;2:55&#39;}, 9: {&#39;song&#39;: &#39;Alone&#39;, &#39;time&#39;: &#39;2:41&#39;}, 10: {&#39;song&#39;: &#39;Darkside&#39;, &#39;time&#39;: &#39;3:32&#39;}, 11: {&#39;song&#39;: &#39;Different World&#39;, &#39;time&#39;: &#39;3:23&#39;}, 12: {&#39;song&#39;: &#39;Lonely&#39;, &#39;time&#39;: &#39;3:36&#39;}, 13: {&#39;song&#39;: &#39;Lost Control&#39;, &#39;time&#39;: &#39;3:42&#39;}, 14: {&#39;song&#39;: &#39;Intro&#39;, &#39;time&#39;: &#39;1:16&#39;}, 15: {&#39;song&#39;: &#34;I Don&#39;t Wanna Go&#34;, &#39;time&#39;: &#39;2:42&#39;}}} Your playlist is: [{&#39;song&#39;: &#39;Faded&#39;, &#39;time&#39;: &#39;3:32&#39;}, {&#39;song&#39;: &#39;All Falls Down&#39;, &#39;time&#39;: &#39;3:19&#39;}, {&#39;song&#39;: &#39;Darkside&#39;, &#39;time&#39;: &#39;3:32&#39;}, {&#39;song&#39;: &#39;Alone&#39;, &#39;time&#39;: &#39;2:41&#39;}, {&#39;song&#39;: &#39;Lost Control&#39;, &#39;time&#39;: &#39;3:42&#39;}] The total time of your playlist is: 16:46 . . Favorite Taylor Swift song . This was a hard one to choose. There are quite a few Taylor Swift songs that I like, from I Knew You Were Trouble to Blank Space to Mean. I&#39;d say that I have a favorite song for each genre of Swift&#39;s song, which is why it took a lot of contemplation to select my favorite song. In the end, I would say that my favorite Taylor Swift song is Me! firstly because of its catchy tune. One of the main things I like about her song is its message, how it empathizes accepting yourself and liking yourself because of your uniqueness. . But moreover, the reason why I like this song so much is because it showed Swift&#39;s transition from her Reputation album to Lover. I remember listening to Look What You Made Me Do when I was 11 and back then, I was pretty shocked at the lyrics. Back then, I couldn&#39;t understand what she was singing about and felt that the song was depressing. Many years later, I understand better about the pain that she communicates through that song. I remember watching Miss Americana with a friend a few years ago, and in that documentary, Swift recounted her career with how she started all the way to her producing the Lover album. The things that stuck with me the most was how much she was dealing with during the time she composed Reputation. She was struggling with anexoria, along with the burden of peparazzi and always having the desire to please her fans, even if it came at the cost of her own mental well being. I felt a lot of sympathy for her, and her documentary made her seem like a normal person. It showed that a celebrity, who typically seems to have it all, can also have a vulnerable state, and also experiences problems just like us normal people. . So after seeing her struggle through Reputation, I was happy for how she got better and moved on to creating positive, peppy songs in her Lover album. I think Me! really showed how she was embracing herself and accepting that even if she is not perfect, she is still ok with it. It felt like Swift&#39;s comeback from Reputation, and I think Me! is a perfect example of her emerging victorius from the her hardships during the Reputation era. .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/29/CSP-w28-class-hashmaps.html",
            "relUrl": "/2023/03/29/CSP-w28-class-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "CSUSM Event",
            "content": "Reflection: . Today’s event featured ambassadors from Cal State San Marcos who shared the various STEM majors and programs at the college. Information that was presented included the various STEM majors that one could pursue at CSUSM. Something interesting was that the college included many computer related majors, such as CS, cybersecurity, and computer engineering. The ambassadors also shared advice on how to find internships and research programs, and to apply for financial aid. The message that stood out to me was to not let your failures define you. It’s really cool to see how through perseverance, Ashley will be starting her PhD this year. She demonstrates that hard work does pay off and that success can be reached if you don’t give up. Overall, from today’s event, I learned more about the opportunities that are offered at colleges and some of the interesting programs/majors that they have. . Notes: . Ashley: Major in physics | Persisted despite failures -&gt; starting PhD this year | Test scores don’t define you | Use computer science in other STEM fields . | John: Transfer from Palomar to Cal State San Marcos | Degree in math, physics, and engineering . | Cal State San Marcos: Newer college | National leader in social mobility (internship oppurtunities) | Pathways: Chemistry | Physics | Biological Science | Computer science, Computer information systems, Cybersecurity, Computer engineering Easy to transition between majors | . | Math | Electrical engineering | Software engineering | . | Lots of STEM clubs . | Internships: How to find: Join clubs, check emails, campus events, google | Tips: Try to avoid unpaid internships Apply even if you feel underqualified | Ask faculty members for help with applications | Ask writing centers for help | . | . | Programs: Summer scholar program: Research program | Quantum bridge program | . | Research: STEM (physics, CS, bio) . | Grant vs. scholarship: Grant is government funded, scholarship is privatly funded | Look for scholarships yourself | Grants depend on parents’ salary + grades | Loans: Unsubsidized loan: Need to pay interest on loan instantly | Subsidized loan: Loan partially funded by the government (have some time before need to pay interest) | . | FAFSA . | Life after college: Graduate school | Educator | Work | . | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/03/28/CSA_P-w27-event.html",
            "relUrl": "/misc/2023/03/28/CSA_P-w27-event.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Generic Hacks",
            "content": "import java.util.LinkedList; public class LL &lt;T&gt; { public LinkedList&lt;T&gt; classes = new LinkedList&lt;T&gt;(); public Stack&lt;T&gt; stacks = new Stack&lt;&gt;(); public LL(T[] classes) { makeList(classes); } public LinkedList&lt;T&gt; makeList(T[] classes) { for (T data : classes) { this.classes.add(data); } return this.classes; } public LinkedList&lt;T&gt; getClasses() { return this.classes; } public void makeStack(LinkedList&lt;T&gt; classes) { //System.out.println(classes.remove()); stacks.push(classes.remove()); stacks.push(classes.remove()); System.out.println(&quot;Stack: &quot; + stacks); } public static void main(String[] args) { String[] myClass = new String[]{&quot;CSA&quot;, &quot;CSP&quot;}; LL&lt;String&gt; classReview = new LL&lt;&gt;(myClass); System.out.println(classReview.getClasses()); LinkedList&lt;String&gt; classLL = classReview.getClasses(); classReview.makeStack(classLL); } } LL.main(null) . [CSA, CSP] Stack: [CSA, CSP] . import java.util.LinkedList; public class LL { public LinkedList&lt;String&gt; classes = new LinkedList&lt;String&gt;(); public Stack&lt;String&gt; classesStack = new Stack&lt;&gt;(); public LL() { makeList(); } public LinkedList&lt;String&gt; makeList() { classes.add(&quot;CSA&quot;); classes.add(&quot;CSP&quot;); classes.add(&quot;Stats&quot;); classes.add(&quot;APUSH&quot;); classes.add(&quot;APEL&quot;); return classes; } public LinkedList&lt;String&gt; getClasses() { return this.classes; } public static void main(String[] args) { LL classReview = new LL(); System.out.println(classReview.getClasses()); } } LL.main(null) . [CSA, CSP, Stats, APUSH, APEL] .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/28/CSA-w26-genericHack3.html",
            "relUrl": "/2023/03/28/CSA-w26-genericHack3.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "CPT Plans",
            "content": "The theme of my CPT is class reviews. I have the main features already created, but I also have some ideas that I can add to it. . Based on the hacks from previous weeks, one feature that I implemented was an API endpoint that provided data from the r/APStudents reviews on AP classes. I used Pandas to filter through the data. Below are some screenshots of what I have currently: . . . . Another feature that I can implement is using SQLite3 to create some endpoints. . . See my work here .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/03/27/CSP-w26-CPT_Plan.html",
            "relUrl": "/misc/2023/03/27/CSP-w26-CPT_Plan.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Generics Hacks 2",
            "content": "public class Output &lt;T&gt;{ T outputText; public Output(T outputText) { this.outputText = outputText; } public void out() { System.out.println(outputText); } } . public class Print { public static void main(String[] args) { Output&lt;Integer&gt; intEx = new Output&lt;&gt;(1); intEx.out(); Output&lt;String&gt; intEx2 = new Output&lt;&gt;(&quot;test&quot;); intEx2.out(); } } Print.main(null) . 1 test .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/26/CSA-w26-genericHack2.html",
            "relUrl": "/2023/03/26/CSA-w26-genericHack2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "SQLite Table",
            "content": "&quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///cats.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Cats(db.Model): __tablename__ = &#39;cats&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _breed = db.Column(db.String(255), unique=True, nullable=False) _color = db.Column(db.String(255), unique=False, nullable=False) _age = db.Column(db.Integer) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, breed, color, age): self._name = name # variables with self prefix become part of the object, self._breed = breed self._color = color self._age = age # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def breed(self): return self._breed # a setter function, allows uid to be updated after initial object creation @breed.setter def breed(self, breed): self._breed = breed # a getter method, extracts uid from object @property def color(self): return self._color # a setter function, allows uid to be updated after initial object creation @breed.setter def color(self, color): self._color = color # a getter method, extracts uid from object @property def age(self): return self._age # a setter function, allows uid to be updated after initial object creation @breed.setter def age(self, age): self._age = age # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;breed&quot;: self.breed, &quot;color&quot;: self.color, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, breed=&quot;&quot;, color=&quot;&quot;, age=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(breed) &gt; 0: self.breed = breed if len(color) &gt; 0: self.color = color self.age = age db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initCats(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; cat1 = Cats(name=&#39;Bob&#39;, breed=&#39;calico&#39;, color=&#39;orange, white, brown&#39;, age=2) cat2 = Cats(name=&#39;Mittens&#39;, breed=&#39;American shorthair&#39;, color=&#39;gray&#39;, age=5) cats = [cat1, cat2] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for cat in cats: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = cat.create() print(f&quot;Created new cat {object.name}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist cat name {user.name}, or error.&quot;) initCats() . Created new cat Bob Created new cat Mittens .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/25/CSP-w25-sqlite3Tb.html",
            "relUrl": "/2023/03/25/CSP-w25-sqlite3Tb.html",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . Response . A schema determines how data is organized in a database. | The identity column is a column in the table that automatically fills an integer within the column. I&#39;m not certain about this, but the identity column is either related to a column with a primary key or is somehow used to make the primary key. | A primary key provides a unique number to identify each row. | The data types are integer, string, and date. | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? . Response . | A connection object establishes a connection between the SQL database and the Python code. . | A cursor object allows execution of SQLite methods. | One thing I noticed when using the debugger on the conn and cursor object is that they contain function variables. These could be the methods that work with the object. For instance, the function variables of cursor include execute, executemany, etc., which can also be found here.* No, results is a list. Looking at the debugger, you can see that results contains indexes with elements. The elements are the user objects. A quick google search also reports that the .fetchall() method returns table entries in the format of a list. | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$as2rGNQBIy1beIzh$13e1662b25c9e05226f739b503b034c24572bc07d709c1ddad3717f76886c5dd&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$xBmOw3KdC3kbdPlL$512245789e5e80844b8458df9d9e8aa1f7948271a2008118e461be192c527f57&#39;, &#39;2023-03-25&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$1kf841f73hR5Zyrd$e33ed3aba81e5a203ef7e1956091bee3f0ca35484c2836883b738129c4db426f&#39;, &#39;2023-03-25&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$qCY9yr7fhIH22nw5$cb65502870f8d21d6ae72bc0a8bf2e2150255094ef47eaa2ab489172686a18cd&#39;, &#39;2023-03-25&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$WocVg7o7fmSIVc1V$c3d4f8c99904dd62f0209e8fda4959330885f1434ab4481d4011a032227fa6b8&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$SCPV89620HgaMicv$db044b4ef887499f397f93967a346c75eb6dd0f2d6753d09f72c1e0e826f23c5&#39;, &#39;1921-10-21&#39;) (7, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;2023-03-25&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . Response . Both lessons create a user. In 2.4a, the create method contains db.session.add(object), which adds to the database using SQLAlchemy. However, in 2.4b, sqlite3 is used, which adds entries into the database using sqlite3 commands. The advantages of 2.4a is that the code is easier to read since it is written in Python. The advantages of 2.4b is that OOP is not needed; however, you would need to learn SQL to be able to add entries intot eh database. | INSERT adds a row into the database. It is not the same as __init__ because __init__ is a constructor that initializes the variables. However, __init__ does not add entries into the database. The create() method does that. On the other hand, INSERT directly adds a row into the database. | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record a has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . The hacked part checks to see if the password length is too small (1 character). If so, the program will replace the user&#39;s inputted password with its own password. | If there was an error in executing the UPDATE command, an error will be printed onto the terminal. | conn = sqlite3.connect(database), cursor = conn.cursor(), cursor.close(), and conn.close() are repeated in each example. They are needed to establish a connection with the database and to perform actions on it. | . Side note:Why does UPDATE work but not the update method in 2.4a? &gt;:( Note: as error takes the error message and stores it in the variable error. This way, you can see what the error is with print(error). It&#39;s kind of like import library as name . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id a the password has been hacked . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . Response . DELETE can be dangerous because it is unrecoverable. | The &quot;f&quot; is the format method. This allows easier printing of variables within a string. The variable, in this case, uid, is put in curly braces so that the str() typecast is not needed. | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with uid a was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . Response . The menu repeats because of a recursive loop (shown at the end of the menu() function). | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$as2rGNQBIy1beIzh$13e1662b25c9e05226f739b503b034c24572bc07d709c1ddad3717f76886c5dd&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$xBmOw3KdC3kbdPlL$512245789e5e80844b8458df9d9e8aa1f7948271a2008118e461be192c527f57&#39;, &#39;2023-03-25&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$1kf841f73hR5Zyrd$e33ed3aba81e5a203ef7e1956091bee3f0ca35484c2836883b738129c4db426f&#39;, &#39;2023-03-25&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$qCY9yr7fhIH22nw5$cb65502870f8d21d6ae72bc0a8bf2e2150255094ef47eaa2ab489172686a18cd&#39;, &#39;2023-03-25&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$WocVg7o7fmSIVc1V$c3d4f8c99904dd62f0209e8fda4959330885f1434ab4481d4011a032227fa6b8&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$SCPV89620HgaMicv$db044b4ef887499f397f93967a346c75eb6dd0f2d6753d09f72c1e0e826f23c5&#39;, &#39;1921-10-21&#39;) (7, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;2023-03-25&#39;) . Using a list . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) operationList = [create, read, update, delete, schema] option = [&quot;c&quot;, &quot;r&quot;, &quot;u&quot;, &quot;d&quot;, &quot;s&quot;] for i in range(len(option)): if operation == option[i]: operationList[i]() menu() # start menu . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$as2rGNQBIy1beIzh$13e1662b25c9e05226f739b503b034c24572bc07d709c1ddad3717f76886c5dd&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$xBmOw3KdC3kbdPlL$512245789e5e80844b8458df9d9e8aa1f7948271a2008118e461be192c527f57&#39;, &#39;2023-03-25&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$1kf841f73hR5Zyrd$e33ed3aba81e5a203ef7e1956091bee3f0ca35484c2836883b738129c4db426f&#39;, &#39;2023-03-25&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$qCY9yr7fhIH22nw5$cb65502870f8d21d6ae72bc0a8bf2e2150255094ef47eaa2ab489172686a18cd&#39;, &#39;2023-03-25&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$WocVg7o7fmSIVc1V$c3d4f8c99904dd62f0209e8fda4959330885f1434ab4481d4011a032227fa6b8&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$SCPV89620HgaMicv$db044b4ef887499f397f93967a346c75eb6dd0f2d6753d09f72c1e0e826f23c5&#39;, &#39;1921-10-21&#39;) (7, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;2023-03-25&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . Response . Procedural abstraction is present in the form of functions, such as create(), read(), etc. | Data abstraction is shown in the code segment that features the menu. The abstraction uses calls to functions so that the menu function itself looks very clean. Below are pictures of debugging that show calling to a specific function (in this case read()): | . The first picture demonstrates the debugger moving to the if statement that executes the read() function because the user inputted &quot;r&quot;. . . The second picture shows the debugger moving to the code cell with the read() function. . . CPT Work . The thing that I added to my CPT project was an API endpoint that utilized the imperative programming style, which was using the sqlite3 library to write out SQL commands. I did this instead of the OOP method since I already had that in my project. . Below is a picture of what my API endpoint looks like: . . To make the API endpoint, I first added an endpoint at the end of the code with: api.add_resource(_ReadSQL, &#39;/readsql/&lt;test&gt;. &lt;test&gt; takes in a variable in the URL. This took me some time to google, because simply searching something around the lines of api.add_resource add url variables does not give the most helpful results. However, after sifting through some webpages, I found this article, and even on this page, I had to dig really deep until I found the interesting brackets within the URL. I then incorporated it into my Flask Portfolio, took the variable in as a parameter in the get() method, and then used it in my SQL query, which ultimately worked (yay). . The second thing I learned was writing SQL queries. My endpoint takes in a user ID that the user provides and outputs their class reviews. To write this in sqlite3, my code was: select id, userID, className, difficulty, hoursOfHw, daysBtwTest, memorizationLevel, comments from classReview where id = &quot; + test. Let&#39;s break this statement down into a few pieces. First, select id, userID... means to output the contents from the column name. from classReview specifies which table to query, and where id =... retrieves the specific row where the id matches the specified keywords. In this case, the keyword is the value of test, which is specified in the API endpoint as a variable in the URL. . What I also learned was that to add Python variables into a SQL statement, add a plus sign behind the SQL command (which is in quotes which means that the command is a string) and then add the variable name. This is similar to concatenating strings with variables. .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/25/CSP-w25-class-unit2_4b.html",
            "relUrl": "/2023/03/25/CSP-w25-class-unit2_4b.html",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . Programmers care about space and time complexity to make programs more efficient. Space complexity is important because computers have a limited amount of RAM. Time complexity is important because a better time complexity can return things in a faster time. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 50 #baseWidth = 1250 #baseWidth = 2500 #baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (50, 37) pixels: 1,850 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . Both, because the picture takes up a big space and the size of the picture affects the amount of time it takes for the picture to display. | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3,4,5,6])) #print(generate_subsets(numbers)) . [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4], [1, 2, 3, 5, 6], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3], [1, 2, 4, 5, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4], [1, 2, 5, 6], [1, 2, 5], [1, 2, 6], [1, 2], [1, 3, 4, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4], [1, 3, 5, 6], [1, 3, 5], [1, 3, 6], [1, 3], [1, 4, 5, 6], [1, 4, 5], [1, 4, 6], [1, 4], [1, 5, 6], [1, 5], [1, 6], [1], [2, 3, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4], [2, 3, 5, 6], [2, 3, 5], [2, 3, 6], [2, 3], [2, 4, 5, 6], [2, 4, 5], [2, 4, 6], [2, 4], [2, 5, 6], [2, 5], [2, 6], [2], [3, 4, 5, 6], [3, 4, 5], [3, 4, 6], [3, 4], [3, 5, 6], [3, 5], [3, 6], [3], [4, 5, 6], [4, 5], [4, 6], [4], [5, 6], [5], [6], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 2.4166295528411865 seconds 9227465 Time taken: 4.234471797943115 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Complete the Time and Space Complexity analysis questions linked below. Practice . Response . Images: A smaller image means that it takes less time to output the image on Jupyter Notebook. For example, the base width of the image originally was 2792 pixels, which took 0.5 seconds to display. Once shrank to a base of 50 pixels, the time decreased to 0.4 seconds. | Sorting: The following are some sorting algorithms and explanations on their time complexity: . Bubble sort: O(n^2) . Bubble sort compares each adjacent pairs until the list is ordered from lowest to highest. The first time through the list, bubble sort repeats (n-1) times. The next time through the list, bubble sort then iterates (n-2) times. Because of this, the maximum number of times that bubble sort can swap is n(n-1)/2. . | Selection sort: O(n^2) . Selection sort consists of a sorted and unsorted sublist. Initially, all values in the list are in the unsorted sublist. The smallest element is found in the sublist, and then moved to the sorted sublist. This is repeated until all values are in the sorted sublist. The time complexity is also O(n^2), because similar to bubble sort, the first time through the unsorted sublist, (n-1) comparisons need to be made, and the next time, (n-2) comparisons, and so on. . | Insertion sort: O(n^2) . Insertion sort, like selection sort, consists of an unsorted sublist and a sorted sublist. However, in insertion sort, the first element of the sorted sublist is the first element of the list. The remaining elements of the unsorted sublist are then placed in the correct order in the sorted sublist. The worst case scenario for insertion sort is if the original list was reversed. Therefore, the element would have to be inserted at the beginning of the sorted sublist. . | . | Time and space complexity are important because you would want to have an efficient program that runs quickly and does not take up a lot of resources. . | It depends. A constant time algorithm would be faster; however, a lot of algorithms that have bad time complexity also have good space complexity. As a result, the decision to use a time algorithm depends on whether the programmer wants a fast program or one that does not take up a lot of resources. | Generally algorithms with worse time complexity have better space complexity. The best algorithm may be heapsort, which has a time complexity of O(nlog(n)) and a space complexity of O(1). | . Time and space complexity questions . 3 | 4 | The answer is 2 because j doubles until it is less than or equal to n. When this occurs, the time complexity is O(log(n)). Since the first for loop runs n//2 times, the time complexity is O(n/2(log(n))) which can be simplified to O(nlog(n)). | 2 | The answer is 4 because i is divided by 2 each time. Therefore, the maximum number of times that the program runs is 2^i &gt; N, which would result in a logarithmic time complexity. | 3 | 2 | No idea why time complexity is O(logk(n)) | 3 | The answer is False because this is a worse time complexity scenario. Therefore, it is possible that A runs faster than B. |",
            "url": "https://lwu1822.github.io/fastpages/2023/03/22/CSP-w26-class-spaceTimeComplexity.html",
            "relUrl": "/2023/03/22/CSP-w26-class-spaceTimeComplexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Generics Hacks",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Generics and defines abstract methods */ public class Users extends Generics { // Class data public static KeyTypes key = KeyType.name; // static initializer public static void setOrder(KeyTypes key) {Users.key = key; } public enum KeyType implements KeyTypes {name, score} // Instance data private final String name; private final int score; /* constructor * */ public Users(String name, int score) { super.setType(&quot;Users&quot;); this.name = name; this.score = score; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Users.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.score.equals(this.getKey())) { output += this.score; //output = output.substring(output.length() - 2); } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.score; } return output; } // Test data initializer public static Users[] user() { return new Users[]{ new Users(&quot;Bob&quot;, 8), new Users(&quot;Jane&quot;, 10) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Users[] objs = user(); // print with title Users.setOrder(KeyType.name); Users.print(objs); // print name only Users.setOrder(KeyType.score); Users.print(objs); } } Users.main(null); . class [LREPL.$JShell$13C$Users; 2 Generic: Users listed by name Bob Jane class [LREPL.$JShell$13C$Users; 2 Generic: Users listed by score 8 10 . Hack #2 . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } public T peekLast() { return this.tail.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . import java.util.Random; import java.util.ArrayList; import java.lang.Math; /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; } /** * Add a list of objects to queue */ // RETURN SIZE OF QUEUE public int queueSize(Queue&lt;T&gt; queueInput) { int size = 0; for (T data : queueInput) { size++; } return size; } /********************************************************************************* */ // HACK 1 public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } public void addListHack(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; printQueue(); } } public void deleteList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.delete(); this.count--; printQueue(); } } /********************************************************************************* */ // HACK 2 public void sortSteps(T[]... seriesOfObjects) { addList(seriesOfObjects); sort(); } public void sort() { int size = queueSize(queue); for (int j = 0; j &lt; size - 1; j++) { // take first item in queue T a = this.queue.peek(); T b = null; // remove the first item this.queue.delete(); // do a bubble sort for (int i = 0; i &lt; size - 1; i++) { b = this.queue.peek(); // add the smaller number to the end of the queue // this way, the largest number is left at the very back if ((Integer)a &lt; (Integer)b) { queue.add(a); a = this.queue.peek(); this.queue.delete(); } else { queue.add(b); this.queue.delete(); } } // add the largest number to the back of the queue // largest number is always a because it is either: // 1. a = this.queue.peek() (last element of queue = biggest) // or 2. if b &lt; a, then a is already the biggest number queue.add(a); } for (T data : queue) { System.out.println(data); } } /********************************************************************************* */ // HACK 3 public void randomSteps(T[]... seriesOfObjects) { addList(seriesOfObjects); //random(); } public boolean matchElem(int ranNum, int[] order) { for (int i = 0; i &lt; order.length; i++) { if (ranNum == order[i]) { return true; } } return false; } public void random() { int size = queueSize(queue); Random rand = new Random(); int randInt = rand.nextInt(size); Queue&lt;T&gt; queue2 = new Queue&lt;&gt;(); Queue&lt;T&gt; queue3 = new Queue&lt;&gt;(); boolean match = true; ArrayList&lt;Integer&gt; originalOrder = new ArrayList&lt;&gt;(); for (int i = 1; i &lt;= size; i++) { originalOrder.add(i); } while (originalOrder.size() &gt; 0) { // some number between 0 and 7 int num = originalOrder.remove((int)(Math.random() * originalOrder.size())); int num2 = originalOrder.remove((int)(Math.random() * originalOrder.size())); /* DEBUGGING System.out.println(&quot;NUM: &quot; + num); System.out.println(&quot;NUM2: &quot; + num2); */ if (num2 &lt; num) { int temp = num2; num2 = num; num = temp; } // split queue into queue (bigger #) (345678) and queue2 (smaller #) (12) for (int i = 0; i &lt;= num; i++) { T a = queue.peek(); queue2.add(a); queue.delete(); } // splite queue into queue (678) and queue3 (345) // queue2 = 12 if (num2 == 8) { for (int i = 0; i &lt;= num2-num-2; i++) { T a = queue.peek(); queue3.add(a); queue.delete(); } }else { for (int i = 0; i &lt;= num2-num-1; i++) { T a = queue.peek(); queue3.add(a); queue.delete(); } } // finding last elements of queues (these numbers should be swapped) T pos1 = queue2.peekLast(); T pos2 = queue3.peekLast(); /* DEBUGGING System.out.println(&quot;pos1: &quot; + pos1); System.out.println(&quot;pos2: &quot; + pos2); */ // size of two queues int queue2Size = queueSize(queue2); int queue3Size = queueSize(queue3); // reshuffle // move q2&#39;s numbers to end of q3 for (int i = 0; i &lt; queue2Size - 1; i++) { T a = queue2.peek(); queue3.add(a); queue2.delete(); } T queue2Last = queue2.peek(); queue2.delete(); // move original q3&#39;s numbers to q2 for (int i = 0; i &lt; queue3Size - 1; i++) { T a = queue3.peek(); queue2.add(a); queue3.delete(); } T queue3Last = queue3.peek(); queue3.delete(); // swap numbers queue2.add(queue2Last); queue3.add(queue3Last); size = queueSize(queue); queue2Size = queueSize(queue2); queue3Size = queueSize(queue3); for (int i = 0; i &lt; queue3Size; i++) { T a = queue3.peek(); queue.add(a); queue3.delete(); } for (int i = 0; i &lt; queue2Size; i++) { T a = queue2.peek(); queue.add(a); queue2.delete(); } for (int i = 0; i &lt; size; i++) { T a = queue.peek(); queue.add(a); queue.delete(); } /*DEBUGGING System.out.println(&quot;*************&quot;); for (T data : queue) { System.out.println(data); } System.out.println(&quot;****************&quot;); */ } for (T data : queue) { System.out.println(data); } } /********************************************************************************* */ public void stack() { Stack&lt;T&gt; stacks = new Stack&lt;&gt;(); for (T data : this.queue) { System.out.println(data); T a = this.queue.peek(); System.out.println(&quot;A: &quot; + a); this.queue.delete(); stacks.push(a); } int size = 0; for (T data : stacks) { size++; } /* for (T data : stacks) { System.out.println(stacks.peek()); } stacks.pop(); */ for (int i = 0; i &lt; size; i++) { System.out.println(stacks.peek()); stacks.pop(); } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . Hack 1 . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.addListHack(words); qWords.deleteList(words); } } QueueTester.main(null); . Words count: 1 Words data: seven Words count: 2 Words data: seven slimy Words count: 3 Words data: seven slimy snakes Words count: 4 Words data: seven slimy snakes sallying Words count: 5 Words data: seven slimy snakes sallying slowly Words count: 6 Words data: seven slimy snakes sallying slowly slithered Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward Words count: 6 Words data: slimy snakes sallying slowly slithered southward Words count: 5 Words data: snakes sallying slowly slithered southward Words count: 4 Words data: sallying slowly slithered southward Words count: 3 Words data: slowly slithered southward Words count: 2 Words data: slithered southward Words count: 1 Words data: southward Words count: 0 Words data: . Hack 2 . class QueueTester2 { public static void main(String[] args) { // Create iterable Queue of Integers Object[] numbers = new Integer[] { 1, 4, 5, 8}; Object[] numbers2 = new Integer[] {2, 3, 6, 7}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers, numbers2); qNums.sortSteps(numbers, numbers2); } } QueueTester2.main(null); . 1 2 3 4 5 6 7 8 . Hack 3 . class QueueTester3 { public static void main(String[] args) { // Create iterable Queue of Integers Object[] numbers = new Integer[] {1, 2, 3, 4, 5, 6, 7, 8}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers); qNums.randomSteps(numbers); qNums.random(); //qNums.random(); } } QueueTester3.main(null); . 1 5 6 7 2 8 4 3 . Hack 4 . class QueueTester4 { public static void main(String[] args) { // Create iterable Queue of Integers Object[] numbers = new Integer[] {1, 2, 3}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers); qNums.stack(); } } QueueTester4.main(null); . 1 A: 1 2 A: 2 3 A: 3 3 2 1 . Hacks #3 . An access modifier controls if a variable in a class can be accessed outside of the class. public allows access outside of the class, while private does not. A constructor contains a piece of code that is ran when the object is initialized. Setters and getters are methods that change the value of the variable or retrieve its value. A class also includes a class header and methods. Methods can contain a parameters or be empty. | .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/22/CSA-w26-genericHack.html",
            "relUrl": "/2023/03/22/CSA-w26-genericHack.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Generics Types and Collections",
            "content": "Arrays, ArrayList, 2D Arrays . Most &quot;Data Structures&quot; conversations begin with Arrays, which are built into most Computer Programming Languages. College Board has CSA Units 6-8 which discuss Arrays, ArrayLists, and 2-Dimensional Arrays. . Arrays, 2D Arrays, and ArrayLists are important data structures in computer science, and they are the subject of two FRQs in each AP Computer Science A exam. Here are some types of FRQs that may focus on these topics: . Array/ArrayList implementation: You may be asked to implement an Array or ArrayList, including methods to add, remove, and access elements. | Array/ArrayList traversal: You may be given an Array or ArrayList and asked to traverse it, perform operations on each element, and/or modify the array or list. | Array/ArrayList searching and sorting: You may be asked to implement or modify code to search for an element in an array or list, or to sort the elements of an array or list. | 2D Arrays or Multi-dimensional arrays: You may be asked to implement or modify code that uses a multi-dimensional array, and to perform operations on elements of the array. | ArrayList vs. Array: You may be asked to compare and contrast the characteristics of ArrayLists and Arrays, and to explain when it is appropriate to use one data structure over the other. | Big-O complexity: You may be asked to analyze the time and space complexity of algorithms that use Arrays or ArrayLists, and to compare the efficiency of different algorithms. | Note: Making a copy of an algorithm increases space complexity. . Collection Framework in Java . A deeper dive into Data Structures continues with Linked Lists (LL) which are the foundation for Stacks and Queues, which we have used. Java has implemented a Collection framework that has established common methods to assist in using many of these Data Structures. . Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); . Deeper reference from Geeks . Object has toString overriding it, so for (Object a: arr) prints strings. . Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LinkedList implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); // Collections has a toArray convertion Object[] arr = queue.toArray(); // Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) // Interate while size System.out.println(queue.remove()); // Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr) // Type is Object from convertion System.out.println(a); . Empty Queue John Jane Bob Iterate over Array John Jane Bob . import java.util.Random; Random rand = new Random(); int randInt = rand.nextInt(9); System.out.println(randInt); . 6 . Generics. The purpose of this &quot;class&quot; is to show how we can combine any Data Type into a super class. In fact, this is what many Computer Languages do, is they make general methods and properties for all Data within the language. . This class is abstract, meaning it is not used unless extended. | The keyword interface is used to ensure people specify &quot;interface&quot; in their implementation. This can be used for things like sorting and searching information within the class. | Every object in Java is inherited from Data Type &quot;Object&quot;. This is shown in toString() method @Overrides below. The toString() method has a prototype implementation in &quot;Object&quot;. Each extended class that @Overrides toString() and can be used to create a string representation of its &quot;Object&quot;. | . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . Alphabet. This class is used to store the alphabet. . Extends Generics. | Implements interface KeyType which is used in toString method of Alphabet object | Overrides methods in abstract class Generics, which includes class Object. | . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$22BE$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$22BE$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . Animal. This class is used to store properties on Animals. . Extends Generics. | Implements interface KeyType with more keys than 1st example, as this Class has more attributes. | Overrides methods in abstract Generics, notice that this has more variations of Display. | . /* * Animal class extends Generics and defines abstract methods */ public class Animal extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // print name only Animal.setOrder(KeyType.name); Animal.print(objs); } } Animal.main(null); . class [LREPL.$JShell$64$Animal; 6 Generic: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 class [LREPL.$JShell$64$Animal; 6 Generic: Animal listed by name Lion Pig Robin Cat Kitty Dog . Cupcake. This class is used to store properties of Cupcakes. . Extends Generics. | Implements interface, very similar to previous example. | Overrides methods in abstract Generics. | Though Animals and Cupcakes are very different in real word, properties and management look very similar. | . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Cupcake.key = key; } public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$66$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$66$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate . Hack Helpers . Below is a starter Queue and a Linked List implementation. This implements Generic type and implements Iterable to support Java ForEach (enhanced For) loops. . In my experience, building your own Data Structures can help you to understand fundamentals of a Computer Language. To use a Data Structure you will need data. The developer working with LL, Stacks, and Queues needs to can learn how to manage different Data Types, this helps you learn about the Java Data Type Object as a generic form of an instance of a class and the Generic type &lt;T&gt; as generic for of a Data Type within a class definition. . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); // Create iterable Queue of NCS Generics Animal.setOrder(Animal.KeyType.name); Alphabet.setOrder(Alphabet.KeyType.letter); Cupcake.setOrder(Cupcake.KeyType.flavor); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( words, numbers, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward Integers count: 10 Integers data: 0 1 2 3 4 5 6 7 8 9 My Generics count: 41 My Generics data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Mixed count: 58 Mixed data: Start seven slimy snakes sallying slowly slithered southward 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate End . Hacks . Blog or illustrate understanding of the following. . Watch the college board video Classes and Objects* Blog and Define the details of a Class: Access modifier, constructor, modifiers/setters, getters, etc. | Build example code in jupyter notebook with Linked List, Queues, and Stacks. | Show familiarity with managing data (aka nodes in LL) in these structures. | Show familiarity with Generic data and ForEach loop support, similar to ArrayLists T. Here is sample Java Generic T and the Java Iterable interface by Geeks4Geeks. | . Hacks: Code . Challenge #1, Add and Delete elements from Queue. Working with the code that is given, you will need to adjust Add and write Delete, to output from the Queue as follows. . Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued data: sallying Words count: 3, data: slowly slithered southward Dequeued data: slowly Words count: 2, data: slithered southward Dequeued data: slithered Words count: 1, data: southward Dequeued data: southward Words count: 0, data: null . | Challenge #2, perform a merge or combination of 2 Queue&#39;s that are ordered. This is a foundation step for the algorithm used in Merge sorting. IMO, this algorithm is easier if you &quot;peek&quot; at data at the head of the queue, prior to performing dequeue action. . | . // Start with two ordered Queue&#39;s (1st Queue) 1 -&gt; 4 -&gt; 5 -&gt; 8 -&gt; nil (2nd Queue) 2 -&gt; 3 -&gt; 6 -&gt; 7 -&gt; nil // Finish with a 3rd Queue 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 nil . Challenge #3, Shuffle the Queue. Iterate through the Queue and change data with another random position in the queue. | . // Start with ordered Queue 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 nil // Finish with shuffled Queue 2 -&gt; 8 -&gt; 6 -&gt; 1 -&gt; 3 -&gt; 4 -&gt; 7 -&gt; 4 nil . Challenge #4, Build a Stack and use it to reverse the order of a Queue. The Queue is a LIFO Data Structure, the Stack is a FIFO data structure, so code is similar but most everything is reversed. | . // Place elements into Queue (Head) 1 -&gt; 2 -&gt; 3 -&gt; nil // Print out the following: 1 2 3 // Place elements from Queue to Stack (Top) 3 -&gt; 2 -&gt; 1 -&gt; nil // Print out the following: 3 2 1 . Advanced Challenge #5, Implement a Stack from your LL into a new Jupyter Notebook ... Here is a former solution | .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/15/CSA-w25-class-generic.html",
            "relUrl": "/2023/03/15/CSA-w25-class-generic.html",
            "date": " • Mar 15, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "MC Corrections",
            "content": "My score is 50/50. . The question that I wasn’t that sure on was #2. I debated between cookies and IP address compromising a person’s privacy. I learned from the answer explanations that cookies are used to collect information about the user and the websites that they visit. I originally thought that an IP address would reveal a lot of information about a user, but from the explanations, I learned that an IP address is needed for a user to send and receive information. Therefore, an IP address is public and would expose less information than cookies. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/03/13/CSP-w25-mc.html",
            "relUrl": "/misc/2023/03/13/CSP-w25-mc.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . . Response: . The code below were present in the Tri 2 final project&#39;s Flask portfolio. | The Flask app object &quot;implements a WSGI application&quot;. A WSGI application is used by web servers to send requests to applications that are written with Python. | In the code below, the SQLAlchemy db object is created. The class is used to integrate SQLAlchemy to Flask. The object is created so that Flask will support it when needed (as opposed to doing: | . . app = Flask(__name__) db = SQLAlchemy(app) . where the the instance is bound to Flask so that methods can be used at anytime.) . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and definition. class User The user class is the overarching branch that contains things that can define the user. There is a constructor called __init__ in the class. | db.Model inheritance db.Model is seen as a parameter in the User class. This is the database model, and the functions in the model are inherited into the User class in order to build it. | init method This is the constructor of the User class. | @property, @&lt;column&gt;.setter @property is another name for a getter. @column.setter is the setter. | create, read, update, delete methods @peroperty relates to create, while @column.setter relates to create or update. | . | . . Response . The columns in the sqlite.db table can be associated with the variables defined in the code below. In this case, the columns/variables are:_name, _uid, _password, and _dob. | Initialization can be found in the __init__ constructor. Within the constructor, the name, uid, password, and dob is initialized to the values specified by the user. If the password is not specified, it is set to the default value of 123qwerty. | CRUD methods can be seen in the four methods at the end of the code (create, read, update, and delete) | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): print(&quot;SELF: &quot; + str(self)) &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) print(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . Response . create_all() creates the database. | The user objects are initialized with a call to the constructor in the User class. This initializes the name, uid, etc. variables. | try/except works by executing the code in the try statement. If there are errors with the try clause, the program will execute the code in the except. In this example, the users in the users list are added into the Users table. However, if the users are already present in the table or the database has an error (such as not existing), the program instead outputs a message saying that the user already exists in the table or there is an error with the database. | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . Response . User.query.filter_by searches through the database based on the attributes specified. The .first() method retrieves the first result found in the database. You can also use .all(), which will retrieve all instances found in the database (see code example below) | .is_password() checks to see if the user&#39;s password matches the password specified. This is achieved by calling the imported check_password_hash() method and specifying the hash of the user&#39;s password (found in the database) and the inputted password (the password you want to check against the hash). | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . True . My notes . .query.filter_by can end with .all() instead of first(). However, this returns the objects in a list format, so to get the actual contents of the object, you need to output the element by specifying the index of the list (ex: print(user[0])) . def find_by_uid2(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).all() print(user) print(user[0]) print(user[0].uid) find_by_uid2(&quot;indi&quot;) . [&lt;User 5&gt;] {&#34;id&#34;: 5, &#34;name&#34;: &#34;Indiana Jones&#34;, &#34;uid&#34;: &#34;indi&#34;, &#34;dob&#34;: &#34;10-21-1920&#34;, &#34;age&#34;: 102} indi . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . Response . The program first takes in the uid that is specified by the user, and stores it in the variable uid. This variable is passed into the method find_by_uid() to see if the user id already exists in the database. The try/except clause takes in the user object and attempts to execute the read() method on it. If successful, the program stops, because that means that the user was found in the database and therefore could not be added into the database. If the user was not present in the database, the try statement would result in an error, therefore executing the statement in the except clause, which says pass, or to keep executing the code below. | user = User() initializes a User object. Although the dob was not specified, the constructor contains a default value for the dob parameter. Alternatively, you can specify the dob variable before you initialize the User object, and then add it as an attribute to the User object (see in code example below) | user.dob is a setter that sets the birthday of the user. The setter is defined with the @dob.setter decorator. The try/except checks to see if the date that the user inputted is a valid date. | user.create() creates the user in the try statement. The try statement attempts to read the user object after the user is created. If this fails, that means that the user object was not successfully added to the database, so an error message will be printed. | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;a&#39;, &#39;uid&#39;: &#39;a&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0} . Alternate create() method . # Inputs, Try/Except, and SQLAlchemy work together to build a valid database object def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password, dob=dob ) # create user.dob, fail with today as dob # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 8, &#39;name&#39;: &#39;bob2&#39;, &#39;uid&#39;: &#39;bob2&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . Response . As noted above, the .all() method returns all of the entries in the table that match the query filter (in this case, there is no filter; therefore, all entries are obtained) | json_ready calls the .read() method on all of the objects in the table list. List comprehension allows an easier way to iterate through statements in the list. The format of a list comprehension is:[expression for-each-loop if-loop]. Expression is related to the item in the iteration and also the outcome of the element in the list. . In this case, the list comprehension adds the JSON output of the users data from the database into the json_ready list. . | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Bob&#39;, &#39;uid&#39;: &#39;bob&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;bob2&#39;, &#39;uid&#39;: &#39;bob2&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . Update . Note: The code below does not actually update the sqlite.db. My suspicion is that it has something to do with how the sqlite.db is added into fastpages. . However, based on the output below, you can see that the user, in fact, does change. By passing the user object with self, the code above in the update() method is able to change its attributes (in this case, changing the name from a to b). However, for some reason, db.session.commit() does not save the updated user object, even though this documentation supports it. . I tried the same thing on Tri 2&#39;s project, and the update is successful. This indicates that the table not being able to update may be due to something with fastpages. . . . def update(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going print(&quot;USER: &quot; + str(user)) # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # write object to database with app.app_context(): try: object = user.update(name=name, password=password, uid=uid) print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) update() . USER: {&#34;id&#34;: 7, &#34;name&#34;: &#34;a&#34;, &#34;uid&#34;: &#34;a&#34;, &#34;dob&#34;: &#34;03-25-2023&#34;, &#34;age&#34;: 0} SELF: {&#34;id&#34;: 7, &#34;name&#34;: &#34;a&#34;, &#34;uid&#34;: &#34;a&#34;, &#34;dob&#34;: &#34;03-25-2023&#34;, &#34;age&#34;: 0} {&#34;id&#34;: 7, &#34;name&#34;: &#34;b&#34;, &#34;uid&#34;: &#34;a&#34;, &#34;dob&#34;: &#34;03-25-2023&#34;, &#34;age&#34;: 0} Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;b&#39;, &#39;uid&#39;: &#39;a&#39;, &#39;dob&#39;: &#39;03-25-2023&#39;, &#39;age&#39;: 0} . Delete . def delete(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) # write object to database with app.app_context(): user.delete() delete() .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/13/CSP-w25-class-unit2_4a.html",
            "relUrl": "/2023/03/13/CSP-w25-class-unit2_4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "MC Corrections",
            "content": ". My score is 36/39. . The question that I got wrong was #29. I did not choose the right answer because the wording in the answer of “decimal” made me believe that the input number was a decimal number, which didn’t make sense to me. After looking at the answer explanation, I understand that the method counts the number of digits in the input. This makes sense because this is a recursive function, so the method wouldn’t only reuturn 1 (what I had selected before). . I also got #35 wrong. The reason why I got this problem wrong was because I mistakenly believed that the calculations round up. When calculating the first midpoint, the result is 3.5, and I rounded to 4. Instead, you need to round down to 3, which will lead to the correct midpoint on the second iteration. . I got 39 wrong because I did not how the set method worked in System.out.println. After reading the explanations, I learned that the set method returns the original value when it is called. Therefore, the original elements of the ArrayList are outputted before the elements are changed. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/03/13/CSA-w25-mc.html",
            "relUrl": "/misc/2023/03/13/CSA-w25-mc.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Data Types",
            "content": "Notes . See weekly notes here . . Hacks . Early Seed . Write a sample binary addition 1 + 1 = 10 | Have Java Code cell on screen at start of lecture | . See code here . . Small Code Excercises . Write a Jupyter notebook on the primitive data types. Use array and methods like substring and random as applicable: int, double, boolean, char | Next, convert each of the examples to corresponding Wrapper classes, using arrays | . See code here . . Key Concepts . Methods . A method is a block of code which only runs when it&#39;s called Parameters, or data can be passed into a method | . | Methods are used to perform certain actions. Another word for them is a function | See more information on methods here | . Control Structures . Control structure are blocks of code that can change the path of execution. There are 3 kinds of control structures: Condiditional Branches - used for choosing between 2+ paths (if/else statements) | Loops - used it iterate through multiple values/objects and repeatedly run specific code blocks (for, while, and do while loops) | Branching Statements - used to break the flow of control in loops (break and continue) | | See more information on control structures here | . Teacher&#39;s Code Examples . DiverseArray Example . Methods? Yes, DiverseArray does contain methods. Examples of methods are: arraySum(), rowSums(), and isDiverse(). | . | Control Structures? Yes, DiverseArray does contain control stuctures. There are examples of for loops and if statements. | . | Fit data types? Yes, DiverseArray has data types of int and boolean. It also has int[] and int[][]. | . | . Matrix Example . Methods? Yes, Matrix does contain methods. Examples of methods are: toString(), reverse(), keypad(), and numbers(). | . | Control Structures? Yes, Matrix does contain control structures. There are examples of for loops. | . | Fit data types? Yes, Matrix has data types of int. There are also int[][] and String. | . | . Number Example . Math.random() is a static method that returns a floating-point that is ≥ 0 and &lt; 1. | See more information on Math.random() here | . DoNothingByValue Example . Methods? Yes, DoNothingByValue does contain methods. Examples of methods are: changeIt(), changeIt2(), and changeIt3(). | . | Control Structures? Yes, DoNothingByValue does contain control structures. There are examples of for loops. | . | Fit data types? Yes, DoNothingByValue has data types of int. There are also String, ArrayList, and int[]. | . | . IntByReference Example . Methods? Yes, IntByReference does contain methods. Examples of methods are: toString(), swapToLowHighOrder(), and swapper(). | . | Control Structures? Yes, IntByReference does contain control structures. There are examples of if statements. | . | Fit data types? Yes, IntByReference has data types of int. There are also String, ArrayList, and int[]. | . | . Menu Example . Find a way to make Menu work on a Jupyter Notebook. View code here | . | Are instances of MenuRow and Runnable data types and control structures? MenuRow() represents the constructor for the class MenuRow. In the constructor, all varibles in the class are initalized. | Runnable represents an object. In the method getAction(), the return type is Runnable. | . | Does Driver have control structures? If so, list all the control Structures. Yes, Driver has control structures. while loop | try/catch statements | if statements | . | . | . . College Board FRQ . Look at 1 unique FRQ per pair/treo on AP Classroom that goes over Methods and Control Structures | Provide teacher a Jupyter Notebook, Video, and/or Code that cover key concepts Make this better than AP Classroom, specifically trying to get these reviews to cover key parts in under Five minutes | This option could use your PBL project and concepts if they were tailored to Teaching. | . | Explore Testing requirements in AP Classroom Video | Explore AP FRQ that teaches us about Methods and Control Structures FRQ, 18:10 | Make sure that code runs completely, complete any portion of FRQ that is undone. Complete FRQs in a Jupyter notebook with markdown description and comments is a requirement | Integrate Data Types into the discussion as this is import concept when studying early materials | Integrate Definition of Methods and Control Structures in comments and definitions. | . See code here . . Code . Binary Addition . /* * adds two binary numbers */ public class BinaryAddition { /* * tester method */ public static void main(String[] Args) { String sum; String binary1 = &quot;0110&quot;; String binary2 = &quot;1011&quot;; // outputs numbers in binary form System.out.printf(&quot;number #1 in binary: t t%s n&quot;, binary1); System.out.printf(&quot;number #2 in binary: t t%s n n&quot;, binary2); // calls addNums method sum = addNums(binary1, binary2); // outputs the sum in binary form System.out.printf(&quot;sum in binary: t t t%s&quot;, sum); } /* * takes two binary strings, converts them into ints, and * adds the two numbers together */ public static String addNums(String binary1, String binary2) { // Integer.parseInt() --&gt; String to int int num1 = Integer.parseInt(binary1, 2); int num2 = Integer.parseInt(binary2, 2); int sum = num1 + num2; // outputs sum in decimal (number) form System.out.printf(&quot;number #1 in decimal form: t%d n&quot;, num1); System.out.printf(&quot;number #2 in decimal form: t%d n&quot;, num2); System.out.printf(&quot; nsum in decimal form: t t%d n&quot;, sum); // Integer.toBinaryString(sum); --&gt; add numbers and converts the result to the binary String return Integer.toBinaryString(sum); } } BinaryAddition.main(null); . number #1 in binary: 0110 number #2 in binary: 1011 number #1 in decimal form: 6 number #2 in decimal form: 11 sum in decimal form: 17 sum in binary: 10001 . Primitive Data Types . int Practice . int[] nums = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; // regular for(int i = 0; i &lt; nums.length; i+=2) { System.out.printf(&quot;%d n&quot;, nums[i]); } . 0 2 4 6 8 . double Practice . int x; int y; double casting1; double casting2; x = 10; y = 15; casting1 = (double) y / x; casting2 = y / x; System.out.printf(&quot;With casting: t t%.2f nWithout casting: t%.2f&quot;, casting1, casting2); . With casting: 1.50 Without casting: 1.00 . java.io.PrintStream@16982d29 . boolean Practice . boolean a = true; boolean b = false; boolean c = a &amp;&amp; b; boolean d = !(a || b); System.out.printf(&quot;%b n&quot;, c); System.out.printf(&quot;%b&quot;, d); . false false . java.io.PrintStream@41ba5a40 . char Practice . char[] letters = {&#39;H&#39;, &#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39; &#39;, &#39;W&#39;, &#39;O&#39;, &#39;R&#39;, &#39;L&#39;, &#39;D&#39;}; // regular for(int i = 0; i &lt; letters.length; i++) { System.out.printf(&quot;%c&quot;, letters[i]); } . HELLO WORLD . String Practice . String message = &quot;Hello World&quot;; String newMessage = message.substring(6); System.out.printf(&quot;Before substring: t%s n&quot;, message); System.out.printf(&quot;After substring: t%s&quot;, newMessage); . Before substring: Hello World After substring: World . java.io.PrintStream@16982d29 . Math.random() Practice . int max = 5; int min = 0; int range = max - min + 1; for (int i = 0; i &lt; 5; i++) { int rand = (int)(Math.random() * range) + min; System.out.printf(&quot;#%d: %d n&quot;, i, rand); } . #0: 2 #1: 4 #2: 4 #3: 3 #4: 3 . Wrapper classes . Wrapper classes provide a class for each primitive type in Java. For example, the wrapper class for int is Integer, char is Character, and so on. These wrapper classes extend the object class. . The syntax for a wrapper object is: wrapper class name = value; . Beware, though. Not all data types that start with a capital letter is a wrapper class. For instance, I originally thought that String was a wrapper class. After googling &quot;is String a wrapper class?&quot;, the results told me that String is not a wrapper class because it does not have a primitive class that it wraps. . Therefore, wrapper classes only wrap the eight primitive types, which means there are only eight wrapper classes. . The following cells consist of the previous primitive type examples converted into wrapper classes. . Integer[] nums = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; // regular for(int i = 0; i &lt; nums.length; i+=2) { System.out.printf(&quot;%d n&quot;, nums[i]); } . 0 2 4 6 8 . int x; int y; Double casting1; Integer casting2; x = 10; y = 15; casting1 = (double) y / x; casting2 = y / x; System.out.println(&quot;With casting: &quot; + casting1); System.out.println(&quot;With casting: &quot; + casting2); . With casting: 1.5 With casting: 1 . Boolean a = true; Boolean b = false; Boolean c = a &amp;&amp; b; Boolean d = !(a || b); System.out.printf(&quot;%b n&quot;, c); System.out.printf(&quot;%b&quot;, d); . false false . java.io.PrintStream@39325e30 . Character[] letters = {&#39;H&#39;, &#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39; &#39;, &#39;W&#39;, &#39;O&#39;, &#39;R&#39;, &#39;L&#39;, &#39;D&#39;}; // regular for(int i = 0; i &lt; letters.length; i++) { System.out.printf(&quot;%c&quot;, letters[i]); } . HELLO WORLD . Where are wrapper classes used? . One example of where wrapper classes are used is in Collection objects, such as ArrayList. ArrayList can not store primitive data types, and as such, need to be configured with wrapper classes. . ArrayList&lt;Integer&gt; nums = new ArrayList&lt;Integer&gt;(); nums.add(1); nums.add(2); for (int i = 0; i &lt; nums.size(); i++) { System.out.println(nums.get(i)); } . 1 2 . . DoNothingByValue . Key knowledge . The value of arguments are passed into a method&#39;s parameters . Java is pass-by-value, not pass-by-reference for methods . If you go down the StackOverflow rabbit hole, users claim that everything in java is pass-by-value. Honestly I&#39;m not too sure how this works, but people on StackOverflow really pay close attention to detail so... | . Unfortunately I don&#39;t have enough time right now to look into it closely. I might in the future though 😃 . But basically since everything is pass-by-value, arrays are also passed-by-value. However, the value of an array is its reference. Therefore, when an array is passed into a method, the elements of the array can be changed directly. . | . | . Pass-by-value: The value of a variable is passed | Pass-by-reference: The variable&#39;s reference is passed. This allows the contents of the variable to be changed. | There can only be 1 return value per method in Java | Classes and generics allow &quot;pass-by-reference&quot; | . Overall explanation of code . This is my thought process as I went through the code. It&#39;s easier for me to figure out key knowledge by going through the entire code and documenting what it does. . Anything that I highlight below are included in the key knowledge . Do Nothings . main() . An array called nums is created and set to {1, 3, 4, 5, 5}. The data type is the primitive data type int. An int of name value is also created and set to 6. A data type (but not wrapper class) of String with name name is created and set to blackboard. The code outputs Do Nothings and executes the changeIt method, passing in nums, value, and name. . changeIt() . Within the changeIt method, the argument nums relates to the parameter arr, value to val, and name to word. arr is created to have 5 elements, val is set to 0, and word is set to a substring of the word argumenent of blackboard. As such, word is set to black. . However, before the variables are reassigned to new values, the arguments were passed into the method&#39;s parameters. For instance, if I use a for loop to output the values of arr, I get 1, 2, 3, 4, 5, not 0, 0, 0, 0, 0. . . . The for loop (the actual one in the file) then assigns each element in arr to 0, and outputs it to the terminal. Lastly, the value of word (black) is outputted. . . Next thing in main() is changeIt2() . changeIt2() . In changeIt2(), the arguments are passed in as parameters of nums, value, and name. Notice how these parameters have the same name as the arguments. Based on the comment in the file, we can see that the name of the parameter can be the same as the arguments&#39; names. . changeIt2() essentially does the same thing as changeIt() . main() . What&#39;s important is that when you go back to main(), the for loop after changeIt2() outputs all of the original values of nums, value, and name. This is because Java is pass-by-value for methods, which means that the variable&#39;s values are passed into the method, NOT the reference. On the other hand, pass-by-reference allows you to edit the contents of a variable because the **reference** to the variable is passed. . Limited return . main() . An array named nums2 is assigned to 1, 2, 3, 4, 5. value is assigned to 6, and name is assigned to limited. name is then assigned to the return of changeIt3() and masses in nums2 and name. . changeIt3() . Within the changeIt3() method, you can see that the parameter word (passed in as argument name) is assigned to a new String. A simplified way of writing this would be word = word.substring(0, 5). Both ways work because the shorthand for creating wrapper classes is directly assigning the class to a value; however, behind the scenes, an object is still created. . Within this method, each element of the array is modified to 0, and the word is modified to limit. . main() . Back to main() again, the elements of nums2 are printed out. The edited elements from `changeIt3()` are present because arrays are objects, and the value of an object is its reference. . Do Something with Class . At this point, I got a general understanding of what the code does, so I did not need to write out what each line does. . This section creates a DoNothingByValue object with an object name of doSomething. The constructor runs. Since the object&#39;s value is its reference, the constructor can directly edit the variables. As a result, the output in main() shows the changes of the constructor. . Do Something with Generics . This is basically the same thing as class since generics are like objects but are more general, so you can specify different data types. . IntByReference . Key Knowledge . This switches two integer numbers to lowest to highest by using a tmp variable | These variables are passed by reference because they are part of an object. Therefore, the before and after are changed following the call to swapToLowHighOrder() method. | . FRQ 2018 . Question #1 . import java.util.ArrayList; import java.util.Arrays; public class FrogSimulation { // data type is an integer private int goalDistance; // distance in inches, from the starting position to the goal private int maxHops; // max number of hops allowed to reach the goal // ArrayList is created to store hopdistances // Data type is wrapper class Integer, the reason is because ArrayLists can only store wrapper types // and not primitive types private ArrayList &lt;Integer&gt; hopDistances; public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } public void loadHopDistance(ArrayList &lt;Integer&gt; hopDistances) { this.hopDistances = new ArrayList &lt;Integer&gt; (hopDistances); } private int hopDistance() { if(!hopDistances.isEmpty()) { int hopDistance = hopDistances.get(0); hopDistances.remove(0); return hopDistance; } return 0; } public boolean simulate() { int hops = 0; int currentPosition = 0; while((currentPosition &lt; goalDistance) &amp;&amp; ((hops != maxHops) &amp;&amp; (currentPosition &lt; goalDistance)) &amp;&amp; (currentPosition &gt;= 0)) { hops++; currentPosition += hopDistance(); } if((currentPosition &gt;= goalDistance)) { return true; } return false; } public double runSimulations (int num) { return 0.0; } public static void main(String[] Args) { FrogSimulation sim = new FrogSimulation(24, 5); ArrayList &lt;Integer&gt; frogJumps1 = new ArrayList &lt;Integer&gt;(Arrays.asList(5, 7, -2, 8, 6)); ArrayList &lt;Integer&gt; frogJumps2 = new ArrayList &lt;Integer&gt;(Arrays.asList(6, 7, 6, 6)); ArrayList &lt;Integer&gt; frogJumps3 = new ArrayList &lt;Integer&gt;(Arrays.asList(6, -6, 31)); ArrayList &lt;Integer&gt; frogJumps4 = new ArrayList &lt;Integer&gt;(Arrays.asList(4, 2, -8)); ArrayList &lt;Integer&gt; frogJumps5 = new ArrayList &lt;Integer&gt;(Arrays.asList(5, 4, 2, 4, 3)); sim.loadHopDistance(frogJumps1); boolean goalReached = sim.simulate(); System.out.printf(&quot;𓆏 reached goal? %b. n&quot;, goalReached); } } FrogSimulation.main(null); . 𓆏 reached goal? true. . 1b . public double runSimulations(int num) { int count = 0; for (int i = 0; i &lt; num; i++) { if (simulate()) { count++; } } return (double)count/num; } .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/13/CSA-w25-combineHack.html",
            "relUrl": "/2023/03/13/CSA-w25-combineHack.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Data Types",
            "content": "int . int[] array = {1, 2, 3, 4, 5}; for (int i = 0; i &lt; array.length; i++) { System.out.println(array[i]); } . 1 2 3 4 5 . double . double[] doubleArray = {1.2, 2.3}; double sum = 0; for (double num : doubleArray) { sum += num; } System.out.println(sum); . 3.5 . boolean . boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } . It&#39;s a cloudy day, not too hot, not too cold . char . char[] word = {&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;!&#39;}; for (int i = 0; i &lt; word.length; i++) { System.out.print(word[i]); } . hello! . Wrapper classes . Wrapper classes provide a class for each primitive type in Java. For example, the wrapper class for int is Integer, char is Character, and so on. These wrapper classes extend the object class. . The syntax for a wrapper object is: wrapper class name = value; . Beware, though. Not all data types that start with a capital letter is a wrapper class. For instance, I originally thought that String was a wrapper class. After googling &quot;is String a wrapper class?&quot;, the results told me that String is not a wrapper class because it does not have a primitive class that it wraps. . Therefore, wrapper classes only wrap the eight primitive types, which means there are only eight wrapper classes. . The following cells consist of the previous primitive type examples converted into wrapper classes. . Integer[] nums = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; // regular for(int i = 0; i &lt; nums.length; i+=2) { System.out.printf(&quot;%d n&quot;, nums[i]); } . 0 2 4 6 8 . int x; int y; Double casting1; Integer casting2; x = 10; y = 15; casting1 = (double) y / x; casting2 = y / x; System.out.println(&quot;With casting: &quot; + casting1); System.out.println(&quot;With casting: &quot; + casting2); . With casting: 1.5 With casting: 1 . Boolean a = true; Boolean b = false; Boolean c = a &amp;&amp; b; Boolean d = !(a || b); System.out.printf(&quot;%b n&quot;, c); System.out.printf(&quot;%b&quot;, d); . false false . java.io.PrintStream@7efb4dbf . Character[] letters = {&#39;H&#39;, &#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39; &#39;, &#39;W&#39;, &#39;O&#39;, &#39;R&#39;, &#39;L&#39;, &#39;D&#39;}; // regular for(int i = 0; i &lt; letters.length; i++) { System.out.printf(&quot;%c&quot;, letters[i]); } . HELLO WORLD . Where are wrapper classes used? . One example of where wrapper classes are used is in Collection objects, such as ArrayList. ArrayList can not store primitive data types, and as such, need to be configured with wrapper classes. . ArrayList&lt;Integer&gt; nums = new ArrayList&lt;Integer&gt;(); nums.add(1); nums.add(2); for (int i = 0; i &lt; nums.size(); i++) { System.out.println(nums.get(i)); } . 1 2 . Math.random() . Math.random() returns a random number between 0 and 1, but not including 1. The data type that Math.random() returns is a double. . . DoNothingByValue . Key knowledge . The value of arguments are passed into a method&#39;s parameters . Java is pass-by-value, not pass-by-reference for methods . If you go down the StackOverflow rabbit hole, users claim that everything in java is pass-by-value. Honestly I&#39;m not too sure how this works, but people on StackOverflow really pay close attention to detail so... | . Unfortunately I don&#39;t have enough time right now to look into it closely. I might in the future though 😃 . But basically since everything is pass-by-value, arrays are also passed-by-value. However, the value of an array is its reference. Therefore, when an array is passed into a method, the elements of the array can be changed directly. . | . | . Pass-by-value: The value of a variable is passed | Pass-by-reference: The variable&#39;s reference is passed. This allows the contents of the variable to be changed. | There can only be 1 return value per method in Java | Classes and generics allow &quot;pass-by-reference&quot; | . Overall explanation of code . This is my thought process as I went through the code. It&#39;s easier for me to figure out key knowledge by going through the entire code and documenting what it does. . Anything that I highlight below are included in the key knowledge . Do Nothings . main() . An array called nums is created and set to {1, 3, 4, 5, 5}. The data type is the primitive data type int. An int of name value is also created and set to 6. A data type (but not wrapper class) of String with name name is created and set to blackboard. The code outputs Do Nothings and executes the changeIt method, passing in nums, value, and name. . changeIt() . Within the changeIt method, the argument nums relates to the parameter arr, value to val, and name to word. arr is created to have 5 elements, val is set to 0, and word is set to a substring of the word argumenent of blackboard. As such, word is set to black. . However, before the variables are reassigned to new values, the arguments were passed into the method&#39;s parameters. For instance, if I use a for loop to output the values of arr, I get 1, 2, 3, 4, 5, not 0, 0, 0, 0, 0. . . . The for loop (the actual one in the file) then assigns each element in arr to 0, and outputs it to the terminal. Lastly, the value of word (black) is outputted. . . Next thing in main() is changeIt2() . changeIt2() . In changeIt2(), the arguments are passed in as parameters of nums, value, and name. Notice how these parameters have the same name as the arguments. Based on the comment in the file, we can see that the name of the parameter can be the same as the arguments&#39; names. . changeIt2() essentially does the same thing as changeIt() . main() . What&#39;s important is that when you go back to main(), the for loop after changeIt2() outputs all of the original values of nums, value, and name. This is because Java is pass-by-value for methods, which means that the variable&#39;s values are passed into the method, NOT the reference. On the other hand, pass-by-reference allows you to edit the contents of a variable because the **reference** to the variable is passed. . Limited return . main() . An array named nums2 is assigned to 1, 2, 3, 4, 5. value is assigned to 6, and name is assigned to limited. name is then assigned to the return of changeIt3() and masses in nums2 and name. . changeIt3() . Within the changeIt3() method, you can see that the parameter word (passed in as argument name) is assigned to a new String. A simplified way of writing this would be word = word.substring(0, 5). Both ways work because the shorthand for creating wrapper classes is directly assigning the class to a value; however, behind the scenes, an object is still created. . Within this method, each element of the array is modified to 0, and the word is modified to limit. . main() . Back to main() again, the elements of nums2 are printed out. The edited elements from `changeIt3()` are present because arrays are objects, and the value of an object is its reference. . Do Something with Class . At this point, I got a general understanding of what the code does, so I did not need to write out what each line does. . This section creates a DoNothingByValue object with an object name of doSomething. The constructor runs. Since the object&#39;s value is its reference, the constructor can directly edit the variables. As a result, the output in main() shows the changes of the constructor. . Do Something with Generics . This is basically the same thing as class since generics are like objects but are more general, so you can specify different data types. . IntByReference . Key Knowledge . This switches two integer numbers to lowest to highest by using a tmp variable | These variables are passed by reference because they are part of an object. Therefore, the before and after are changed following the call to swapToLowHighOrder() method. | . FRQ 2018 . public double runSimulations(int num) { int count = 0; for (int i = 0; i &lt; num; i++) { if (simulate()) { count++; } } return (double)count/num; } . . Notes: . Answer what are Methods and Control Structures | Explore AP FRQ that teaches us about Methods and Control Structures FRQ | Look at Diverse Arrays, Matrix in Teacher code and see if you think this is Methods and Control structures. | Look at Diverse Arrays,Matrix in Teacher code an see if you thing this fits Data Types. | .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/12/CSA-w25-class-dataType.html",
            "relUrl": "/2023/03/12/CSA-w25-class-dataType.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 200], &quot;duration&quot;: [50, 40, 45, 20] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 200 20 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 200 20 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 day4 200 20 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( . Notes: . Read a JSON file: pd.read_json(file_name) | Read a column&#39;s info: df[&#39;name&#39;] | Print info: df.info() | . To import pandas, run import pandas as pd One issue that I encountered on my flask portfolio was that the code could not find the pandas library. I tried running with pip install pandas, but that did not work either. . After some researching, I also tried running pip install -r requirements.txt. That also did not solve the issue. . I then tried running in nix-shell, and for some reason, that was successful. One hypothesis I had is that I might have needed to refresh my VS Code after running the install requirements. . Note on project: . My project was focused on providing class reviews. I recalled seeing a Google Spreadsheet on the APStudents subreddit that included student&#39;s ratings of how they felt about AP Classes. I made a copy of the spreadsheet and then took the difficulty ratings of AP CSP. . It took me a long time to find how to convert Google Sheets to JSON. I looked at multiple YouTube videos, but finally, I had to settle with using an online tool that could give me the JSON output. After importing it into my flask portfolio, I was able to use pandas to print out information of the data. .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/09/CSP-w25-unit2_3.html",
            "relUrl": "/2023/03/09/CSP-w25-unit2_3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": ". Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab The file types are stored into the buffer. The contents of the file (pixels) are encoded into base64 so that they can shown in an HTML format. | Size, height and width, number of pixels These are attributtes of the image. They can be adjusted so that things such as the size of the image can be changed. | Visual perception, lossy compression When images are more complicated, such as having lots of different pixels, this can result in lossy compression. Lossy compression reduces the quality of the image because data is lost. | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . cd can be used to move between directories. . What are the command you use in Windows terminal to access files? . cd can also be used in Windows to move between directories. . | What are some of the major differences? . A big difference is that file paths in Linux use / (forward slash), while file paths in Windows use (backslash). This can be an issue if projects are moved between different operating systems because a path specification on one operating system may not translate to another. . | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? Images might be present in different directories that could interfere with the code. For instance, one probelm I originally had was that I added my images in a folder that I created. I then had to change the images path in my code to account for this change in path. | How does the meta data source and label relate to Unit 5 topics? These are like attributes, similar to how an object has attributes. | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython is basically the precursor to Jupyter Notebooks. I&#39;m not really sure how this realtes to the import statement in the Python code below. I googled this for awhile, and the closest I got to was that IPython has APIs, for example, IPython.display is an API. This is the link that says how IPython is an API. | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;happyFace.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . [{&#39;source&#39;: &#39;Internet&#39;, &#39;label&#39;: &#39;Green Square&#39;, &#39;file&#39;: &#39;green-square-16.png&#39;}] . None . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? Base64 is used to transport binary. It is different from binary in that it translates binary into printable text for mediums that do not support transmitting binary. . Translate first 3 letters of your name to Base64. bGls | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? I have been a consumer of buffering when web pages load slowly. | From your consumer experience, what effects have you experienced from buffering? I get impatient when things load slowly. | How do these effects apply to images? Images take a long time to load. | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? This code seems like a series of steps because the program goes through each line of code and calls functions as needed. | Describe Grey Scale algorithm in English or Pseudo code? The gray scale algorithm uses numpy to iterate through each pixel in the image. It then changes the RGB values of each pixel based on what the user defined. | Describe scale image? What is before and after on pixels in three images? The PIL library is used to resize the images. The height is calculated based on the width of the image. | Is scale image a type of compression? If so, line it up with College Board terms described? The image is compressed. It is probably lossless compression, but even after searching, I have not arrived at a definite conclusion yet. | . Notes on code below (things that I learned):The function display is part of IPython. This can be seen with the import statement, from IPython.display import HTML, display. This allows the Jupyter Notebook to show the images. . In this line of code: . image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) . The %s means that it will format the string as a string data type. The following string is the image in base64 (the method seems to encode and then decode? Which is interesting because the output returned seems to still be in base64) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) print(&quot;LOOK&quot;) print(base64.b64encode(buffer.getvalue()).decode()) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . LOOK iVBORw0KGgoAAAANSUhEUgAAAUAAAAFACAYAAADNkKWqAAAGYElEQVR4nO3d7W7aSABAUbPi/V+zj8H+yiqi/ggLsce+50gRxFBq1fHNjG3obXpMf6Z1t5X7t6flt5nlS8+be821ZRzj8ebjfNbZtsfSvry0no+Zx5+XLd0uve7iv8k/Sw8AXJ0AAlkCCGQJIJAlgECWAAJZ96NXYHIZzNmNdtkF/Nh92o7Nb18HyLnZlqwZ+ufDFBjIEkAg69Up8PfvTWthPGfZD4dYz1dPgvwkht4LDMcZ7aTUq+8F3pUpMJDlLDDvsi1ZM/TPxwjHAE2Bz22IqQz/Ocu+M8R6jnAMkHOzLccy2i+koY8B7jEFfv6zSxHdWsaYhvhBDjnbvjH0+u4xBTYCvDbbcl9bv3DOsj2GWM89psBLz116zaVljMkIcF9b+8Zo28MUeGHZ3GsyHtuHdwz98zPqFHjof7SYq0y5ruIq22OI9fyNAH5iCsw4zjblujr7ywftdQxwbQr8k7+H41xlxFEx2i+kSx0D/P79b14IzTiMAM/lLPvTEOu51xT41REg52F7clp7fCS+6wDhc4y4P2iEkyDAz9l/PsgIEM7FCPCDjADhXOw/H+QDUYEsAQSy9pgCP2buA8zZdYq/xwjQNYDAkEyBgSwBBLIEEMgSQCBLAIEsAQSyBBDIuk///+Lkrwub526/m1sGcLh3Pg3msXE799xpEkNgEHt8HBbAT80NpLYGW3PPnXvNvzgGCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkLUVQO/bBS7LCBDIeuf/Bf5+3397CZyOESCQJYBAlgACWVsfiLp2TG/p+N9tZhnAcIwAgSwBBLIEEMhyHSCQZQQIZHkvMJBlBAhkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQNZWAB+7rAXAAYwAgaz7tD7Ku608/vXY3C3A8IwAgSwBBLIEEMh65yzwY+X2+QtgOEaAQJYAAlkCCGS5DhDIMgIEsrwXGMgyAgSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsu7TND1eeP7t6flf398+uVIAezACBLIEEMgSQCDr1QA+Hy98fLt9/np+/twygMMYAQJZAghkCSCQ5TpAIMsIEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgaz7NE23jefcVu7fVu4vPQawZNdGGAECWQIIZAkgkCWAQJYAAln3aZoeB/y9zgYDcx5Pt3PLlm6f768tm6bJCBAIE0AgSwCBLAEEsgQQyDrqLDDAHGeBAfYwwgjwlWsCj15X4DVL+/fSvrzrCPC+9MCORA2ua+j92xQYyBphCgzwxUkQgD2MMAJ0EgSuy0mQDaIG1zX0/m0ECPwmI8ANogbXNfT+bQQI/KahR4DOAgNZI4wAX3GmdQWWGQECHEkAgSxTYOAIpsAARxJAIEsAgSwBBLJGOAninSBwXUO/E8R7gYHfNPT+bQoMZAkgkCWAQJYAAlkCCGT9C5u82zfDcRhpAAAAAElFTkSuQmCC - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - LOOK iVBORw0KGgoAAAANSUhEUgAAAUAAAAFACAYAAADNkKWqAAAGY0lEQVR4nO3dW27iSABAUTNii73/z1kG85VRxPgRBmKXfc+RIoihaasd31TZhr79+fPn72ndbeX+7Wn5bWb50vPmXnNtGcd4vPk4n3W27bG0Ly+t52Pm8edlS7dLr7v4b/LX0gMAVyeAQJYAAlkCCGQJIJAlgEDW/egVmFwGc3ajXXYBP3aftmPz29cBcm62JWuG/vkwBQayBBDIenUK/P1701oYz1n2wyHW89WTID+JofcCw3FGOyn16nuBd2UKDGQ5C8y7bEvWDP3zMcIxQFPgcxtiKsO/zrLvDLGeIxwD5Nxsy7GM9gtp6GOAe0yBn//sUkS3ljGmIX6QQ862bwy9vntMgY0Ar8223NfWL5yzbI8h1nOPKfDSc5dec2kZYzIC3NfWvjHa9jAFXlg295qMx/bhHUP//Iw6BR76Hy3mKlOuq7jK9hhiPX8jgJ+YAjOOs025rs7+8kF7HQNcmwL/5O/hOFcZcVSM9gvpUscAv3//mxdCMw4jwHM5y/40xHruNQV+dQTIedienNYeH4nvOkD4HCPuDxrhJAjwc/afDzIChHMxAvwgI0A4F/vPB/lAVCBLAIGsPabAj5n7AHN2neLvMQJ0DSAwJFNgIEsAgSwBBLIEEMgSQCBLAIEsAQSy7tP/vzj568Lmudvv5pYBHO6dT4N5bNzOPXeaxBAYxB4fhwXwU3MDqa3B1txz517zPxwDBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyNoKoPftApdlBAhkvfP/An+/77+9BE7HCBDIEkAgSwCBrK0PRF07prd0/O82swxgOEaAQJYAAlkCCGS5DhDIMgIEsrwXGMgyAgSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIEsAgSwBBLIEEMgSQCBLAIEsAQSyBBDIEkAgSwCBLAEEsgQQyBJAIGsrgI9d1gLgAEaAQNZ9Wh/l3VYe/3ps7hZgeEaAQJYAAlkCCGS9cxb4sXL7/AUwHCNAIEsAgSwBBLJcBwhkGQECWd4LDGQZAQJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWfdpmh4vPP/29Pyv72+fXCmAPRgBAlkCCGQJIJD1agCfjxc+vt0+fz0/f24ZwGGMAIEsAQSyBBDIch0gkGUECGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQJYAAlkCCGQJIJAlgECWAAJZAghkCSCQJYBAlgACWQIIZAkgkCWAQNZ9mqbbxnNuK/dvK/eXHgNYsmsjjACBLAEEsgQQyBJAIEsAgaz7NE2PA/5eZ4OBOY+n27llS7fP99eWTdNkBAiECSCQJYBAlgACWQIIZB11FhhgjrPAAHsYYQT4yjWBR68r8Jql/XtpX951BHhfemBHogbXNfT+bQoMZI0wBQb44iQIwB5GGAE6CQLX5STIBlGD6xp6/zYCBH6TEeAGUYPrGnr/NgIEftPQI0BngYGsEUaArzjTugLLjAABjiSAQJYpMHAEU2CAIwkgkCWAQJYAAlkjnATxThC4rqHfCeK9wMBvGnr/NgUGsgQQyBJAIEsAgSwBBLL+AZu82zewmymlAAAAAElFTkSuQmCC . LOOK  - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - LOOK  . LOOK /9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQgJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCADwAUADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwCqQzwxHP8ADyfemMRgKhOe/wBaszRiFRAOVjO0Ejrjiq6xnq3avtaXwI+Vb1YqDZknk+5zTupzg+9NLAcAUvzbua1Mm7j+RjGfpmnAkoQDTMAqetO28CpbJuAA3EkZHpTwwHb8aizg88e3Wjr1P41InIk3jmoy5Jp4GRzRtXP+FFybkeWzU4j9Rg9cCgoqrwPzpoZlYEDOffpRe4CMMZwD9KUBsjkDsKDk846GlPTigYY+bk9KNyg9R6+tRHG49j9aTcMU7BcmL7l45zTf3h4zx/KgZYdKeEdjnFAXEAbHUgU8E4BycUqxsSM8fjT0gOeN31pNoLgGJ9c08Mx+bHNPWBtvJNWVgIYD5ulZSkikVgW9Kd0AwDxUnkt6kY4OO9O8lzj5iccc1PMihgztwSaNrDPB49Kk2MO/APFOCEbc547YpXBEaAlx1+n4VLt43bcf0p20hun05pzEqCcdfak2Mjzgfd7+tKMn5gpxn1FGGFPVHYEYxSAicMOqNn8KjCSZ+4x96tt9eB6U4KFOQOOxo5h2KoGSflbOPTvUioVOMtu9xUpQbevPrSqo9xRzCsMC7WBHbmpcsB8gDZ5OaQkM556dMVPGAqAjAOOuKhsaQyIlQNydPm9qmM6tkopC+4xim9TyR/jS4weo/Go3KHKN0YBAIB45qF4f3m9UBx3wM4qYNijPB9MUK6FoclOd0xP3geRURBc47CnsDhFyBxjpTlUAda74O0UZyd2RgBB0z70hBJqQDJ9h6UADNO5DI9vPvUgTGDj8KCMGlB561LYhgXDHGc0u0L16/WlBBNIz/L7+9FxBnGabyeMmmbyfpSF8cf0oAsBkxz27CkLrgALVfeMjI5pwfcQAv5UBclLbj92k2M3BNall4f1O9AK2/kp/el+Ufl1rpLDwtaWqh7tjcyemMKPw715+IzLD0d5XfZanoYfLcTX2jZd3p/wTkbfTbm4QtBbyyqOrIpIoNo0JIkjZSDghhjBr0N5FijCRqqIvQAYArndYi81d65Z89+leZDOpylrDT1PTlksYx+PX0MAJ6CngDPvWZdvOsjGUSRgHvwPz6VXIJPIbd1z3rpeaLpH8Tl/sp9Zfgb6gMe34mnjgcD8qzbe+2x5uGw2cDA5P4VdMsfAMqjI9etdscRTmrpnBPD1abs4ljd8v1qTeSvbj0qmlzbkyqZMeWfmJPAq0rDblcFSODmnzp7EuEo7ol2kYNKB9KaZDnBwOKb5mGyTwT2poRJtp442g1CGzg7v1pxYg4OPSgB/XIyc0igFhzTQ3Ynr6U4HAHHSmA8xjbwelIqhee9OB3dep9KUjv14qbjF8okAk4GKCgCKD9M0of5cHvTtmCMH8KV2MiJ7E0nXvSuCxOM8UwIMg5ppgx4AJzwCKerELjcRik4GCePoaQjPf8qNySXOCckEnpTCeOuSKaE7k8DHIpWXKcNQAK+STzx7U+SRQikHnpUYXYCf1oSMM3JB9cdqYjCljwwPsBioiMDHap5WKnGT9PSq7ZJya6Y7ESeon3jye1A46Um7BxSkntTuQ2IehJpME84FITgZzzSFwy45HelcEBbaeecelRFgVIx+NNaTAiLnaJV3pu43DOMj8RQn71tkatI+M7VGawliaMVdyR0xwleTsoP7gz2GfpjFG0ttAHJOMetamlaU2p3RhVwu0bn9q7Ky0PTdMAcR+ZMP43OT+HpXFiM0oUtF7z8jtw+U16rvL3V5nM6f4RvLlwbh0gi3YOG3MQPSuusNG03SzuggUSdPMc7mP4np+FK9wWG1VCj9aYdqkMxNfO4jGYjEaSdl2R9Hh8Hh8PrFXfdl17gAkDk1C0jP1NZk2u6fbTxQzSrGZjiPJ+9+WfUVTfxCh1NLRkWOMtgyM3HTP9O9cipPsdbqJl6/1OO0ARcSzswRIwpOSe2a5e58VyTSm2DLEeeNvp+FQXPiFFdruFGM5kIttxG2Bf93u3vWDLNJK7SMyl2dmI9yc/hW8Kb6mM59jQbVnfJuDk5PpijV9RtZbsjSiXtkAwzgrzgZ7ZPOazdr9SMt1HoKcjMnVAfpWnIr3RClK2pTvdS3G3lVPLZAwkBPB+laQlml2BJhuGML03fjTGihuWjLwEbORk1dSC1mwss/k7fmZz+gz61sp2VkZtFGVmj8/fBKhkwSV5GeP6ir9pq6QIkF1GyoqcSKM5/CtKO5sLoiKN53ccbgv3vfnFbcPhywv4Y1ebbNs3BWIZl+o9K1jipUdXoYzw0K65dzh7jxNJDIC1srQbivmBiGI7cHueK0NL1aHVEL27fvBy8TH5h+H9avXvw+vrqeeHMX2fO6NlbAP4djXLXvgPX9Nm821hmcJkhl4YfQit6WZO+rujnq5XTlHT3WdaHIBB4Ge9PVwcHIrhY9d16xBhuY5HI7XEWSPx61Zj8YyJ/rLBNw7o5H8wa9GONpSWuh5k8srx2s/mdorYxyfpUyMCOvOa41PGkJ+/p0h/wB2QH+laNt4s02Q/MJ4jj+JCf5Vqq9OWzMXg8RH7J0gznvTmJHyj8axH8TabGVLSSc45EZ+Wrker2U0BmiuUdV6qDhsd+KpSi9mZypVI7xZeTnA71OCcYHQVjDxHpedouVBH+yf54q4dZsEt2lNxEYwQCyvnGfpSbT2Dkkt0WjkAEnBqMg4A5xSR3lrcoskUqMh+626nJLHPEJIiGQ9COaaJaDJ4Wkb/ZOKVlO0kA8elJ85Tk7Qe9USNXfjGcZqVd3PXFNztGPX1pQenJ/GmIezARnP61CmTICMhQeakbcUPJ/Go0yFwQeeaFsJmTcZeQsv3aqEc5PHpV25ZQ/Ws6SRd5UEfL1FbReiM5Jtuwpb/vnvUbTqJvKDAMU3Lnv1p95b31nBBcCzmmUt8yBTwMVhXZnmumMlq8CuQpRwccZ9frXmYnMYRvGm9T2MJlkpWnV2Zehv4pmEZlUyH045q0XihUSTglCQNo6n1rLFrFHP9oAwIiWZ2OAPStGDTZdS+UyvgjnIACnPFebPM6jp8j37npxyuiqvtFt2K93qq3sEJe2QeTsjR+vyqMY/XNXNKsdRukjazJtohy7twoPt61t6foVpp6BXLSkc7WHBP0NbccMk+Aw2qOgHavJc9LI9NyVyPRrGHT12I7yyOfmkbgH8P8a2CWCFPlXPPTJqKNEgXCjn1pwyRnnJqUurG5XQoUIhOCWPpWbrM0Fpak3UqgyoQI2fbgd2Pf6D1rYgTdKAeMVyfxIiWOxtZUBLvMMk+gHApxkudJhyNxuZNzpqXFzZX+ovNZ2vlsUUDnAzsI9M4HFZ9/p9yLuOa4dZWnj8xG3fMcYyG9xmul8WumoQ6bc275tBblwwPBHb8RisW2ee+jaSVgY4k+UJ1Gcev0Fb0pyfvPqTKEbJdjPVVJAeNSeQSelR7Qsh9CeKtu6j5MLjqFA4qOQHcAT8uOKtsTSRGAO5GfrTlU/Nk85qNkBwAxAzz9KlKxqN6oM9AB39aSIY5FJJGelTraxyqjtwwGR0NTJbIy5xhTyBmnkqvA7e1a0073Rz1JK1iqpurXzBalUEhyXCjcOOxq/o2ox6c3mvDLLcBzuJOARjGSx/lUDQXNyjCGEuMcFTW3ouioQZr+3LFh8kcnAUe49a2qygoPmMaUKkprlOj0u+k1C0W4+ztEGYhQTnI7HNX2aRe2Qe1Qx3MMYEKFUCKAFAxgf4VYTDHcrgn614kt7pWPcjtZu4otw6jcCn+6azrzQrO4m8yS2hmYfdZ8Eg/lWrkgYLYzTlYMPlGR6041JRE4JmE2kWEg2zabGT3LQqf1rKuPA2jTTieMzW5DZ2xNgH2wc8Vq6nq8dretDlXOPujqDUA1TCFhEc4zy+QPzrvhGrZSXU4pVqabXYZJ4b0h1YPp9swYc5LL+XNcZ4m0Sz04Rix2RvI+NrSZ49j1Fd7bal5yncsRXGAduOe9VZ7OO/dUuYISu4fIVyc/WtYTqQe5DdOdna55xH4U1d3XFtFKuM7o50IP6irk+jpYRi3vLTypjzk8hl9iDjPWu2m00wZWGL5R2yf8Ky7tnMTRSW7uvTnkf/AFq6KeKd9dSZ4bmWmnzOJayWMllOcYwEYg1Ja+cj+ZBczQsW5wxzketb8WlWUwAnSRW5J8uUge3HNasVzoSRLbPZ7gvA3ybj9O1dP1jT3UcroL7TRlRazeLCEk+YgYL461H/AGldF932j2wV4xWvDJoc7lEs/K+bAJbA/rVsLoqu0bafGDjAOSSD6jPBFDxEn0ZisNT30MNdXlwA2w47ipRrMijiNSc960rTSoJ5hHcW8Plk4EqfJx2OOaWbwzb7/wBxI+zuHTkfiD/Sh4mcdLi+qU5a2MxdZ2n5oHC/7LA4qf8AtmzfAaSRT33r1qKfRp4W+UB1HoKqvYyNn90TjkgjFXHGSvqZSwVMNehubaGN1BxKxBZRkoB1rDEklrerPnzCg3bmHBx61PLf32sz3UkTOtsrKPJDYVR9O/Iq9YaeLidQ4JRFCkEcN/nNeXUxVWUryep69PDUacLRWhfm8U3Mccc772lBy/lttXHbGPwrMlubrXpQ4QNszyeACeuT3NdHa6ZZRZSG3G0gArnI4+tX1gjgUfu40A6AVxuxq6vY5+z0GNYR9qAmbgsMfKcdK2EUxArCFTJ6KKuDnlkwPfr+VKkauNzDg9sY/P8AwqTOUpSGQ2oEYkZixY4yKvwhgm0nNQqdz4UdO5q0AFAHU0rl04ihPWo7qdYEAPfrTbi68oYA5rNlnc8k5IoWpq7LYvwag5JlCYjDAsT0C96XxNpS6zpwsyQJFcSJnvjP+NQWl5Da27QzhcPjO4ZBxWlHfQ3hAXhhypJ/z61z1OaM+dLY6adnGzZxkmiXeleGzLLIjlnEewKdqbjjv161kfa0ijZItqBuOB1H06V13i4X11ohFvnZG2Zo16lQev4Vxf2No2jMqgCRA6uvQ556V20Jc0bvcyqrlYiIWZgMEnketKwYZ38AcZqJ5FDsIwTtHJNTWun3Wp/Pn90p2phc5Pr+FbPTc5732IWBdWYAkJyxAzj61ZtdK1G7gNxDayvCOPlXrXW+HPDraZG8x3tK3JZhljx6VuaXqH2pbrcpCwSBA5HXgH9K53WtsaqjfVnC6fpeqXKi3htpEIP+sbIx7ZPFdXZeHnghxdnzJPRBwPx710IIbkHI9acpOSNpAHf1rOVeT2NI0IrcyEtYwdoQgD2qwLIuOWwPpVm7uRbWzOcbuij1NY7atc7ljfacdWUYJ9qcIymrkzlGm7Fiew8tkaNwzrztI5xUTyNGeYpB74rUhSR4VLsMleQeaZJGVUllXb6jihOLdmD50royG1GYHgsP5VF/bFwrcM2c9a0pIIpUyQGU9wQRVQ2sW35QVz1yK6IqC3RzzlN7Mo4kndpGjQsxJ3DjFRNAxJO1mA9BU86xwKXMoVUBJboMe9Y2s6jJZwxLFIC7n74HIGO3510+0aVzjlTXU27a28xN0kZJB4BfpV+S2nWAOt2kQXoQhJrntD1kzxNHchAybeQcEg9M++a2odU0+aVrcysSoGTuIGSegPesJVJOV+h0QhDk03Me7vNQhmAFws27+4Xz/OsNVMlvvUnePm+tehNFpcTgNPCrAZw7D86pPFpNlC0Vt5bu0bPH3ViM8ZrdV4PSxzSw8+5xpmklG1mZnPbbwfrUMkZL4cneeSQBWosMItRPLdIY1Tft/iZuuMGss3UwG1YxK56ntg9PxrphJvRHPJSjq2MtpTbzEcMwfcARkH61Ym1+7mRopoLZlb5ciPBGfSs+eXy5BJGGDHoPSoTNNKCCS23nG0V0xppxuzLndzas9Qjt4lieDzGPIbI4FMbxG6N+5hAH+1WYrt+5yMe/9Ka0DFiQnGTzmoUV1LTNtPFbdJYEP+71q1F4jsZiFkDR59Vz/WuWiKfaUV1yCdjUTwmKOQ4HAIBHr0rHng1J9jXW6R0+iaYNMhmhnRX3SblCjJYY71teWrw4dFiT0GN2PT2qNLuCa3jltm3RyLuVsckdKrkOXPX3Oa8xty1Z6Fu5pW4TOIicDj6VZZEPbLdjjJqlHMscaqvApw1FYT8o3H0rJp9CkkWY7SRn/efKPepGtUA+WRmX2quNSdid53A9F2ggU/7WmwJGiRYHRBgE+tZvmuaxhBos28S4bKFVT7x6/wAqimmGSQxjQcYcYZj7CoftMuMBdyg9OlUpZFmlYb1BXG5QckZ9aSTbKk0lZCXuoRW1tJPKx8mP5nbGTioFuI5VEkMiOnYoQRWTNqFvq1nHaAGKK/DxLITkqQR1HvUehQ3FnaTWcy/LFMwSTG3ePUV0cmhkndmpI29wWJNSwTPbSCRCCw6BhwagkkSCOWST5UjUsxPYCqNvq0V3PDBDC5klDMpJ+XAHc1dk1boVzJM6231RLqQHb5UpO0IzcSccjNYh0B7i+nS1mEFjEFxK3P1Vfp6n1rQ043CshdPlCEbOCQfb/GmvcQ2d+lnuaOSZdwXccHtzzjOa5V7krwNZTjKNpjX8M2ZiZAUlnIDZ5PB6EjPPatiLTja2aIGwyjnYMFzUiXNvACWZUlCgsmSTjpmqK+I7RLmWJwwYPtBIzuP9KlzlIalCOxNYSz3FsqXrlLhWbpxlc/Lx64qa31K1N41osnmS+gHT61y2raldR3P2t9oY/chz0AH8zRb6ugVWhKmQ4CD0BPPPrwBUatXS0F7ZX0OynkkU/KSqkcDb3rMnkaU8TZbHKN3+n/1qwk1u7tWAL+bk5ZnOe3T2rR3S3Vk9y0sdxHtLYX7ox79c1pSelyZSUti0ryM372PqMA5z/wDqqWBLcufPKgryARx/9esSW6gitImjkkklC5ZDzsPfGap/a55M7dwHcsSMfjW8noYXUZbHci7tz/y1UfXimXEkUtu6CaMZ7lhXCu82zf56soPzYycUeYN0a+arFscA84PesOVR95FvEt+60dFLqMNvA6xvvMfygRDnOeeK5u88VbJWiQyMw3AMRxkdqzdS1KTTyojhWUvIVO4kYAHtVSa1ZgH+UyTDd5Y6gkg10U5uS5mc07l1fED6lpbwTwOksoPMQ42jk5zz0+tYs949zcNFIXkETMigrjpwKsJMsFxKLWTdvhKE+metZqRqt1IQx3c8evP+FaN3RLtK5t2cP2mwuyOZUIZCvZlUkD/PrVnw7cx3EMke7LAh1yeR7fpUujQmPTi/QyNnHoAQP8awLHzdFumuXjYW7Js3kZ6tj+Yriu6ilFfIqCXKmzTl1dob+5j1FxvEjZYfw88D6YxV1bh3ddrnao+XI4Fc5rRS91l/IbeJdhJHTJAzU1+9zbWZkVnVQwDHOeK6otpJ9TOS96yL8tx5dv5bNmRx8q+oHU1Zs4VlsBcSko2C2xjiue+2i4vNPlUbXjba2Pf/AOtmtHUbo20s0uX8yQqkIfPTFdMaslZGUoa2aNK105bhiDtJ7bycnHf6VppZJbQP5caI5UDeBknn3rmbPVDBq0nnMI0jiCjJ6Zwa2lvHkUtEwYfWtYzfKuZiso9CtfwhWjCoQN2TjoB9KQovk424OOfrU2923vIRn2qN42MIKvxnGT296zrVXJOPZoUUlqZ8sUaX8o2/Kfm4PQ4qWW1luLVju6ncB75zVWeKYXUkrqQpCgMR0BGBzWvHMiqI2cqccADNGH966Y56WI/D2qi3SSB3YbTlFxvOO4H410AlSUBl+Yn8K88FlfQTiS3ZmkV944+6ScYPaurh1iOOGBZ/mkKjzGjXC5zjgVnKDeqPTlY3SGIC5+uO1N8n1FUtYmvLKGO6tcmKNwJYyo+Yeue1XdIu01S2WUIUbOHXPAP1rJppXEld2JVQjgDb9etThGUdK5jUvFZsdae3t7cMsDmKQSdz6jHpXT2l5DqNotxbMHQ8Ejsw6j8KiaktTSFthrSiMgO6hiCVXPLY64HeuYtblrjVNV1iJX+zeQFQbT8+Bn+mD9a6Sa2EssckkYLRHKEn7tMEYRdqqqL2CjApRaQSjdnP2GjRvHZXKq0Wxd5iVvlBPfnnqBWxODHA7kEccHGcUSX8MDuvDtHGZG2noOlc3falLelrpSViPyBCeMD/AOvWiUpMxlaOxofb471L2J0cJLBlN5HBPysv0yeKq+GrZ59bB8kRxWyvgbj/ABHrk9gBj61DosCTNJEUbIxwD97NaekqLJJiXQ3HlsqqG5z2GPwFOdoppEpdWbVhqttexSm33IqnkyDqPUVmjTJrvU3ma7VVjkLxMAS2PQg9PrVfQY0R0MnnBIo8BXXbk+lasm4TeZgFMkZU8V59VyjN8g3JW1Ibu6kPiJpMGWJYlXzT0PPP6k1j6hHO+rSEEGEgSIcfxHoB7g5rTu41SELBK6TOSd6nB9e+eOacIg8CuV5T5zt74H6U1Nrb0Ic1Yz5ZRBNG0jFnKliCMgqOvPrisy7he3uhcRuwT7wC9DznNdKsKhjwGxHz7H/INYF/5tlG77FaFmxH/s56CtqEtOVk82oXdz50QaBsxbeCP4iepo0+9YQJH5oKhicZ49xioUHm6HFMg24OCB2HI/wqro2nPLKtxMriIfMjcYYA1rCKjFod9ToirIx/jBGRxzSW7L9qjiZiNjq7DPYMDUTXWyJkY89vaq7z+XCsoAJJAb6V0ezurPqRKok9B1zfiNrufeixK5wNvQZ4GarTSQwW0AJCkrk4/vccfqTVKS5Lvcoke5ZCUK9x0/z+FFtbS3qxwRsGCXOFGfvHB4+lc0qH2bGikmrlvVISiO+d7q4Ax245J/T86nj0ppJ7a5ZY1WPbuJblj16VqWlizXhsrwbg6l8If4sZ/TNSTadLHJFbmLdt+YbDnjkdBWN2oqKCztqYl3Yqsj7AC3/LPaeACeKyZoXjuhCAS0jAkKP4Qcf0rqriBrWUCbAOcYz6VZgt4jZzz7Qk0cxkiYjOMr/KqhU5dGRGOrILZHns8xKoJzs3dM+4qnc29vPCdNmJwECK+M4Pr9c5rY0+G4uNLWVdrNG5Cqf4gBWZqVu1vqFuSpUsORnuDU0YuM2E78qaJrXS7K1eB7aHIWPy2V8HnH3vrmtA6ZZ6kJLe5jLK6c7Tg1CsF09n9ohwyhto38H371DLcS/ZyUlKyLIoYrxnBzwfwrecrrcIaO8kcvqvhq50SVmjWWeHfuimAGAvo3o36U1ydQijLeYx++d3PPr+ld1qt2sdnLCJFMzjbyc4/OuHF6VuvLnQREg4K9GAOM4reF7XY52crIhe0e4lknm5aX7ygcADoP0FaNqrwWiAjHJHHpTUFs0hkOwkfxDv+NJLN5kmNxCgdPauj2fNG7ZyTqWdkXEaMyAeYUK9+w+tMjZpppGB3bBkYPvjpWesmcqpIzjtWj9mkhVFkVEZztX1A9Sfejmg5XfUz96xYjWOT7yqMdSwzUNxbbJvM+4wGaEufJkZdq9zx2q46PPb9SGYcEHmuSdaom+yOhRTRReBAiu2QwQFjnqcVmeS8rRyuxWLceeuMc9Ppmr92S1secYAHPfoKnKJDpcatgu0hHToB6V2paHY2V7u/nnKxySEp2XPFVLXUZbaGSBQnlsQWVySBjPP1qcyOkpfaD06jOAeM1SulC3a+WuTICduM/pVci2Gn1I762aO9uHGxlnAlWRzkknk49a3dF177NY3FjcFBGIHaJ0Xad2Dkcfz61imPayLPGobJ+fOdw44/SohEQxUtgOuB7HJ/wAaydNS0Fd3ujqNM8TQpobi6YfaYEwgOf3o7HPrUej+I7nUbk2lxFD5h3EMoIAAH865mBiqvHL94KAR1z3qSCNVZZVDKMHktyfWp9gtRqUtLmrbMNPtr21iR5fOTbtz8wbv/wDqpGhhMywFsBUBOGGAeM/qf0NTpP8AY0KwxBp5sFmz3bv+lZ7wEXrXE4UzM5CKV4jC98HqfeueM7yaKVkrmqs0VrMwhYgvgFsccdB/9erllp07XaXMhSNN5fH8Tg561k6beRSXUnnRB/KYMCR1qXVtZvEuIjaOu0n7jccAckmoqc0nyQXzE5Lc6hPJebynkw5yVj7tjH+IqvueJmjBUhsqB9ev41Rt7u3v2t7ty4mtzuBjPIJGCD7HJ/Sr8NxaqsE0riOIvtLE8jPeuHllHSxjNXdzN1Tfb6hEGDMqxgsVHXJwB+lVnvZJSqpvDMuAAeOT1A/Cti7to7oSzyuxUg+WmeMLnaffnmsK6u/JnSUd+QB6Y5xXRCnfUNLamtbTl7IKH6yFCcdgBVXVQDpU7L8xGMcdD61StbuW3s2AIPmOSMN0Ge9TW88tyG80DaM4wMZNKUeWV10EoO9ytBJ9msFCqDGSQD6en8qhadtoy4A7Lk1oJHDDbmIjOATub0qjCltc3LLkkhS3Bx0r1MHVptO6MatOcnowaN2iDlOV4fPYdj+tDZSwkJweAQCfersQOHjIJ3Jj6Zzj+lc298ZYruJgqss2wfNyVBHalBus0l9lp/IzceX5o1LSaO3nDMq5dvmI9x1qUI8OsRP5jLCmJI9o5P8AnvWRYQw+fBModMRkfe6EfzragukkgjcRgtGevJ+tb1Jcr54rVqzIj2fQupdvY3HmhSfLBwCf9nFbNvqNybOO+kljaBnCPHtwV5C53fU5rnbi6guIWYBgxXpj88063u9umTWpJKgMeB3OP6ivOhRsveOn2uuh0crRvYyzOqyMCWXvyTx+tZl/dGG2lRdoBwPcn/P8qvWViBpqssh2swdzjgY+bH8qwtU3sMKpCqA7H3rijG9T0NakmorzNbw3qMAtzaMGM7SEgkHkf5FR6qk9xqasqjYhWNVXPc1kaVI0NxHMucKVJGeoJwa0Fv8AzNYMm/MYft0wK6NpXZKfNDlZd1S7g8ryLds4chscAcEEVmyzJHZhT98vu6dsCi7uQNUufLVdrNg/UDmqU0hdCXBCjJA6VEmtUOTdxZ38yVnd9x7Eg5rMu4YpCwkzkNlWBwQcVajuleMMzYLdhVeb95vf2zjP0r0qjipRb2OKDlrbcdHDGbHch+cHHNRsGRdxAyOOB0qS1wLeQNjG8Dr7UyZiF9QDitI1LtxvoRKPUjt5A8ykrkqwA56mtzxA7G0DwfKUZQr9m7nk/SqOm6Yl9G0iOYmRvvYyGNM1bzwrwP5rMh8wjGVAB6n2rCokpwa6G9OLtrsyta6yWAW6HlyHAIHIrcsLoNDNIzfKOAe+AM/1Fc8t6rxhfJ+fGclMY+lMN+VXBZ1ByDhcVpWo+2jZaM3Ssad0HmDIEJ2DqvPIpiTvMkBl4WMMPTNTWxI1SV+RumbIJzjIFMmhxdLGQX3EHrjPNdOiLLVlB9okeHAO9Rye3P8A9aqnkhZDMQN2Bz7da24SPMnkiXb0WP1xzWLdX0UV3PE+BEu1UYdSf/1AflWN3JuxeyHzwI9qhGNxwVY89v5VQu4GSVNrchQdpHcDn6dacl6ZbpV6Ju2iPpgA8H8qdOMggPuIH+f1qVdMnVFaW3DkyBsNtxweKux2M5tI2ZVWLGxnPY5y2fTjn3qtnC7c53Dj3rR0lR9okjfGxgdwkbIJHtTqSlGN4losW8SwkSF8rGhIJHt1/QVQnuA9xC4TAOSDuzkEH/61aZ2i3fIBBUj9KxGDG88s8CGMgE+nArnhFO7FJiWsj/aJfLGMrjrwDmpZQGuUJwQEK4J56VE8xi0QG3+a4Ex3IFzlTj/Co45WMb74W3DGMDgVVne6M7mlopYXU0fADL0zxWzpmJxcRuu7Awg6496xo5VNrDJGNsrn5z/Kn2upGJ3Iz5jjGB2GOa55RvJsaeh0166wWUUZbO2I5J6HqK4+Z2dU/wBkYrX1SctAFLHHsfWseJTK4CH7pO7PSimJskhkjZArSqvPf35rWZhHHgZBX8+lYz7XDgEIy4xhetaMTo0B2kblUAgjGDilKOonJ6BJKslq5c7SeOKdYWyx3EV1CoKgMpJ6MCOfxqsyK0WDyG7+xz0p9uYbcGNnwM4wcmtqb1aRMqjS0LKhVZkyWB4z7df8K5G8sg9/P5fD7nG4d8nrx75ro7i7jhhnaBd7hTt5wM9v1qlp5jMKofmnVAGPUtx1/E5rqo2p3aW5zNuW5Vs43ncCMEKq5/HP+FX7G1eGWZ3lCIzZGD2xQLd7GTf5ZUKpHToW7VOb61NmqeeqhSd7k5x61NSo3pHVBYtGF3tIw6qAEKkZyen/ANaqlllbWRhyxUj681rabGbrToZPMkZmUthjxj0NZUay2zsgVSSWIGc5HeuX2iaa7M0cbNM6TSbgtpE9qsoaRnG6MdUUqOfxxXK6nPcC6MRmlWIlt6F+OnA/UVb0jWI7nXjaPGY5Y1ZRu/5aJg8ilvREsM7MMhogoOP4s4/lUwjyTba3NJu6XkR24YWE8sfLD7vIwfaljHly8/dyR8tP06Aw6esTMf4s7u4JrEtr90vZ7Z1ZznhifucnP54FQo8/NboGxrO489GUZDgms8atDP8AK7OzsvAxjuBVgtjy+c4ziqb6UtqHnEmU6qGGG9ea0w0Kbbc+hFRu2hHu3SGNFBy2Bj1q2sbw28iSjDE5GDnjNV7RP3kbc48wY9zmr0+Cuw8sxyT7EirxMvdivIimtWyBmCwEAc5yf6fyptwNyt65FQXPmQ3RjJ+XaGA9cdBU0wPlYfhvlyPcHmmtEn3E92jY0fKWQQrjLE59eauRvJ9kJdtzo3Gew9KhscNaWRGOUOcfU1bmikXTmeNCx8zkAZ4rmk7ydzqgtDntUEAntymNzcSYHSq7abY/ZzM0svQkeWBjFSTwyLqVwZYyvlRbnB7E9P0ptzLFbW6ecu4SArx7V10ar5uRf1oTrcshSs7uJAuJPMye+QasyvbzWj3UEv7+3YIykcNuPH6fyqre2StHEQWZmIBjxx7DP5VZg077LaiScH95KB5aD1PBz25/nXc0rXNEWoo/s8MxaUeftUCLPKrzhj+v5Ulh4fWU3F1d/wCrxkR+pA4z/Oqfked44KtKVS3iJkJ7nYAF+hzn8K0dQ1GSw0uGGBwrTkvkkHHI5rGzW3UtdzRsvD+nDTFtWMa3zxeZDISdz+re4PP6VyFwsj6lcxkYZWPH61Z07WCGEV5cysiKyxE/fU9hkdvbpzU85jkvnusYMgVmweh5yP0qZJx3EzIk5idhkbRuH54/rVjTgxuVkBJGBuB9806SPbPINu5dpGD0PenWwe1MTMuQWUNjnvTbvGwrmm4G2QN93aQB+FcrqOoxM7eXuUhFLMTk8AAj88/nXUyrvtJMAFiODXITWAkuniG1F3fMSc5xg0qSVtSZNvYtW8ym3UuxXKlm79+n60QzygNIkP7nkKS3Q+vFUmJtCscillI25ByCx/yKsXNw0Kx2ZcEMPxIFPlXQRorLsaNnJIwHf2yP/r0CQLIJEwXztP41Uj/0q2mwD8oCnHtj/H9KXeInJYHcxwD+lYW1aEXpL0FY0C8r2OTkg8mh71Y+EEayNzjHP/16pFQJRIxwCuOfrUMsgMoaVsKhzsHt0J9qIwQGqlpLMsMvJ3yDOfoeakMbwS7x93BBOM+v/wBamaffZttpZm2EA4PIH+c1alnhMLuEBDcYH5EmspKUZK5LdmRSEtAhQ9BjFKksIeMy4DMSWz6VXt5QzOobKg5XNQS4W9SQkY3bcU17rdibpGhqj7rSSGFBv7fhXLW73du8Qmif95KEUjPGcjn9Km1ee4SKZUYKmMdc9+2O/So7Cdoljich1J3sScnjp+WM1109KbFNX947f7dbOky5AUHaSOMnpn/69cxd31qNTjsINpiYnz8KSFHTBx0PX8qklVryJYYgTJJ0Cjr0OKevh26tLOS8nVolUZIYAZzXLQgoRcmy4w5lzdjTt9RksbaJbeRHt41EYQ8ED1+tWIyP3KriSZVyWXsp9T9TXN/aopLfykkVnDcqv1qzpWqRR6sbMTYfY/A74HTPrgZ/CinSvd21M1PoZ0DXOj+ItPe6KlzI6eYD8rKQef1rsXhN1Gt1NGwiAD4AOWx047dq5vU5VkkhnuID8rh1jY9Ocj8z+lZMGvXv9twNcXMsgaTG3ccDdwcCuuVF1I32aHGcbanbmWNvPK5TaFABP+fWubZTHrdxITnKA4A6Z/8A1VfuLyWF5I02lJME7h6dMfnWOkjSXtw5blmA/ICuOjQkk5dLBKonoajvuhyOqqeO/Sm3DP8AY44mTbtxkk8461GJiASANw5A9arSaqJc7miDMcY+8T+tOlF2aSCUXLYltS6ugUnC88fnV2Rvnz/dxj6cVjz3b29uio0qbicmPvx0NWxL+6UkFmPo3SlVhKfKwjFx+Yt6zvcu6x7isYIA79/61Utb1Z4BE+fMUfN7jGamnie8V4o1PzxAsQeQBis+3twjsmArdDgV1xjF00mS4u9zstEHlWUbTHHzHHetWHXIYYh5SM0eSFyOWNcE4M4DKWBAwBuIx+FbGny4sliO53UjK9ySaxnSjF3Wt2aqTS7F3VNRudYKQR2jJHuzI4GSfbpWXc6RdXMwdjEqAfKruQR+AFbxjYAqgwT6nFZ2o2t0uxi8RU5wEbOOnWuuFGMJcyOV1pSH2MySSssg2n727GcDGK1PPTfA0oPAJVVAz9cnv71zkEIbMp3FQOFHVverFrOwkN04xGgBbv8A57UPU9GxNqtnbm6+1WTyGW4ZV3N/AwyB+GAP8mqDSJcmQTxsJQvyZc425zj6Z/nUqPLfee5bbuwAfxyfxqpqVuIliIugszAMnOTnrhvYjI/KhDTWxoRQWxWMJChkUq2/b833aktyYYsyJuTzTkH+7jP9av6Rbw/2SLhkdJCSrqezKORnvRIibZS771Kj5R2PGfzrKTvoIySxlLSk8Hnr29PyqSJ48eWyYV+h9Paqd5cpbRRRY+UqdxI7A8/oaoDW7ZdsYVzt6Dbnp05zVKE38JnJnVF1NspHQis67Y/ZmHkgdCZAOSc/y/wrIPiBnJIRwv8Asrj/ABp7XElygInn29cMcY+lV7FrclSEYPchUeJRh8bsjtjFVZoFku8MwyG3bs8n2q7C37yTn5UH15+tORRJIHCfMDxSatsaqz1HrD5Fv5cMpDseXPJ61WuSrXqrnICliPQE1cYhUcYzgd6ikt45rgTchyB0PFZKGtxPXYhtI3aFd7sw3cZOcCiWS03pGi5lbluM4H1PHbp61Zt48wFyMrnio8KxdgozGxwMYxStdk21KfnixumfhgykLxgMDyPypEvJZGIN0FU8EBR+dPlMcjiKcsN3Q56e1UTG1u7IQW3YPQ9Oau3NuQzUS5S2EhJDbR8pqo7tcSxTCc7AxYL7kc5quzb7eYng9qqkubbYuevFNU0ZMNTvTLFtQlU54z1OetQWcoRGjLbXPAJ7cGiWIySKuwhRkEfjxULK3mnqCWxyK61CPLyols2or8xsGmbO1cgfpgVn6hrF7PII3uGEajBQMdp564qvclhDCQTyPz4qZtDvJtssoVFZRuAOSAT1/CphCMVqCelyewwgaXPzkM359D+lJpavJr9sythxIvJ9CcYqNzJZP5eeB8rZHUetRu8lpMksPEsbKyn3HNbQp2bfcy5jpfEWUt41BztAH5Vy08hS4hmUDckgI/nXQ6tOt3ZQSR/dkjBA96xo7Oe7uo7WOJmlZsbcdPWpoK0fe8wb1OkuJWZlyVICgKByDWe4EeXYYB55Oea2LvS2sbISSff3KAMdP84qpEyLIWeNXAOSCM1we09nLTY1Ubq7KenzzSIxlZSyN1UdQafNFEZWJKgA8lR3rZk01bqJWtx5Y65QdfY1msiQyGK5hIVTh0HWjmUZ8y6lxkrEStFJakMx8wvnp0ApYSPNB24AGCB3qGNgwYxRhBuwvPP4mpM4kPIyMiiaUVZFDo/3kmNx3Y4HXd7ULGHAdyiFmxhfTB7fhSJA5gaQb8A/wDJP+FRR/KOA25jzzk/hWzVkgHsxjbBIByOlSDdbxrI5Ocgn3qOS0e38stDLEsgJHmjGcenrWvpFhHJqUVretDLEkmXJk+U8Z69xz074xTbSE7s29G8N3utRW+oG8NvaM+WieP5pF9iDwD6+1WvEenRaSlqUuC0kpcBWQAABeuAPetuXXrQYgS8gV1AOIiGwB29q5PXb1rzVrfM/mJHEzK3YZPPH4VyKVec+aWi7GklQjDlitRfsiWlq8krqFOEBHOe2PrzWbLIqaW0Icb3OSB25pLy6ubtElkX9zE2FwAAWJAz9cflVKBftUwhw6nzAh3DGeeo9RXUtDZMsxfJaGJSd7r1zgDNLFGxbdPGCkcivxySoPI/KkuLdzqEyI6+WrlVAODgcVeiia2s5pxAH+QoiycEknk88fSkTolcfY38f9jjYPJhE7ERtj5eWBB9OR0rLXUQ0yES5Y5G3PUDiqdhbXeoWlwYYPItTKTGCCAXJwVXPJyRnNWF0m6s5ADbyvNwu7bnj0GO1UoxtqTzdCpqRLvlHZkjXKk++OD+Qqvc28SvHKIBGruQeBwOBVp2YXYjZGUbTuUjBPB6/iBWZazSzs8Ug+UE8HjGSP8K6YRfLoZT3LSXUcCSrKrRrGcPnJ4yRn9KuQtb3FuJ0nk2c/LjB4POfT8qoXkLK0UkkZ2XkIUHGCxDEcevb9KsfY5dPgRJlCSPH5hX0LMeP/HaTSYIk0ydpLyZCqpHtyqDjbjH889fan3F8Y5yn3TkhMj7xxwPzpfDNodQ1a8lYHYkQAJHG4n/61Q60AtzGrOrAx5JHdlOCf0FRypzsXzWRdlO4Er0YAj8arzs4QkNhQduF/rTrOZ7m0WV8bhkEA+n+RS3MLGbbDE0jsg8zaM7QOjY/P9KxUbSsxt6FF76WyEnBKs27af4Wxg9aZBfRzqSyOZCfusen4fSp1sZDIqXETBCeNxxnHpUx0PzSPLXn+Haen41TUSOYzmcq29kTd23cY+napA5lBJDH0qz/AGMWBG45HDAnHNRTaUyRZ+0eWB6mhJPqS2QSSKFYOJP++ePzquqEDqCOowe1aml2X2hD++/cgH52GB+GetOubG2tioRxICMFs80m1F2ZLV9ipbiKQbGQknvmppreORV3DlTwaIoYUk3RowIHUnirIDYJwMGocrvQmxQW2iRs4brwB9c1p2KRhxHLGGU9c03yyBkBefSghlAxndnmodS5SpsjudF8xlzPEOdq5Iz7Z/lUGr6UWZ2tFaQRgBiikgNjkVZlWTYHlBAPT35q5pt68ELR5+Vu3Y8d6uOJlsHsdTIs4prW2iM0BYgF1XGQM+v61fTWNRSQSRGMSE9FiXP54qlLqE80bKZDkOVIz+lPtnaW5VY+uO5xVOt1aGo20RfutZvtShWO+MahOjBNpP1qrEpODjIOOB3rSm8+OwlysJUrhsHBP4GsaNsowz8p7ZrlqOnLWJcotbmpe6wyxxmwDRRqBlTg9D2rLnuDLvldizMep6mnsVmiXYoU9D74pIYomBjdSHJx7HuKfPGTa7CSIcsqFCMAcjnPNaujaG2sy7Fu4YMqctIpwD2GcYqmIVkDsSMADrWppMwtbedWUBGOeO5A6UKpz77scV3Oq1y4stG8Gpp+n3lvPMmyCYo4ZiOdx/E/zrztly5cIQuc4HAH41pNcsfsqyeUY1YMRt498/4VWmvpbtSk2DCpPloqhdufpWVKNouQ5z5nc2PFV0Ls28kzxxJDCdhHO7Pp69BXO3rBbEXMS+XFM21AfYcn/PrV+4mheeKXaZNoAKk8ZHbmrlvf294r213bqYj2TrkdOTXVGUFKxD1OStredlZ0DMoOSwrUsZJIWk88DOMDnpmpC1utxhhMsAJHlqwBPJ74roV1bQbeCA/2UshUYAc5x+ec1vKtGSdiNCpcata3EBijhVBu3c89uPwH9Kjhu7VH3uSXAwpBwFH+NcqpOflUj8ad5kvTbn64oLuzrJ9StJ5TI8cTHbtAMY6duc5pV1G2dl3yzOitkRsFxj04/GuSJmHPkgj607zZFQloFB7DNKyC7PQB4jtSvTBHQFhTf7fUnARCP+uoH9K4O33zNt8uNTj+KTFTiwu8bgsZHfbKKpUeZXRlKpFOzZ0+puNRMckZSKaP7rB859jxVbT9HsLZA0/72fduZ9/H0xWcmmlR++naPnA+Yf571DeWhgh8yKdpMckE9uOn51t7GajvZGSrwbt+h11xqECRoFijbZ9wAA7fp6Vharqk17EyiBd4BCOfl2+5xnNc4Z5vf2y1MMtwTjKj/gRrn5VHW50o3rTXZdMihh2BkUZlcDBdvXH0wKh1DVdN1GHabRomLFiygYyevFZA3gHO0sR1NAikYc4P0NS5K90VY3l8QWKwLbx2IRQmwN3A+tL/AG0Y8swZVJ4y2P5VhC2OcDH86PsozyzfQLWbaYG2+uQybflUlem7JqP+3ZEfIKjtwKy/s8a/3/xNSrGBz8oH0qNAbJ5NUkmYsSckdaabmTbnggHgkA81EI0J4FPKBjjGT06UtibjTc3B/iI96jzLKTmYD/eapjbkccfnTTDx1X86WgXYoedEAEsbfrij/SXxukIB7Y4poQjnI496RifU1Ld9gRIQ8H3rkIT780LP5HzLcDJ9G5qqxBbccbh3qJm6nvUqm2PnNMX4I+aTefRmzTlu0O3GFx2BrELH1pPMINaxo2JdRm9G8UbSPGg3SNuYnnJ9ajth5Ujsx+9x9BWMLh16E/nR9rkHc1XspB7Q3G5BzMxP0qKKZ4WyEB/HNZH26T1NIb5/U0lQ6B7U2HuGcEOM85ApDdszA7QCvpzWKb1qT7eVQrgc9+9P6vbYFUNv7YEbOFH+9SperuO+VFHquM1zj3JY5JJqnLcbj1rWOHXcOds7nz45QI1uGYZzg4x+dRecpyAV54xntXDCcjoQasRXKjqCPoaqOFUU0uom2dmWDPGu4bF5/Gl8xVuGckEHA4+lcza3sCPmTJHbnNXG1dcbYkwPU/4VnKjJS91BzM0XliR2Xa0mTwehqvLrPkf6MI8p0IJrIuz9tl3mXZ7Y4/nTBZqx5mHvwa1p0OXVsG09zfOnbRukmjA9mzUISNW4O76mpGcjjKj605AZh0247hTz+dEproWovqxh2HAVQKnjsXmQlUfPHUYH51JGCpwMdOpUVNumUcvkHtWTmWoiw6EuzfczKB3SMbj+fFMlsLYFY7WKTzDyWdgNv4AUpmOeEIY9SDyfx60i+eAVDMFPqeajmY7Ie+lRi4C/awVHOFPSnjTLX+KfP1Y1AIm53SLn3pBHjB80HtgVLlLuKyHvZWaybVdSPUVG+nx9Y2Q/U0MnJwv41JFG7EAIxJ9KjXuIrtYkDhUP41GbIlgPLyewFayWTyH5vkA7k0rWyxhnjfIxglhwfwoTYWMlY9h2ltpHbNIdol2sxHGc4rT+zlv3sw2qemRyfwpYbMO4XBKr0UjmnfuIoyQiPO5kOPQk5/CkVo24WJ24znacVuRWRBwYt75yQvUD8Aao/Z3V2HmFQD90baakh8pQZmRQNg56FmAqF5pE6+WAO2a0JUUYVrlx9CB/SqN1bwhQZDO/uWqk0JxIvtgAy3HsBTftat90c1WlHkCJ4d4yxznnp6imZVsOuQCMEEVXKnqRYuLOZAcKAR+NNJJ61HbwyyjcgOxflPI61YMDIwWQhCegJ5NZu17ITIWHFRhC7BVBLHoKumDHHmAk9gMmrFtZjzPMLEFe2OtT7aKFytmRNC8JAdSpIyKhNbF/CXcEZPHQVnfY5HlCbSCTxniuqE043ZDWtiqSPWljTzZAmcVcu9OWyISTa7Mu7cCelSWdh5210GZF464yKTrQ5borldzLmXypWTP3TjNRFh9a2dQsnQxrKE3NkZ9PasdbQu4Qd+57VrSqRnG4nGwwke1Rs6Dqa2hptp9kcKjs68lyeR9MVWu9Ogi1Hy4VleDavVs5YgE/hzVRrQk2kh8ttzLMqjoDUTIZTkKB+Na17ZssscaW5XjoB/OrOkWqwyySTYDD5VDevem6ijDnRStexz32dh0HFHl4PIINa98rG7lkA4ZiQVToKq7d/wB4/pXRBpxvcmUyky++PqKRd4I+bH41rf2TI2nteBh5YbAHr6mqJtWFNNS2YKVtxok/2yRS+a2eD+dWbPSLi5njHky+UWAZ1XjHfnFXNV0e3skXyGl8wnoxyCMfpWTnFTUOpWjVzp/sd5DIfJG9Ou4qOB756VXuJJ+N8oYH+7xV77RbtbmON3jZl+ctliTnPHpmq2yJiRu+UnpXno6NSssoHAXn1JzUsUckzlVUD/eq0kMWB/Fj1wP5U/zSpC5CikydSo0M4HJVRnG7PGfrTUgfcfMY47MOn51qQQtcGSNtuwoXO7pxVQ27wgboMOMHO3jHoP8AGpuDQyKzBlSTynYA5CE8N+HpU9wZpHWSVFaTO3aANiL6Yq5bFp1UudoPUKvJH1qyLG3ed/OuFSBflAXuev6VLYmivbacoPmMmWPPC4Aq08IiXmTYHbOc9/eo7WzknUKtwoU9SrbsegwOakNnbW7jz2klIzw48sZ/GpDUru1mI8b5ZXxj7v8AQU1La6dd3lmNR0ZyFx+FXjqCwqqwQRpuGRsUc++TUe9pg8uQy4ySxzj8qdwsZ62krSORM2P723JLe2aBbzxE+a7Kg7vJg/lxVkagWBh8zyz8xADHkAD+6PeqkYLFiTEXz92QnNS5MdhyyXBBjjUyR4JPTH054qnPJcqoCqxds5zjj6GrUkbtH8tvFyeqO2T7dahEYSRVMBg7Z/8ArmhNINTIlaUSgSll3Hgluv5VKsrCPZnywudxxuPHpmrtxapcQOPNUMOcjlvpmqEUeLotKPlHDgHk1pGSkgaJLqz2yq7b5ABnI7/hVO6jLzgeWVbb+AFdBcIiRx+WwZNgwQcjp1rU8P6JFqW6V4/Mdcj5ucj/ADisqdW6ISbdjkrGMwRHnIZs9K0haPMQTEflHUiunXwRcpftKroId2QuCMLW/HoUYyrFSD1GOtZuS5nK5sqUmefLptwZB5cbFD6dqsS2EtvbO/kttAyWNegJpMUYwG6+1Y+u2kkdvcMu+RFUKkSLySeufWsrRb0NPZNK7ONjt2n3sFyoYKT6UfYDuJYHCnAPrXZaPoziydLy2aFvM43EZYY68U6+06IS7BGFVVwqkZzWsanQylQduY858QAq9u2ODFgfnUuhDzWkGeCNuccrkf8A1jXU6h4NuNTlgVpEhiVW3HqecYGO1XIPC9tpGkSiPMk24M0h7gHgY9MVLmlS5b6jVGbd7HC6rEYX2O+8jvjFVcRLYxeTkTsoJ4zg5rp9T0YX0iMsmwv94Hmt9vD1gmm2zNGQbeMEMAMnjjP+e9OjikoEug5s4dY9tuyMRkt8ygVNZwC7DQGPEsfII7rmp9ReSOcruxxnpir/AIQhma/mnliYR+UU3bcDO5SMfXmnCq4++hOnzPlKb6czTgTZyVLZI9Ka6xFdnkKmI+dv8VdVrFosnkzrglcrj9f6Vy042u+eCMrWM60p1GV7JQViG1RI4ZQDhN5zzVYQRD+Af98itLT4PMtmcjIMjVbNlCVJLhfQV6mHnyRb7nJUpuT0K81lby2KIflKLlQE+XgVjta5TOxSvY45rp5WCWzHGVIx+FU18po8EbSeSBWeBqz5HfuOtTV1YdpkSvp6K6nCfKoJ4HvWRrFjlxtUYXIznGc+n4VsRM0K4SUAE5xjpU6M0ruzOuWyRxxSo0pU60qjejLck4pH/9k= - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - LOOK  . . Hack: RGBscale . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . PIL is a library that provides image editing capabilities. In the example below, PIL is used to scale the image, as seen with .resize(). First, PIL opens the image provided, and then scales the image. . numpy is mainly a mathmaetical library that works with arrays. numpy is used in this example to convert the image to gray scale. It takes in the dimensions of the image as pixels in an array format and then maniuplates the RGB value of each pixel. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-original.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.2 | . Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. An image that might result in lossy data compression could be one that has a lot of color. For instance, the clouds-impression image could be an example. On the other hand, the green-scare would probably result in lossless data compression because the only color is green. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . Red scale . Below is what I did for red scaling an image. The process was pretty simple, to change to red scale, just keep the amount of red in the image, and change green and blue to 0. This would be the same process for blue scale and green scale. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ image[&#39;gray_data&#39;].append((pixel[0], 0, 0)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Experimentation with PIL . Below is some code and documentation of what I learned through the PIL documentation. . PIL is an image manipulation library. However, one thing that usually pops up on PIL tutorials is variable name.show(). This does not work in a Jupyter notebook file because .show() opens up a new window that shows the image. This only works when you run in a Python file. . As a result, you need to use IPython.display. Something neat with IPython.display is that this function can directly show PIL images; there is no need to convert to a reconizable file type. . from IPython.display import HTML, display, Image from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from PIL import ImageEnhance from PIL import ImageFilter import PIL from io import BytesIO import base64 import numpy as np # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: path = Path(&quot;images/clouds-impression.png&quot;) display(Image(path)) img = pilImage.open(&quot;images/clouds-impression.png&quot;) print(&quot;Metadata: &quot;) print(&quot;Size of image: &quot; + str(img.size)) print(&quot;Image type: &quot; + str(img.format)) print() print(&quot;***********************************************&quot;) print(&quot;Rotated image&quot;) # rotate the image img2 = img.rotate(90, PIL.Image.NEAREST, expand=1) display(img2) print() newimg = pilImage.open(r&quot;images/clouds-impression.png&quot;) print(&quot;***********************************************&quot;) print(&quot;Blurred image: &quot;) blur = newimg.filter(ImageFilter.BLUR) display(blur) . Metadata: Size of image: (320, 234) Image type: PNG *********************************************** Rotated image . *********************************************** Cropped image: . Red screening . from IPython.display import HTML, display, Image from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from PIL import ImageEnhance from PIL import ImageFilter import PIL from io import BytesIO import base64 import numpy as np # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: img = pilImage.open(&#39;images/stop.jpg&#39;) rgba = img.convert(&#39;RGBA&#39;) data = rgba.getdata() green_rgb = (0, 128, 0) # change it to your exact bg color #average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division #new_data = [item if item[:-1][0] == 0 else (255, 255, 255, 0) for item in data] new_data = [] for item in data: average = (item[0] + item[1] + item[2]) // 3 if item[0] &gt;= average * 1.5: new_data.append((255, 255, 255, 0)) else: new_data.append(item) rgba.putdata(new_data) rgba.save(&#39;changed.png&#39;, &#39;PNG&#39;) print(&quot;Original picture: &quot;) path = Path(&quot;images/stop.jpg&quot;) display(Image(path)) print(&quot;Red screening: &quot;) path = Path(&quot;changed.png&quot;) display(Image(path)) . Original picture: . Red screening: .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/06/CSP-w25-unit2_2.html",
            "relUrl": "/2023/03/06/CSP-w25-unit2_2.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Title",
            "content": "import java.util.Scanner; Scanner sc = new Scanner(System.in); System.out.println(&quot;First binary?&quot;); String binary = sc.nextLine(); System.out.println(binary); System.out.println(&quot;Second binary?&quot;); String binary2 = sc.nextLine(); System.out.println(binary2); int num = Integer.parseInt(binary, 2); int num2 = Integer.parseInt(binary2, 2); int sum = num + num2; System.out.println(&quot;Total: &quot; + Integer.toBinaryString(sum)); . First binary? 11 Second binary? 10 Total: 101 . Integer n = 5; Integer n = 6; System.out.println(n); . 6 . import java.util.Scanner; Scanner sc = new Scanner(System.in); System.out.println(&quot;First binary?&quot;); String binary = sc.nextLine(); System.out.println(binary); for (int i = 0; i &lt; binary.length(); i++) { System.out.println(i); System.out.println(binary.split) } . First binary? 100 0 1 2 . public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } IntByValue.main(null); . Main method before changeInt(n): n = 5 In changeInt method Before n += 10: n = 5 After n += 10: n = 15 Main method after changeInt(n): n = 5 . public class IntegerByValueOrReference { public static void changeInteger(Integer n) { System.out.println(&quot;In changeInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n += 10; // behind the scenes, this is: n = new Integer(n+10) System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { Integer n = 5; System.out.println(&quot;Main method before changeInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeInteger(n); System.out.println(&quot;Main method after changeInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } IntegerByValueOrReference.main(null); . Main method before changeInteger(n): n = 5 hash code = 5 In changeInteger method Before change: n = 5 hash code = 5 After change: n = 15 hash code = 15 Main method after changeInteger(n): n = 5 hash code = 5 . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 681826736 In changeAtomicInteger method Before change: n = 5 hash code = 681826736 After change: n = 15 hash code = 681826736 Main method after changeAtomicInteger(n): n = 15 hash code = 681826736 . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://lwu1822.github.io/fastpages/2023/03/06/CSA-w25-dataType.html",
            "relUrl": "/2023/03/06/CSA-w25-dataType.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "AP CSA Tri 2 Final Project Blog",
            "content": "The theme of our project was ciphers. Our website consists of features that include a login, an area where the user can view/change their settings, decryption, learning about ciphers, trivia, notes, and quiz. . . The parts that I worked on was the login, JWT, CRUD for users, roles, and part of the log . In the sections below, I will document what I did to create these features and some interesting things that I learned. . Login and JWT . This was the part that was the most frustrating for me. I spent around ten hours trying to get JWT to work. I kept having CORS errors, and I tried a variety of fixes such as changing Access-Control-Allow-Origin in SecurityConfig.java on the backend, and continuously editing the Nginx file. . I guess I can say that what I gained from this was really understanding the Nginx file and JWT. . In the end, I was able to fix the CORS errors by asking Mr. Mortensen. I learned that to save a cookie on the frontend, the most important thing was that you need to redirect to another page. By looking through the debugger in Chrome Dev Tools, apparently the cookie is only added in once the frontend page changes. . This is the critical piece of code on frontend: . . CRUD for users . The part that I worked a main part on this project is users, and I implemented CRUD features onto users. . First is creating users. On the login page, there is a button that allows a user to create an account: . . After that, you can create a user. Enter in an email, password, name, and birthday. I implemented error checking on the frontend through Javascript. My code checks to see the values of the password and confirm password input box, and compares them. If they are not the same, a message is displayed. . function signup() { document.getElementById(&quot;passwordMsg&quot;).innerHTML = &quot;&quot;; var password = document.getElementById(&quot;password&quot;).value; var password2 = document.getElementById(&quot;password2&quot;).value; console.log(password); console.log(password2); if (password == password2) { console.log(&quot;Match&quot;); createUser(password); } else { console.log(&quot;No match&quot;); var p = document.createElement(&quot;p&quot;); var msg = document.createTextNode(&quot;Passwords do not match. Please try again&quot;); p.appendChild(msg); document.getElementById(&quot;passwordMsg&quot;).appendChild(p); } } . A little extra research that I did was to find a way to input a valid date of birth. Clearly, no one is born in the future. Using Javascript, I created a Date object and obtained the first parts of the current date in YYYY-MM-DD format. I then set an attribute on the date input box and used the date as the max day. . As a result, the calendar looks like this: . . The backend also shows that the user that I created (username: z@gmail.com) was successfully created: . . After the user is created, you can login with the new credentials. This is what the homepage looks like, and you can see that on the right, a cookie was sucessfully created. . . . The second aspect of users that I implemented was Read. For read, I accessed the backend url of https://crimebusters.tk/api/findEmail/. This was something that I spent quite some effort in creating, because originally, I did not know how to get information from the cookie. . In the end, I used some code from JwtRequestFilter.java that obtained information from the cookie using HttpServletRequest. All I needed to get was the email. I could then search through the JpaRepository using the email and obtain the person object. With the person object, I had access to all of the information. I could then use getters to obtain user information to display on the Settings page, such as the name, birthday, and user roles. . In the image below, I circled the code in red of how I got the email and subsequently created the person object. . . . In the update section of my user, I sent a POST request to the backend to update a specific user. My code on the backend looks like this: . Optional&lt;Person&gt; person1 = repository.findById(person.getId()); //SO THIS IS THE PIECE OF CODE TO CHANGE TYPES!!!!!! Person person2 = person1.orElse(null); //debugging System.out.println(&quot;person2: &quot; + person2); //update user info only if info is provided if (person.getEmail() != null) { person2.setEmail(person.getEmail()); } if (person.getName() != null) { person2.setName(person.getName()); } if (person.getPassword() != null) { String password = person.getPassword(); password = BCrypt.hashpw(password, BCrypt.gensalt()); person2.setPassword(password); } if (person.getDob() != null) { person2.setDob(person.getDob()); } if (person.getLoginStatus() != null) { person2.setLoginStatus(person.getLoginStatus()); } return repository.save(person2); . A few things that I learned: . First of all, repository.findById(person.getId()) returns an Optional, unlike findByEmail which returns a Person object. This stumped me for awhile because I really really wanted to get the Person object since I couldn’t get information from an Optional. After StackOverflowing, I found that I could create another Person object (person2), and then use person1.orElse(null) to get the object. What’s next is basically using setters to update info onto person 2. The JpaRepository then saves this person 2 object (which is the original person object but modified), and that’s how update works! | I feel like I had something else I learned but all of a sudden I can’t remember. I’ll post here when I do remember (hopefully) (Ohhh I remember now, it had something to do with GetMapping and bad output. I’ll post about this tomorrow because it’s currently 11:28 and I want to sleep :() | . . The last thing that I have is Delete. Sending a delete request using fetch didn’t work for me, so instead, I changed my endpoint on the backend to Get, and sent a get request. . Roles . Now onto the fun stuff. Roles required me to do a lot of outside research. . First of all, the many to many relationship. The tricky part about roles is that sometimes, you want a user to have multiple roles. As a result, you can’t just make a simple roles variable and save it in the database. You need a many to many relationship (because one user can have many roles and a role can have many users). . I watched a helpful video that showed how to implement many to many in Spring Boot. . In my Person POJO: . @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL) @JoinTable( name = &quot;person_person_roles&quot;, joinColumns = @JoinColumn(name = &quot;person_id&quot;, referencedColumnName = &quot;id&quot;), inverseJoinColumns = @JoinColumn(name = &quot;person_role_id&quot;, referencedColumnName = &quot;id&quot;) ) private Set&lt;Personrole&gt; personrole; . In my Personroles POJO: . @ManyToMany(mappedBy = &quot;personrole&quot;, fetch = FetchType.LAZY) private Set&lt;Person&gt; person; . So anyways, at the end, my database looked like this: . . This person_personroles table is called a Join Table. Why do we need this table? The reason is because a many to many relationship actually requires two sided one to many relationships. In this example, the same person_id (29) can be mapped to different person_roles. . As a result, while z@gmail.com only has the role User, . . user a@gmail.com has both the role User and Admin. . . . Now onto the cool part. When the user is not logged in, I created an anonymous user that doesn’t have permission to access certain pages. This was achieved on the backend file of PersonDetailsService.java. By finding the role of the user through JWT, either user, admin, or anonymous role is assigned to the user: . person.getPersonrole().forEach(role -&gt; { //loop through roles //authorities.add(new SimpleGrantedAuthority(role.getEmail())); //create a SimpleGrantedAuthority by passed in role, adding it all to the authorities list, list of roles gets past in for spring security if (role.getRole().equals(&quot;user&quot;)) { authorities.add(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;)); } if (role.getRole().equals(&quot;admin&quot;)) { authorities.add(new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;)); } if (role.getRole().equals(&quot;anonymous&quot;)) { authorities.add(new SimpleGrantedAuthority(&quot;ROLE_ANON&quot;)); } }); . Now in SecurityConfig.java, I added an antMatcher that only permits admin and users to access the log page: . .antMatchers(&quot;/api/log/getlog&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;USER&quot;) . Therefore, when I go to the logs page, I have a cookie (for the anonymous user), but there is a message telling me that I must login. . .",
            "url": "https://lwu1822.github.io/fastpages/2023/02/27/APCSATri2Blog.html",
            "relUrl": "/2023/02/27/APCSATri2Blog.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Night at the Museum",
            "content": "Night at the Museum takes place at the end of every trimester to showcase students’ work from various classes. . The project that I viewed in AP CSP during N@tM is the cat cafe project. The theme of the project was really creative (I might be biased because I like cats :3) and the aesthetics were very pleasing. I played the Purrdle game and left a review on their website. . . . . The other exhibitions that I went to were the 3D Animations classroom and the Photography classroom. . The picture below is one of the projects I liked the most from the 3D Animations classroom. . . This was my favorite photo from the photography class. I liked this photo because of its attention to detail on the orange: . .",
            "url": "https://lwu1822.github.io/fastpages/life/2023/02/26/NatM.html",
            "relUrl": "/life/2023/02/26/NatM.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "5.3-5.6 Blog",
            "content": "5.3 . Different social media platforms are focused towards different age groups. For instance, Facebook is more oriented towards older people while TikTok is focused towards younger age groups. Therefore, content may be biased on these two platforms because they are more suited towards what the age group would like. Although the content may be different, it may be alright for these two platforms to be oriented towards different age groups because two different generations have different preferences and customs. Therefore, being on different platforms would allow them to access content that they are more used to. . Virtual assistants have female voices probably because they are viewed as more soothing. They may also follow typical steoreotypes. There are options to change the virtual assitant voice to a male voice, so that is good. . Algorithms are created on social media platforms in order to keep users on the website. They can find what topics the user is interested in and keep showing posts releated to that topic. . From the HP Computers video, I learned the importance of ensuring that development can be accessible to everyone. Additionally, lots of testing should be conducted in order to make sure that the product does not have any flaws and is not biased. . 5.4 Crowdsourcing . A crowdsourcing idea could be to randomly select computer science students across all AP CSP classes and conduct a survey/test. . With Del Norte, a random sample could again be selected. This ensures a sample that is more representative of the population and can reduce bias. . A data could be a feedback form that allows different people to enter of what they thought about our project. . 5.5 Legal and Ethical Concerns . Notes about licences: Creative Commons Zero v1.0 Universal: All copyright is waived | Open Source MIT License: Allowed to use code in a project (even in your private, closed source code), as long as you give credit to the original creator | Open Source GPL License: Allowed to use code in a project but only in public projects | . | From this lesson, I learned about the importance of copyright. We should check the licenses before we use a piece of software. I think Creative Commons is the license that allows the most access to a person’s work and that making intellectual work open to people is beneficial because it can help people learn. However, I believe it is also important to allow people to retain their rights to what they have created and that credit should be given to the original creator. | Our frontend and backend repositories use the GPL-3.0 license. We chose this license because it allows people to copy the project and use it for educational purposes and learning from it. However, if they distribute it, they need to include the source code (what we made) and give us credit for it. Furthermore, they also need to release it with the GPL-3.0 license. | 5.6 Safe Computing . In our projects, we take in people’s username and password. It is important to encrypt the passwords so that these information are not accessible by a third party. | I’m not a famous person, so I don’t have that much information on the internet. However, a lot of platforms that I use probably have various information about me. This can be seen when you sign up on a website and they provide a long list of terms and agreements that probably includes a statement about how they can save your personal information and use it for various purposes. | Good passwords include a variety of characters and symbols and also upper and lowercase letters. Multifactor authentication requires multiple authentication methods, which can prevent people from logging in just because they have the password. | Symmetric key uses one key for encryption and decryption while assymetric cryptography uses a pair of public and private keys to encrypt and decrypt (different keys are used for the two processes) | When we created our fastpages, we needed to generate SSH keys (which I think uses assymetric cryptography because we generated a public and private key) | I probably encountered phishing schemes by accidently clicking on a spam email. |",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/02/06/CSP-5.3-blog.html",
            "relUrl": "/misc/2023/02/06/CSP-5.3-blog.html",
            "date": " • Feb 6, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "MC Corrections",
            "content": "My score is 48/52. . The question that I got wrong was #9. I thought that num = str.substring(0, 3).length(). Turns out the actual length of num is the entire length of “CompSci”, which is 7. . Another question that I got wrong was #12. I learned that with System.out.println, even if the elements in the ArrayList was changed, System.out.println will print out the original elements, and then change it. Therefore, the first line is “Alex, Bob, Carl”, rather than “Alex, Alex, and Alex” (after change). . I also got #19 wrong. I picked that the method finds the index of the first occurrence of the string. However, since the for loop runs until the end of the string, the last occurrence of the string will be the output. . I got #40 wrong because I selected II and III. However, II is wrong because if the ArrayList’s elements are removed, some elements will be swapped. III works because the loop moves from right to left; therefore, if some elements are removed, the elements to the left of it are not affected. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/31/w20-CSA-MCCorrection.html",
            "relUrl": "/misc/2023/01/31/w20-CSA-MCCorrection.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "AP CSP Trimester 2 Project Plan",
            "content": "The project that I will make for MyToolkit is MyClasses, a feature that can allow students to search for classes and see others’ review of them. . CollegeBoard Criteria . Program Purpose and Function: The purpose of the program is to help students in their course selection process. The function will be to let the student search for the class that they are interested in taking and show a list of reviews that other students have left for the class. Input will be the class that the student searches for and output will be the reviews for that class. . Data Abstraction: In my search feature, I created a list with possible class names. The name of my list is dnClasses, and the data in the list is all of the class names. This allows the search to find if the class that the student inputs exists or not, and also allows the program to see if the class that the student entered matches to the class in the list without regard to case. By ensuring that the class that the student entered is valid, the program can proceed to find class reviews on the backend and allow the student to view the reviews that they wish to see. . . . Managing complexity: The list stores all of the classes at Del Norte. This manages complexity because the program can search through the list to see if one of the classes matches the one that the student enters. Without the list, each class name would have to be stored in a variable and individually compared with the class that the student enters. . Proceduaral Abstraction: The function name is findClass(classInput). This contributes to the functionality of the program by deciding if the program should get data of the class that the student inputted on the backend or if it should output an error message. . . Algorithm Implementation: The function name is findClass(classInput). The function takes in the name of the class that the student is searching for, and repeatedly compares it to the class names in the dnClasses list to see if one of the lists matches (iteration). If there is a match (selection), the classFound boolean variable is set to true. This way, if the class was not found, an error message could be displayed in HTML on the website. Otherwise, if the class was found, the next function, getClassData, would be called. . Testing: The two calls are findClass(&quot;AP Biology&quot;) and findClass(&quot;test&quot;). The first call sends a valid class name, AP Biology. Therefore, the first section of the code is executed and the variable classFound is set to true. The second call sends an invalid class name. classFound is false, and an error message is displayed on the screen. . . The theme of our project is school. Our website consists of features that include a login, an area where the students can input their schedules, gpa, class reviews, and tasks. . . The parts that I worked on was the class review . In the sections below, I will document what I did to create these features and some interesting things that I learned. . Create . The first section is the submit review. Students can enter in a class name, difficulty, hours of homework, days between tests, memorization level, and comments. . . This sends a fetch request using POST to the backend. On the backend, I have an API endpoint called CreateClassReview. This endpoint takes in the body, which includes the username, class name, etc., and creates a ClassReview object and adds it into the database. . Read . This is the place where the student can search for a class review. On the frontend, the class that the student searches for is taken in as a variable. This variable is used to query for the class reviews that are fetched from the backend. All classes are returned from the backend; however, on the frontend, the program searches through each class name until it finds a matches. . Update . My update review consists of a section where students can edit their reviews. On the backend, the code is basically the same as my create endpoint. However, I call the update() method instead of create(), which saves the same object instead of creating a new object. . Delete . Students can also delete a class review. On the backend, the program takes in the username and class name, searches for the specific database entry that corresponds to the students’ input, and then calls the delete() method. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/30/w20-tri2ProjectPlan.html",
            "relUrl": "/misc/2023/01/30/w20-tri2ProjectPlan.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "MC Corrections",
            "content": "My score is 49/50. . The question that I got wrong was #45. The question asks for the benefit of a heuristic approach. I answered that it shouldbe used when the problem can be solved in a reasonable time. The correct answer was that if it cannot be solved in a reasonable time. This is correct because a heuristic approach is used to simplify a complex problem. Usually, these problems would be difficult to solve in a short amount of time. . . Another question that gave me a little bit of trouble is #15. The main issue I had with this problem was that I didn’t understand the code CAN_MOVE. After some time, I realized that CAN_MOVE just means that there was not an obstacle in the specific direction, and that allowed me to select D) as the answer. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/30/w20-CSP-MCCorrection.html",
            "relUrl": "/misc/2023/01/30/w20-CSP-MCCorrection.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "5.2 Blog",
            "content": "People can empower themselves through the digital world by using the resources that are offered digitally. This can come in a variety of forms; for instance, people can use resources online to learn about topics that would have been very hard to access. Other people have also been able to take advantage of social media and create content that many people love. . | Those who are empowered can share their knowledge to help others. This is relevant to the digital world, because anyone can create a blog and start writing what they know. At Del Norte, we can empower each other by working together as a team so that we are able to improve together. We can also help out each other when one is confused. . | It could be possible that red tape can block digital empowerment because lots of paperwork can make things harder to accomplish. For example, in companies, paperwork is needed before something can be developed. This could hinder digital empowerment as projects need to be first approved before they can be created. . |",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/24/CSP-5.2-blog.html",
            "relUrl": "/misc/2023/01/24/CSP-5.2-blog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "5.1 Blog",
            "content": "Coding: The benefits of coding include creating applications that can solve a variety of problems and help improve people’s lives. Computer programming has greatly changed our way of life and often in a good way by making tasks more convenient. However, the downside of code is that it can be utilized to exploit other systems. Coding languages such as Python and JavaScript are commonly used to compromise a system or application and steal data. . | E-books: E-books allow the process of reading to become more convenient. Because people who have devices typically carry them everywhere they go, E-books provide the opportunity to read anywhere. This saves the weight of carrying a book that may be bulky. E-books also helps save trees as no paper is required for a digital book. The downside of E-books is that it increases the amount of screen time that people are exposed to. Especially in a time when we are increasing our device usage time, E-books are another contribution to this. . | Robots: The benefits of robots are that they can be used to either do tasks that simplify a person’s life, or they can be used to do tasks that would be extremely difficult or impossible for a person to do. The danger of robots is that if robots are programmed with AI, there could be potential dangers. This can be seen in movies where robots destroy the human civilization because they have a mind of their own. . | . I agree that games and social media can become very addictive. After all, these forms of entertainment are intentionally developed to capture a person’s attention and keep them on the media. For example, social media is filled with algorithms that identify a person’s interests and select posts and advertisements that align with it. This keeps users on the platform for an extremely long period of time as they scroll away endlessly. In addition, games are also addictive in that they allow people to escape from their real life struggles and immerse themselves in a world in which they can be the hero. The tasks in games are also achievable, providing the dopamine rush that many people desperately crave. This can be dangerous because these media often worsen a person’s escapism, because they can be the person they can not achieve in real life. |",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/24/CSP-5.1-blog.html",
            "relUrl": "/misc/2023/01/24/CSP-5.1-blog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "66 MC questions blog",
            "content": "This is my score: . . I spent about 3 hours on the MC (lost track of time because I took breaks in between) . I got #1 wrong because I thought that num in the for each loop would change the value of the element in the array. However, num is actually assigned a copy of the element, so althought the values of num are changed, the actual elements inside the array do not change. . I got #32 wrong because it made sense to me that lenCount had to reset if the elements were not consecutive anymore. However, I failed to realize that if lenCount was not larger than maxLen, lenCount still needed to be reset, which would not have been the case by selecting D. . No context for #36. . I answered wrong on #50 because I did not realize that i &lt; num1 would mean that 10 is excluded. Therefore, to print 10, the correct answer would be D, which used 20 as the bound. . I gto #52 wrong because the answer of adding a return type to the method looked very appealing. However, this does not fulfill the requirements of the method, which is to update the value of price. Therefore, price += surcharge would be the correct answer. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/23/w19_mc.html",
            "relUrl": "/misc/2023/01/23/w19_mc.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Performance Task Examples Scoring 3",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. •describes the input and output of the program demonstrated in the video. | 1 | The purpose is described accurately with it being entertainment. The function is described in great detail, and the input/output is also correct with input being rock/paper/scissors and output being the outcome status of the game. | . Data Abstraction | 0 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The second picture does not show the data in the list being accessed in the program. | . Managing Complexity | 1 •includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The student explained that without the list, many if statements would be needed to determine if the computer’s output is rock/paper/scisccors. Note CollegeBoard’s rubric states that the list does not manage complexity because if statements would have been “just as easy” to “maintain as lists” | . Procedural Abstraction | 0 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 0 | The student did not describe how the function contributes to the overall function of the program. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The code includes sequencing, selection (if else statements), and iteration (recursive function rpsGame). The steps of the algorithm is also described in great detail. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | Two calls were created which resulted in different outputs (win or lose). | . Reflection: The discrepancy in my scoring is for Managing Complexity. I thought that the list would simplify the code because many if statements would be needed if a list was not used. However, CollegeBoard states that if statements can also manage complexity in this case. . Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The student earned the point by explaining that the purpose is to help you recognize new words and improve your vocabulary. The function was also stated, and the various inputs are described in detail and the output of winning or losing is also noted. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point by including a picture of the list letOfGuessWord and where the elements are called. The contents of the list are also described. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student describes how they managed complexity by noting that a list can store all of the letters in the words. Otherwise, they would need 5 variables to store the letters. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | A procedure is provided with a parameter. The description of the procedure helps explain how it contributes to the functionality of the program. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | Selection (if staements) and iteration (for loops) are included in the procedure. The steps on how the program checks to see if the letter that user inputted is present in the word and whether the user wins or loses is described. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | Two calls are made to the procedure, which have different results of true or false. | . Submission 3 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The purpose is explained (helping with memorization). The function also describes how the states game works, and the input and output are provided. | . Data Abstraction | 0 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The code does not show where data is used from stateList. Note: CollegeBoard also mentions that stateList only contains the name of the state while the student claims that it contains other information such as flag and population. | . Managing Complexity | 0 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The explanation is too vague on how complexity is managed. The student only states that the code “would be extraordinarily complex”, but does not explain how. | . Procedural Abstraction | 0 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 0 | The procedure does not include a parameter, and the second picture does not include a call to the procedure. | . Algorithm Implementation | 0 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 0 | The procedure does not include iteration. | . Testing | 0 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 0 | The calls are not to the updateScreen function, which does not have a parameter. | . Submission 4 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The purpose and function are explained correctly. Lots of input and output are described with the arrow keys for movement and spacebar to catch fish. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The list is provided in the first picture and the explaination clearly states that the elements of the list is to tell the player what type of fish they got. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student correctly explains how the list decreases the amount of variables that would have been needed to keep track of the type of fish caught. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The procedure (clone movement) is shown with the call to the procedure. The student clearly explained how this procedure contributes to the function of the program by stating that it makes the game harder because the fish moves randomly. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The procedure contains selection (if else statement) and iteration (repeat until loop). The steps of the algoirthm are also explained in great detail. | . Testing | 0 •Testing • describes two calls to the selected procedure identified in written response 3c. &lt;Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 0 | The student did not describe the arguments that were passed as parameters. It seems that they were calling other procedures that were not in the picture. | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/22/w19_PT_ExScore3.html",
            "relUrl": "/misc/2023/01/22/w19_PT_ExScore3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "View/Frontend",
            "content": "Invite List . Confirm that you are coming . Name? Confirm . . Link to frontend on Github Pages . Our theme for our project is Chinese New Year. The page that I worked on is an invite list. The invite list is in the from of a table that is generated with information from JSON. For example, an entry looks like this: {&quot;_name&quot;: &quot;Zhang Tianming&quot;, &quot;_age&quot;: 18, &quot;_phoneNum&quot;: &quot;858-123-5692&quot;, &quot;_coming&quot;: true}. Using JavaScript, a table is created with a for each loop that takes the name, age, phone number, and if the guest is coming or not. . This is what the table looks like: . I also created an input box where a user can type their name to confirm that they are coming (Read in CRUD). The JavaScript takes in the name of the person from the input box and then finds the element in the table that has the same id. The code then changes the element’s coming status from Not decided to Yes. . Input box: . Coming status changed: .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/17/w18_wireframe.html",
            "relUrl": "/misc/2023/01/17/w18_wireframe.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Performance Task Examples Scoring 2",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | The student did not describe the purpose of the program. Instead, the student wrote about the program’s function. However, in the portion where they should talk about the function, they wrote something similar to the purpose. The students also wrote the wrong input and output. Input should be the animal and output should be correct/incorrect. | . Data Abstraction | 0 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The student did not include an image that shows the data in the list being used. | . Managing Complexity | 0 •includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The student did not earn the point because the response states that the list manages complexity by “making it more complex”. That is the opposite of what the array is intended to do. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 0 | The response earned the point because the procedure (function) and its functionality is described. Note Collegeboard scored this a 0 because how the algorithm contributes to the overall functionality is not described. | . Algorithm Implementation | 0 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 0 | The response does not describe the algorithm clearly. Although it does summarize what the algorithm does, it is too general. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure and results in either getting a point or a strike. | . Reflection: The discrepancy in my scoring is for Procedural Abstraction. I gave a point because I thought that the student described the functionality of the procedure, but College Board’s rubric states that the procedure has to contribute to the overall function of the program. . Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The student earned the point because the purpose is well stated. It is used for the user to explore their creativity. Next, the function is also stated, and input and output are explained. The input is the words that the user types and the output is the poems. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point because the two photos specify a list that is called in the program. The response also describes what the data in the list is used for (nouns that will be used to generate the poem) | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student manages complexity with a list by explaining that the list is used to store the nouns so that using a random number generator would make selecting the nouns easier than if each noun corresponded to a variable. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The student’s response explained how the procedure contributes to the functionality of creating a poem that has articles or no articles. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response contains if statements and a while loop, and the steps of the algorithm are explained in detail (how a string of words for the poem is created) | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure, creating a poem with articles and one without. | . Submission 3 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | The purpose is not explained. The response focused more on what the program does. The function and input and output are described correctly. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The response includes a picture of a list (firstCharacterList) and a picture of where it is called in a function. The response also explains what firstCharacterList contains. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student manages complexity with a list by explaining that the list helps by being able to iterate through each element to add the values. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The procedure is shown along with the code that calls the procedure. The student’s response explained how this procedure is used to find the winner. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response contains if else statements and a for loop, and the steps of the algorithm are explained (how the winner of a hypothetical battle between two Marvel characters would be determined) in great detail | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure, where the 1st result is a winner and the 2nd result is a tie. | . Submission 4 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The purpose is explained correctly (testing critical thinking skills). The function is also described, and the inputs and outputs are included in the response. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 0 | The response includes the list and what it contains, and a picture of the list being called. According to CollegeBoard, the student did not earn the point because although the length of the list is called, the data in the list is not. | . Managing Complexity | 0 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The list is not the only way to manage complexity because a counter variable could be used. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The procedure is shown along with the code that calls the procedure. The student’s response explained how this procedure is used to determine if the user typed in the correct word or letter positions. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response contains if else statements and a repeat 8 times loop, and the steps of the algorithm are explained with what screens will show up at the end. | . Testing | 0 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 0 | The student did not identify the different arguments that is being passed into the procedure. | . Reflection: I gave the student a point in Data Abstraction while Collegeboard gave 0. For Data Abstraction, I thought the student earned the point because they provided a list and a piece of code that got the size of the list. However, CollegeBoard scored this a 0 because the contents of the list need to be accessed. . Although I have not created a specific idea of what I would like to make for my Create Task, from the CollegeBoard rubric, I learned that the program must have input and output, a procedure (function) that includes selection and iteration (and sequencing), and a list that contains data that needs to be used in the code. Overall, the program also should have a purpose, or a problem that the program intends to solve. .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/16/w18_PT_ExScore2.html",
            "relUrl": "/misc/2023/01/16/w18_PT_ExScore2.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ZqW...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$ITK...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$pJg...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$nem...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$lS9...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ZqW...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$ITK...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$XvO...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$nem...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$lS9...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZqW4t5yoj5ON3PTm$843bbb7c6dd5582b02aad1bae5f5294d67e76b5594aa4305d685e7ab46421cf5&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$ITKsEacgAbllOj3S$3d7d511f506e3881474a1c75ee99bbf2320851d274044d7121ee3e2e58186d60&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$XvO0WETpmRB0w4Ul$befe10a301f99834e185fa52708e10025f53023979b8ad0cade78cbc80fdfa28&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$nemiLsFRxDPAqGLS$65f9f7da9ccf7c026d8228b6f1791146b39263690eade790df0ac6839504c629&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$lS9RgGSFGfLzDog9$21a8e1de5bb27b3fff50f4ffcc670d1d3b82833ef84db5aa3f6fb7d064e42c1a&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZqW4t5yoj5ON3PTm$843bbb7c6dd5582b02aad1bae5f5294d67e76b5594aa4305d685e7ab46421cf5&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$ITKsEacgAbllOj3S$3d7d511f506e3881474a1c75ee99bbf2320851d274044d7121ee3e2e58186d60&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$XvO0WETpmRB0w4Ul$befe10a301f99834e185fa52708e10025f53023979b8ad0cade78cbc80fdfa28&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$nemiLsFRxDPAqGLS$65f9f7da9ccf7c026d8228b6f1791146b39263690eade790df0ac6839504c629&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$lS9RgGSFGfLzDog9$21a8e1de5bb27b3fff50f4ffcc670d1d3b82833ef84db5aa3f6fb7d064e42c1a&#34;}] toby . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . This was my code originally before the helper hack was present (updated code below). . from datetime import date class Person: def __init__(self, name, classOf, dob): self.name = name self.classOf = classOf self.dob = dob @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property def age(self): #age = self.calculate_age(self.dob) age = self.calculate_age(self.dob) return age def calculate_age(self, born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) if __name__ == &quot;__main__&quot;: u1 = Person(name=&#39;test&#39;, classOf=2024, dob=date(2006, 1, 1)) print(&quot;Name: &quot; + str(u1.name)) print(&quot;Class of: &quot; + str(u1.classOf)) print(&quot;Age: &quot; + str(u1.age)) . Name: test Class of: 2024 Age: 17 . This is the updated code with the helper hack. . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, classOf, uid, password, dob): self._name = name # variables with self prefix become part of the object, self.classOf = classOf self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def age(self): #age = self.calculate_age(self.dob) age = self.calculate_age(self.dob) return age def calculate_age(self, born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Lily Wu&#39;, classOf=2024, uid=&#39;lwu&#39;, password=&#39;12345&#39;, dob=date(2006, 7, 24)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;Getter for age: &quot; + str(u1.age)) . JSON ready string: {&#34;name&#34;: &#34;Lily Wu&#34;, &#34;uid&#34;: &#34;lwu&#34;, &#34;dob&#34;: &#34;07-24-2006&#34;, &#34;age&#34;: 16} Raw Variables of object: {&#39;_name&#39;: &#39;Lily Wu&#39;, &#39;_classOf&#39;: 2024, &#39;_uid&#39;: &#39;lwu&#39;, &#39;_password&#39;: &#39;sha256$E3Rl6FOYWJAIeKOi$f8763dc23b63830211ad41a0d4c135152a16d673c78e3a200383ed98c1f3eee4&#39;, &#39;_dob&#39;: datetime.date(2006, 7, 24)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;calculate_age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Lily Wu, uid=lwu, password=sha256$E3Rl6FOYWJAIeKOi$f8763dc23b63830211ad41a0d4c135152a16d673c78e3a200383ed98c1f3eee4,dob=2006-07-24) Getter for age: 16 . Class for project . Our group project&#39;s theme is Chinese New Year. The class that I created is Food, and the attributes include name, category, and time (amount of time to prepare the dish). I created getters and setters for each attribute. . I created a list called foods that adds food objects. I then created a loop that allows the user to input a food and find what type of dish it is (category) or how much time it takes to preapre it (time). This works by locating the food&#39;s corresponding object in the list and calling its attributes (category or time). . class Food: def __init__(self, name, category, time): self.name = name self.category = category self.time = time @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def category(self): return self._category @category.setter def category(self, category): self._category = category @property def time(self): return self._time @time.setter def time(self, time): self._time = time if __name__ == &quot;__main__&quot;: foods = [] dumplings = Food(&quot;dumplings&quot;, &quot;staple&quot;, 120) foods.append(dumplings) steamedFish = Food(&quot;steamed fish&quot;, &quot;meat&quot;, 120) foods.append(steamedFish) springRolls = Food(&quot;spring rolls&quot;, &quot;appetizer&quot;, 40) foods.append(springRolls) noodles = Food(&quot;noodles&quot;, &quot;staple&quot;, 50) foods.append(noodles) broccoliAndBeef = Food(&quot;broccoli and beef&quot;, &quot;vegetables, meat&quot;, 25) foods.append(broccoliAndBeef) print(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) option = input(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) print(option) while option != &quot;finish&quot;: if option == &quot;category&quot;: print(&quot;Name?&quot;) name = input(&quot;Name?&quot;) print(name) for foodObj in foods: if foodObj.name == name: print(&quot;The category of &quot; + name + &quot; is: &quot; + foodObj.category) if option == &quot;time&quot;: print(&quot;Name?&quot;) name = input(&quot;Name?&quot;) print(name) for foodObj in foods: if foodObj.name == name: print(&quot;The time to prepare &quot; + name + &quot; is: &quot; + str(foodObj.time) + &quot; mins&quot;) print(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) option = input(&quot;Food category or time? Enter &#39;finish&#39; to finish.&quot;) print(option) . Food category or time? Enter &#39;finish&#39; to finish. category Name? dumplings The category of dumplings is: staple Food category or time? Enter &#39;finish&#39; to finish. time Name? dumplings The time to prepare dumplings is: 120 mins Food category or time? Enter &#39;finish&#39; to finish. category Name? noodles The category of noodles is: staple Food category or time? Enter &#39;finish&#39; to finish. time Name? noodles The time to prepare noodles is: 50 mins Food category or time? Enter &#39;finish&#39; to finish. finish .",
            "url": "https://lwu1822.github.io/fastpages/2023/01/10/w18_CSP_OOP.html",
            "relUrl": "/2023/01/10/w18_CSP_OOP.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "Performance Task Examples Scoring",
            "content": "•Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. . Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | The student did not describe the purpose of the program. This is an interesting point to take note of, because the connotation of function and purpose are quite similar. However, College Board’s standards explain that the “purpose must address the problem being solved or creative interest being pursued through the program.” | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point because two code segments are provided and identifies the list and what is stored in it. | . Managing Complexity | 0 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 0 | The student did not earn the point for this row simply because the list does not help manage complexity. You can replace the call to the list with a string. Something I learned from the rubric is that although a list can be used to manage complexity, this does not mean a list = manages complexity. It has to do something that otherwise would be more tedious to implement | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The response earned the point because the procedure (function) and its functionality is described. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response earned the point because the algorithm includes sequencing, selection, and iteration, and the algorithm is explained | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure | . Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 • Input • Program functionality • Output • describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 1 | The student earned the point because the purpose is well stated. It is used as entertainment. Next, the function is also stated, and input and output are explained. The input is the keys and mouse clicks. | . Data Abstraction | 1 includes two program code segments: • one that shows how data has been stored in this list (or other collection type). • one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | The student earned the point because two code segments are provided and identifies the list and what is stored in it. According to CollegeBoard, the first picture fulfills this row because it shows both accessing elements from the list and storing elements into the list. | . Managing Complexity | 1 • includes a program code segment that shows a list being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list | 1 | The student manages complexity with a list by explaining that the list is used to store 10800 items, which would be very inefficient to do so with variables. | . Procedural Abstraction | 1 includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | The response earned the point because the procedure (function) and its functionality is described. The first picture displays the function name replaceList, taking in two parameters: current and replacement. The second picture displays the function being called with replaceList. | . Algorithm Implementation | 1 • includes a program code segment of a student developed algorithm that includes: sequencing, selection, iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | The response earned the point because the algorithm includes sequencing, selection, and iteration, and the algorithm is explained. The selection is due to if else statements which are nested. The iteration occurs with the loop that repeatedly copies the elements of one list to another. | . Testing | 1 •Testing • describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | The student earned the point by calling the procedure 2 times with different arguments. Both arguments run a different section of the procedure. The replaceList function is called two times with different arguments, 1 and 2, and 2 and 1. | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2023/01/04/w17_PT_ExScore.html",
            "relUrl": "/misc/2023/01/04/w17_PT_ExScore.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "Homework 3.17 - 3.18",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . Problem: Decision Problem: A problem with yes/no answer | Organization Problem: A problem with the goal of finding a best answer | . | Instance: Problem with specific input | Efficiency: How much computing you need for a problem to be resolved Polynomial Efficiency (Good): Proportional amount of time (linear) the more work you do | Exponential Efficiency (Bad): Exponential amount of time the more work you do (ex: double the amount of time) | . | Heuristic Approach: Finding a more efficient optimal solution | Decidable Problem: A decision problem with a solution that always outputs correctly | Undecidable Problem: A decision problem with no solution | . Notes . Code that performs the same task can have a different amount of time that it runs | The more functions you add, the more time it takes to run the code For example, an add function that converts toint and then tostr will take up more seconds than a function that merely adds the functions and returns the value to a print statement (because a print statement can print an integer if that is the only value) | Polynomial creates the least cycles (ex: 3x and (2x)^2) vs exponential which creates more cycles (ex: 3^x) | . . Undecidable problem: Give multiple answers or none | . . Challenge . Try and fix this ineficcient code! Only change the code between the two commented lines. Fully programmed solution will improve your grade, at a minimum show that you tried. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value,array): #-- min = 0 max = len(numlist) - 1 while max &gt;= min: mid = (min + max) // 2 if array[mid] == value: return True elif array[mid] &gt; value: max = mid - 1 else: min = mid + 1 return False #-- starttime = time.time() for i in range(100000): for i in range(len(valuelist)): x = isvalue(valuelist[i],numlist) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . 1.288701057434082 seconds . 3.18 Undecidable Problems . Notes . Undecidable problems occur when a paradox is created, for exaple, a program that produces an error, then reverses it, which results in no error. | . Real life example: Internet connections time out if a website does not load . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernardo&#39;:50 }, &#39;Westview&#39;:{ &#39;DelNorte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernardo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;DelNorte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernardo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;DelNorte&#39;:35, &#39;RanchoBernardo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;DelNorte&#39;:50 } } . Ver 1 . I don&#39;t know how to make the most efficient algorithm to find the best path. This is my code below, which uses nested for loops to find the shortest route to each location (while making sure that they haven&#39;t been reached yet). I also have multiple attempts below that worked and did not work to show that I did try many times (took me 2 hours to figure out lol) . def fastestroute(start,data): drivetime = 0 order = [] #CODE,CODE,CODE order.append(start) travelPlace2 = start for i in range (len(dataset) - 1): shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime drivetime += dataset[travelPlace2][&quot;DelNorte&quot;] start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) print(&quot;The route is: &quot; + str(order)) print(&quot;Total time is: &quot; + str(drivetime)) # &#39;dataset&#39; is the name of the nested key value pair . The route is: [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;, &#39;MtCarmel&#39;] Total time is: 105 . Ver 2 . This was actually my original attempt, which also works but is more inefficient because I copy pasted the for loop to find the shortest route to the locations multiple times. In the version above, I used a nested for loop so that I could reuse the same cold multiple times. . drivetime = 0 def fastestroute(start,data): global drivetime drivetime = 0 global order order = [] #CODE,CODE,CODE order.append(start) travelPlace2 = start shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) shortestTime = 100 travelPlace = travelPlace2 for j in range(len(dataset[travelPlace])): if list(dataset[travelPlace].values())[j] &lt; shortestTime: if list(dataset[travelPlace].keys())[j] not in order: shortestTime = list(dataset[travelPlace].values())[j] travelPlace2 = list(dataset[travelPlace].keys())[j] else: continue order.append(travelPlace2) drivetime += shortestTime print(order) print(travelPlace2) print(drivetime) drivetime += dataset[travelPlace2][&#39;DelNorte&#39;] print(drivetime) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . [&#39;DelNorte&#39;, &#39;Westview&#39;] Westview [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;] Poway [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;] RanchoBernardo [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;, &#39;MtCarmel&#39;] MtCarmel 85 105 . Some of my other attempts lol . These did not work but were part of my planning process. . drivetime = 0 def fastestroute(start,data): global drivetime drivetime = 0 global order order = [] #CODE,CODE,CODE order.append(start) travelPlace = start for i in range(4): initialPlace = list(dataset[travelPlace].values()[0]) for j in range(len(dataset[travelPlace])): while initialPlace in order: shortestTime = list(dataset[travelPlace].values())[0] travelPlace = list(dataset[travelPlace].keys())[0] search = list(dataset[travelPlace].keys())[j] if search not in order: if list(dataset[travelPlace].values())[j] &lt; shortestTime: shortestTime = list(dataset[travelPlace].values())[j] travelPlace = list(dataset[travelPlace].keys())[j] order.append(travelPlace) drivetime += shortestTime print(order) print(drivetime) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . [&#39;DelNorte&#39;, &#39;Westview&#39;] 15 [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;] 30 [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;, &#39;Westview&#39;] 45 [&#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;, &#39;Westview&#39;, &#39;DelNorte&#39;] 60 . drivetime = 0 def fastestroute(start,data): global drivetime drivetime = 0 global order order = [] #CODE,CODE,CODE order.append(start) mv(start) def mv(travelPlace): global drivetime shortestTime = list(dataset[travelPlace].values())[0] travelPlace = list(dataset[travelPlace].keys())[0] for j in range(len(dataset[travelPlace])): search = list(dataset[travelPlace].keys())[j] if find(search): if list(dataset[travelPlace].values())[j] &lt; shortestTime: shortestTime = list(dataset[travelPlace].values())[j] travelPlace = list(dataset[travelPlace].keys())[j] order.append(travelPlace) drivetime += shortestTime mv(travelPlace) print(order) def find(nextPlace): for i in range(len(order)): if nextPlace == order[i]: return False return True print(drivetime) print(order) #return(drivetime,order) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . RecursionError Traceback (most recent call last) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in &lt;cell line: 41&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; start = &#39;DelNorte&#39; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; data = dataset &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; fastestroute(start, data) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in fastestroute(start, data) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; #CODE,CODE,CODE &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; order.append(start) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; mv(start) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; order.append(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; drivetime += shortestTime &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(order) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; order.append(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; drivetime += shortestTime &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(order) [... skipping similar frames: mv at line 26 (2967 times)] /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; order.append(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; drivetime += shortestTime &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(order) /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in mv(travelPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for j in range(len(dataset[travelPlace])): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; search = list(dataset[travelPlace].keys())[j] &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; if find(search): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; if list(dataset[travelPlace].values())[j] &lt; shortestTime: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; shortestTime = list(dataset[travelPlace].values())[j] /home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb Cell 12 in find(nextPlace) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; def find(nextPlace): &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; for i in range(len(order)): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; if nextPlace == order[i]: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/lwu1822/vscode/fastpages/_notebooks/2022-12-14-w16_CSP3.17-3.18LessonNotebook.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=31&#39;&gt;32&lt;/a&gt; return False RecursionError: maximum recursion depth exceeded while calling a Python object . def fastestroute(start,data): drivetime = 0 order = [] #CODE,CODE,CODE for i in range(len(dataset)): place = list(dataset.keys())[i] shortestTime = list(dataset[place].values())[0] travelPlace = &quot;&quot; for j in range(len(dataset[place])): if list(dataset[place].values())[j] &lt; shortestTime: shortestTime = list(dataset[place].values())[j] travelPlace = list(dataset[place].keys())[j] if travelPlace != &quot;&quot;: order.append(travelPlace) drivetime += shortestTime print(drivetime) print(order) #return(drivetime,order) start = &#39;DelNorte&#39; data = dataset fastestroute(start, data) # &#39;dataset&#39; is the name of the nested key value pair . 80 [&#39;Del Norte&#39;, &#39;RanchoBernrdo&#39;, &#39;Poway&#39;] . Grading: . Challenge Homework . .15 pts for attempt | .65 for attempt | . .20 pts for complete | .70 for complete | . .25 pts for above and beyond | .75 pts for above and beyond | .",
            "url": "https://lwu1822.github.io/fastpages/homework1718",
            "relUrl": "/homework1718",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Unit 9",
            "content": "Team members: Lily Wu, William Wu, Vidhi Kulkarni, Riya Patil, Saathvika Ajith . Hack 1 . public class Cat { // two attributes protected boolean hasTail; protected int numLegs; // two argument constructor public Cat(boolean hasTail, int numLegs) { this.hasTail = hasTail; this.numLegs = numLegs; } } . public class CalicoCat extends Cat { // calico cat is a type of cat so it can inherit the attributes of Cat // creates a furType variable which is unique for a calico cat protected String furType; public CalicoCat(boolean hasTail, int numLegs, String furType) { super(hasTail, numLegs); this.furType = furType; } } . Hack 2 . public class Cat { protected boolean hasTail; protected int numLegs; public Cat(boolean hasTail, int numLegs) { this.hasTail = hasTail; this.numLegs = numLegs; } // all cats meow public void sayMeow() { System.out.println(&quot;meow&quot;); } } . public class CalicoCat extends Cat { protected String furType; public CalicoCat(boolean hasTail, int numLegs, String furType) { super(hasTail, numLegs); this.furType = furType; } // calico cat says meow differently, method overriding @Override public void sayMeow() { System.out.println(&quot;meow meow RAWR&quot;); } } . Hack 3 . public class Cat { protected boolean hasTail; protected int numLegs; public Cat(boolean hasTail, int numLegs) { this.hasTail = hasTail; this.numLegs = numLegs; } public void sayMeow() { System.out.println(&quot;meow&quot;); } // cats are cute ;) public void funFacts() { System.out.println(&quot;cute&quot;); } } . public class ToygerCat extends Cat { // method overloading: 2 methods with the same name but different arguments public void food(String food1) { System.out.println(&quot;Toyger eats &quot; + food1); } public void food(String food1, String food2) { System.out.println(&quot;Toyger eats &quot; + food1 + &quot; and &quot; + food2); } // method overriding: additional fun fact, overrides the funFacts method in the superclass @Override public void funFacts() { System.out.println(&quot;cute and looks like a toy tiger&quot;); } } . Notes . Inheritance can be used to save what would otherwise be repetitive code. The base class (superclass) can have methods and attributes that are the same with all subclasses. The subclass extends the superclass. Basically, the superclass is the general outline of something (such as a cat), while the subclass is a specific version of the superclass (such as calico cat). . The syntax to extend a superclass is public class subclass extends superclass. . The constructor of a subclass can also utilize the constructor of the superclass using the super() keyword, while also having its own extra arguments. . The subclass can access all of the methods in the superclass. However, if you want to override the superclass&#39;s method, you can type the same method name in the subclass. The @Override annotation will indicate that the method is overriding the superclass&#39;s method. . Inheritance hiearchies help visualize superclasses and subclasses. . Reference: The object of the class or inherited class . Polymorphism: . Method overriding occurs when the method in the subclass overrides the method in the subclass. . method overloading, occurs when you have muliple methods in a class with the same name. If they have a different number of parameters, a different method will be called depending on the number of arguments you provide. . Other words for method overriding: Runtime polymorphism, dynamic binding, dynamic method dispatch. . Other words for method overloading: Compile time polymorphism, static polymorphism . Early binding: Compiler decides which method to call (method overloading) . Late binding: Method decide at runtime (method overriding) . Object: Superclass of other classes . toString(): Outputs the attributes of an object and changes a string object to a string . equals(): Compares two strings .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/13/w16_unit9InheritanceNotes.html",
            "relUrl": "/2022/12/13/w16_unit9InheritanceNotes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "CompSci/Technical Business Panel",
            "content": "Takeaways . Today’s panel featured two speakers, Kathyleen Beveridge and Kris Porter, who talked about their journey in the field of project management and software engineering. One thing that struck out to me in this event was the importance of computer science and how it is applicable to many other fields, such as business/finance. As senior director of marketing, Kathyleen spends time communicating with developers to create products that customers would want. This brings me to the next point that I found really interesting, which is that the similarities between HP, Qualcomm, and Thermo Fisher Scientific is that all of them serve to help create technology and products that will help people (as can be seen in their mission statements). I think this is really cool because this means that as a software engineer, you get to be part of the effort that helps improve the lives of people around the world. Something else that really stood out to me was Kris’s emphasis of continuous learning. I think this is especially relevant because our modern world is extremely fast paced, and to be caught up, it’s necessary to keep learning and growing in knowledge, especially in programming when things are continuously changing and inventions are rapidly being produced. Besides, it’s also fun to learn new things ;). Altogether, today’s panel allowed me to learn about software engineering in the real world and what to expect in the workplace. . Notes that I took during the event . Speaker: Kathyleen Beveridge . Santa Clara university (bachelor), MBA at USC | Maya Angelou: My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style. | Investment banker at Wells Fargo, stock broker -&gt; switched to high tech at HP, then to Qualcomm, then Thermo Fisher Scientific (biotech) | Similarities in mission statements between companies: Creating technology, products, and services that helps people and creating what people around the world want | Qualcomm chips were in 99% cell phones in the world | Developing product goes through stages before commercialization Ask for voice of sales, voice of customers | . Speaker: Kris Porter . Software Engineer: SRE, DevOps, Infrastructure engineer | UCLA in Electrical Engineering | Researched Embedded Networked Sensors, opened up software engineering (learned Linux) | Worked at startup with email marketing automation, working as DevOps | Then worked at NBC Universal, streaming media infrastructure | Qualcomm for six years, DevOps, automation, monitoring | Work at Twitter, work on GraphQL | Spent time in securing networks | Emphasize continous learning: CCNA, Machine learning and deep learning, Python, Data structure, Algorithm and System Design (for interview), Twitter University | Projects: Streaming media infrastructure, analytics infrastructure (LocationSmart at Qualcomm), add GraphQL component at data centers at Twitter Moving REST API to GraphQL | . Q &amp; A: . Agile methodology: Technical: Different companies have different versions of Agile For example: Qualcomm: Planned work in 2-3 days meeting, created a roadmap for any project Sprints: Plan what you can do in a shorter amount of time (ex: 1 month) Very important skillset for tech | Python, Machine Learning framework: TensorFlow | GitLab with 100k repositories, using machine learning algorithm to figure out downloads | Nontechnical: Data scientist: Join frontend database to predict customer demand and sales Example: Use database to predict demand during vaccine orders | Most important skill to have in tech industry? Continuous learning (learning how to learn), you will probably learn a new programming language at each company you work for Don’t worry about what you see on the news . Be adaptable, life can be like a zigzag path . | Biggest challenge in tech industry + how overcome? Silicon Valley tech interviews: Timed random tests: Solve a problem in 30-45 min, code should compile . | Twitter University? Formal training of systems because things built are private Learn to navigate through the code . | How will learning to code help in business? Coding teaches you how to problem solve and critical thinking, why did you reach the conclusion that you did? . | Interested in learning/exploring? Web3, AWS, Google Cloud . | How coding help in investment/finance? Algorithms and patterns can help with stock | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/12/13/w16_blog.html",
            "relUrl": "/misc/2022/12/13/w16_blog.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Write any extra notes you have here . Simulations: Abstractions that mimic things that occur in the real world, you can use simulations to calculate things that you can&#39;t test in the real world . May contain bias because some real world elements can not be factored in . Use random number generators to simulate randomness and variability. Applications: Rolling a dice, flipping a coin, spinners . Contains varying set of values to demonstrate the variableness of real world phenomenon . Some details may need to be simplified within a simulation . | Random number generator: You can use the random library: import random . | . Hack #2 - Functions Classwork . import random x = random.randint(1, 100) print(x) . 26 . def mycloset(): myclothes = [&quot;red shoes&quot;, &quot;green pants&quot;, &quot;tie&quot;, &quot;belt&quot;] trash = random.choice(myclothes) print(&quot;Throwing away &quot; + trash) myclothes.remove(trash) print(&quot;My clothes: &quot; + str(myclothes)) mycloset() . Throwing away tie My clothes: [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;belt&#39;] . Bonus . def mycloset(): myclothes = [&quot;red shoes&quot;, &quot;green pants&quot;, &quot;tie&quot;, &quot;belt&quot;] extraclothes = [&quot;white socks&quot;, &quot;polka dot socks&quot;] choice = input(&quot;Add or remove clothes? &quot;) print(&quot;Add or remove clothes? &quot;) print(choice) if choice == &quot;add&quot;: addItem = random.choice(extraclothes) print(&quot;Adding item &quot; + addItem + &quot;...&quot;) myclothes.append(addItem) print(&quot;My clothes: &quot; + str(myclothes)) if choice == &quot;remove&quot;: trash = random.choice(myclothes) print(&quot;Throwing away &quot; + trash) myclothes.remove(trash) print(&quot;My clothes: &quot; + str(myclothes)) mycloset() . Add or remove clothes? add Adding item polka dot socks... My clothes: [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;tie&#39;, &#39;belt&#39;, &#39;polka dot socks&#39;] . Check in . Answer: 3 . Coin flip activity . import random def coinflip(): #def function randomflip = random.randint(0, 2) #picks either 0 or 2 randomly (50/50 chance of either) if randomflip == 0 or randomflip == 1: #assigning 0 and 1 to be heads--&gt; if 0 or 1 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 2: #assigning 2 to be tails--&gt; if 2 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Heads Heads Heads Tails Heads . Hack #3 - Binary Simulation Problem . import random def randomnum(): # function for generating random int ranNum = random.randint(0, 255) return ranNum def converttobin(n): # function for converting decimal to binary numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if n - binary[i] &gt;= 0: n -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; return output def survivors(binary): # function to assign position survivorstatus = [&quot;Jiya&quot;, &quot;Shruthi&quot;, &quot;Noor&quot;, &quot;Ananya&quot; , &quot;Peter Parker&quot;, &quot;Andrew Garfield&quot;, &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;] for i in range(0, len(survivorstatus)): if binary[i] == &quot;0&quot;: print(survivorstatus[i] + &quot; is a zombie&quot;) else: print(survivorstatus[i] + &quot; is not a zombie&quot;) # replace the names above with your choice of people in the house ranNum = randomnum() binaryNum = converttobin(ranNum) survivors(binaryNum) . Jiya is a zombie Shruthi is a zombie Noor is not a zombie Ananya is not a zombie Peter Parker is not a zombie Andrew Garfield is a zombie Tom Holland is a zombie Tobey Maguire is a zombie . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . import random print(&quot;Dice roll to see which player goes first (highest number goes first)&quot;) def rollDice(): dice = random.randint(1, 6) return dice player1 = rollDice() player2 = rollDice() print(&quot;Player 1&#39;s roll is: &quot; + str(player1)) print(&quot;Player 2&#39;s roll is: &quot; + str(player2)) if (player1 &gt; player2): print(&quot;Player 1 goes first&quot;) elif player2 &gt; player1: print(&quot;Player 2 goes first&quot;) else: rollDice() . Dice roll to see which player goes first (highest number goes first) Player 1&#39;s roll is: 1 Player 2&#39;s roll is: 5 Player 2 goes first . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | What library can be used when creating a simulation? answer | . random | | What code would you use to simulate a coin flip using the random library? (Use 0 and 1 to represent heads/tails) answer | . random.randint(0, 1) | | import random questions = [ &quot;A researcher gathers data about the effect of Advanced Placement classes on students&#39;&quot; + &quot;success in college and career, and develops a simulation to show how a sequence of AP&quot; + &quot;classes affect a hypothetical student&#39;s pathway.Several school administrators are&quot; + &quot;concerned that the simulation contains bias favoring high-income students, however.&quot; + &quot; n1. The simulation is an abstraction and therefore cannot contain any bias&quot; + &quot; n2. The simulation may accidentally contain bias due to the exclusion of details&quot; + &quot; n3. If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation&quot; + &quot; n4. The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&quot;, &quot;Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? n &quot; + &quot; n1. No, it&#39;s not a simulation because it does not include a visualization of the results.&quot; + &quot; n2. No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&quot; + &quot; n3. Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&quot; + &quot; n4. Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&quot;, &quot;Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks&quot; + &quot;their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation?&quot; + &quot; n1. Realistic sound effects based on the material of the baseball bat and the velocity of the hit&quot; + &quot; n2. A depiction of an audience in the stands with lifelike behavior in response to hit accuracy&quot; + &quot; n3. Accurate accounting for the effects of wind conditions on the movement of the ball&quot; + &quot; n4. A baseball field that is textured to differentiate between the grass and the dirt&quot;, &quot;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights&quot; + &quot;and in different environmental conditions.What are advantages of running the simulation versus an actual experiment?&quot; + &quot; n1. The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&quot; + &quot; n2. The simulation can be run more safely than an actual experiment&quot; + &quot; n3. The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&quot; + &quot; n4. The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&quot; + &quot; n* this question has 2 correct answers, answer with a comma and space in between (ex: a, b)&quot;, &quot;What library can be used when creating a simulation?&quot;, &quot;What code would you use to simulate a coin flip using the random library? (Use 0 and 1 to represent heads/tails)&quot; ] answers = [[&quot;2&quot;], [&quot;4&quot;], [&quot;3&quot;], [&quot;2, 4&quot;, &quot;4, 2&quot;], [&quot;random&quot;], [&quot;random.randint(0, 1)&quot;] ] order = random.sample(range(0, len(questions)), len(questions)) for i in range (0, len(questions)): storage = questions[i] storageAnswer = answers[i] questions[i] = questions[order[i]] answers[i] = answers[order[i]] questions[order[i]] = storage answers[order[i]] = storageAnswer number = 0 score = 0 def questionloop(): for question in questions: global number print(question) usrAnswer = input(question) print(&quot;Enter answer: &quot; + usrAnswer) answercheck(usrAnswer) number += 1 print(&quot;Your score is: &quot; + str(score) + &quot;/&quot; + str(len(questions))) if score/len(questions) &gt;= 0.7: print(&quot;Congrats! You passed!&quot;) else: print(&quot;You did not pass. Try again.&quot;) def answercheck(usrAnswer): for i in range (0, len(answers[number])): if usrAnswer == answers[number][i]: print(&quot;Correct!&quot;) global score score += 1 return print(&quot;Incorrect!&quot;) questionloop() . Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? 1. No, it&#39;s not a simulation because it does not include a visualization of the results. 2. No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. 3. Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. 4. Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. Enter answer: 3 Incorrect! A researcher gathers data about the effect of Advanced Placement classes on students&#39;success in college and career, and develops a simulation to show how a sequence of APclasses affect a hypothetical student&#39;s pathway.Several school administrators areconcerned that the simulation contains bias favoring high-income students, however. 1. The simulation is an abstraction and therefore cannot contain any bias 2. The simulation may accidentally contain bias due to the exclusion of details 3. If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation 4. The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. Enter answer: 2 Correct! Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heightsand in different environmental conditions.What are advantages of running the simulation versus an actual experiment? 1. The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. 2. The simulation can be run more safely than an actual experiment 3. The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. 4. The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. * this question has 2 correct answers, answer with a comma and space in between (ex: a, b) Enter answer: 4, 2 Correct! Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and askstheir software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? 1. Realistic sound effects based on the material of the baseball bat and the velocity of the hit 2. A depiction of an audience in the stands with lifelike behavior in response to hit accuracy 3. Accurate accounting for the effects of wind conditions on the movement of the ball 4. A baseball field that is textured to differentiate between the grass and the dirt Enter answer: 3 Correct! What library can be used when creating a simulation? Enter answer: random Correct! What code would you use to simulate a coin flip using the random library? (Use 0 and 1 to represent heads/tails) Enter answer: random.randint(0, 1) Correct! Your score is: 5/6 Congrats! You passed! . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... . I made a book recommender based on the genre that the person likes. The quiz first asks some questions to identify the person&#39;s preferred genre based on the greatest number of answer choices they selected (A corresponds to action, B corresponds to thriller, C corresponds to tragedy, and D corresponds to fantasy). . This is pretty basic right now; but I wanted to create something to solve a problem in my life. I like reading books and sometimes it&#39;s hard for me to find a good one so I thought that making a book recommender would be cool. . questions = [ &quot;What do you look for in movies?&quot; + &quot; n A. Something with a lot of action!! Otherwise it&#39;s too boring&quot; + &quot; n B. Something that keeps me at the edge of my seat&quot; + &quot; n C. Something sentimental! I love sad stories :3&quot; + &quot; n D. It must have magic!&quot;, &quot;What do you like most in a book?&quot; + &quot; n A. A fast paced story. I don&#39;t care if there are plot holes. Just give me the action!&quot; + &quot; n B. Plot twists are a MUST&quot; + &quot; n C. I LOVE BOOKS WITH A SAD ENDING&quot; + &quot; n D. Anything mythical! Take me to a land far, far away.&quot;, &quot;What do you hate most about in a book?&quot; + &quot; n A. Slow stories BORE ME TO DEATH&quot; + &quot; n B. I can&#39;t stand predictable plots&quot; + &quot; n C. I will cry if everyone gets a happy ending&quot; + &quot; n D. If the setting is in the modern world&quot;, &quot;Do you have a favorite genre?&quot; + &quot; n A. Dystopian&quot; + &quot; n B. Thriller&quot; + &quot; n C. Tragedy&quot; + &quot; n D. Fantasy&quot; ] aCounter = 0 bCounter = 0 cCounter = 0 dCounter = 0 for i in range(len(questions)): print(questions[i]) answer = input(questions[i]) print(&quot;Answer: &quot; + answer) if (answer == &quot;A&quot;): aCounter += 1 if (answer == &quot;B&quot;): bCounter += 1 if (answer == &quot;C&quot;): cCounter += 1 if (answer == &quot;D&quot;): dCounter += 1 if (aCounter &gt; bCounter and aCounter &gt; cCounter and aCounter &gt; dCounter): print(&quot;Your genre is dystopian&quot;) print(&quot;Recommended books: Legend, The Hunger Games&quot;) if (bCounter &gt; aCounter and bCounter &gt; cCounter and bCounter &gt; dCounter): print(&quot;Your genre is thriller&quot;) print(&quot;Recommended books: One of us is Lying, Sherlock Holmes&quot;) if (cCounter &gt; aCounter and cCounter &gt; bCounter and cCounter &gt; dCounter): print(&quot;Your genre is tragedy&quot;) print(&quot;Recommended books: Salt to the Sea, The Fault in our Stars&quot;) if (dCounter &gt; aCounter and dCounter &gt; bCounter and dCounter &gt; cCounter): print(&quot;Your genre is fantasy&quot;) print(&quot;Recommended books: Lord of the Rings, The Hobbit&quot;) . What do you look for in movies? A. Something with a lot of action!! Otherwise it&#39;s too boring B. Something that keeps me at the edge of my seat C. Something sentimental! I love sad stories :3 D. It must have magic! Answer: C What do you like most in a book? A. A fast paced story. I don&#39;t care if there are plot holes. Just give me the action! B. Plot twists are a MUST C. I LOVE BOOKS WITH A SAD ENDING D. Anything mythical! Take me to a land far, far away. Answer: C What do you hate most about in a book? A. Slow stories BORE ME TO DEATH B. I can&#39;t stand predictable plots C. I will cry if everyone gets a happy ending D. If the setting is in the modern world Answer: C Do you have a favorite genre? A. Dystopian B. Thriller C. Tragedy D. Fantasy Answer: C Your genre is tragedy Recommended books: Salt to the Sea, The Fault in our Stars .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/13/w16_CSP3.16LessonNotebook.html",
            "relUrl": "/2022/12/13/w16_CSP3.16LessonNotebook.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Decimal To Binary Converter",
            "content": "import java.util.Scanner; public class DecimalToBinaryConverter { int numOfBinary = 8; int[] binary = new int[numOfBinary]; String output = &quot;&quot;; public int fillArray(int counter) { if (counter == numOfBinary) { return 0; } binary[counter] = (int)Math.pow(2, numOfBinary - 1 - counter); return fillArray(counter + 1); } public int decimalToBinary(int number, int counter) { if (counter == numOfBinary) { return 0; } if (number - binary[counter] &gt;= 0) { number -= binary[counter]; output += &quot;1&quot;; } else { output += &quot;0&quot;; } return decimalToBinary(number, counter + 1); } public static void main(String[] args) { DecimalToBinaryConverter number = new DecimalToBinaryConverter(); number.fillArray(0); Scanner input = new Scanner(System.in); System.out.println(&quot;What number would you like to convert to decimal?&quot;); int num = input.nextInt(); System.out.println(num); number.decimalToBinary(num, 0); System.out.println(num + &quot; converted to binary is: &quot; + number.output); } } DecimalToBinaryConverter.main(null) . What number would you like to convert to decimal? 25 25 converted to binary is: 00011001 . Notes . Recursive method: Method that calls itself repeatedly . Consists of two parts: Base case and recursive call | Base case: The value that is returned when the recursion stops | . Recursive methods use a call stack that keeps track of the recursive function being called until the base case is reached. . Difference between recursion and iteration . Iteration executes code through a loop (ex: for loop, while loop), while recursion uses function calls . Binary search . The most important thing about binary search is that the data must be sorted i.e. from least to greatest. Binary search is more efficient than linear search. . Linear recursion is when a function calls itself only once. An example is shown below. . import java.util.Scanner; public class Demo { public static int addNumAndConst(int num1, int num2) { if (num1 == 1 &amp;&amp; num2 == 0) { return num1 + num2; } return num1 + num2 + addNumAndConst(1, 0); } public static void main(String[] args) { System.out.println(addNumAndConst(5, 3)); } } Demo.main(null) . 9 . Selection sort finds the minimum element and attaches it to the sorted part. . Merge sort divides the array into two halves and repeatedly does so. The merge() function is then used to merge them together. .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/12/w16_unit10DecimalToBinary.html",
            "relUrl": "/2022/12/12/w16_unit10DecimalToBinary.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Unit 3.15 Random Values Student Copy",
            "content": "Purpose/Objectives: Teach student how to implement randomness into their code to make their code simulate real life situations. . In this lesson students will learn: . How to import random to python | How to use random with a list or number range | How to code randomness in everyday scenarios | . Summary (comprehensive notes are below) . Random values: Created using a mathematical algorithm that gives equal probability for generating numbers | . ADD YOUR ADDITIONAL NOTES HERE: . Examples of where random variables can be applied: Games, statistical sampling, and cryptography. . What are Random Values? . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring . Each Result from randomization is equally likely to occur Using random number generation in a program means each execution may produce a different result . What are Examples of Random outputs in the world? Add a few you can think of. . Ex: Marbles | . Why do we need Random Values for code? . Random values can be used in coding: . import random random_number = random.randint(1,100) print(random_number) . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . Real Life Examples: Dice Roll . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot; + str(roll)) . Challenge #1 . Write a function that will a simulate a coinflip and print the output . import random def coinflip(): result = [&quot;heads&quot;, &quot;tails&quot;] print(random.choice(result)) coinflip() . tails . EXTRA: Create a function that will randomly select 5 playing Cards and check if the 5 cards are a Royal Flush . NOTE: I didn&#39;t finish this extra challenge because I didn&#39;t have enough time. . cards = [] for suit in range(4): print(suit) for i in range(1, 14): pass . 0 1 2 . Homework . Given a random decimal number convert it into binary as Extra convert it to hexidecimal as well. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/12/12/w16_CSP3.15LessonNotebook.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/w16_CSP3.15LessonNotebook.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Unit 3.14 Libraries Lesson",
            "content": "Purpose: Help students streamline and make their coding experience easier through built in packages and methods from a library Objective: By the end of the lesson, students should be able to fluently use methods from the turtle and math packages, and be able to look up documentation for any python package and us it. . Summary (comprehensive notes are below) . Library: Allows the user to import methods that can perform functions that would be complicated to code The entire package can be imported or just a single method from the package. To import a single method from a package, type from package name import method name . | Import a library as a user provided name: import name as user input name . | To import all methods from a library, type from name import * . | . fill in the blanks! . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick google search. methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word front, followed by the package name, then the word import, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use *. . To import a method as an easier name, just do what we did first, add the word as, and write the name you would like to use that package as. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | import numpy from numpy import sqrt import numpy as np . Challenge 2: Turtle . Turtle is a python python library which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a graphics package to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with vscode. Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Documentation Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn&#39;t mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it . Commands . forward(pixels) | . right(degrees) | . left(degrees) | . setpos(x,y) | . speed(speed) | . pensize(size) | . pencolor(color) | . Note: Color should be within quotes, like &quot;brown&quot;, or &quot;red&quot; . . from turtle import * oogway = Turtle() . Challenge 3: Math . The math package allows for some really cool mathematical methods! . methods Action . ceil(x) | return next highest integer (ex: 10.1 -&gt; 11) | . floor(x) | rounds to largest integer less than or equal to x | . factorial(x) | returns the factorial | . gcd(x,y) | returns the greatest common denominator of x and y, no decimals | . lcm(x,y) | returns the least common multiple of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . from math import * print(&quot;Enter 1st number&quot;) num1 = float(input(&quot;Enter 1st number&quot;)) print(num1) print(&quot;Enter 2nd number&quot;) num2 = float(input(&quot;Enter 2nd number&quot;)) print(num2) print(&quot;Number 1 rounded up: &quot; + str(ceil(num1))) print(&quot;Number 2 rounded up: &quot; + str(ceil(num2))) print(&quot;Number 1 rounded down: &quot; + str(floor(num1))) print(&quot;Number 2 rounded down: &quot; + str(floor(num2))) print(&quot;LCM: &quot; + str(lcm(floor(num1), floor(num2)))) print(&quot;GCM: &quot; + str(gcd(ceil(num1), ceil(num2)))) print(&quot;Factorial of num1: &quot; + str(factorial(floor(num1)))) print(&quot;Factorial of num2: &quot; + str(factorial(floor(num2)))) print(&quot;Square root of 1: &quot; + str(sqrt(num1))) #print(&quot;Number 1 rounded up: &quot; + str()) . Enter 1st number 1.2 Enter 2nd number 2.6 Number 1 rounded up: 2 Number 2 rounded up: 3 Number 1 rounded down: 1 Number 2 rounded down: 2 LCM: 2 GCM: 1 Factorial of num1: 1 Factorial of num2: 2 Square root of 1: 1.0954451150103321 . Homework: Putting it all together(complete only after the random values lesson) . Option 1: Create a python program which generates a random number between 1 and 10, and use turtle to draw a regular polygon with that many sides. As a hint, remember that the total sum of all the angles in a polygon is (the number of sides - 2) * 180. Note: a regular polygon has all sides and angles the same size. Paste a screenshot of the code and the drawing from repl.it . Option 2: use the &quot;datetime&quot; package, and looking up documentation, create a program to generate 2 random dates and find the number of days between . Extra ideas: customize the settings, draw a picture, or something else! . Option 1 . Option 2 . from datetime import date import datetime import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } month1 = random.choice(list(days_dictionary.keys())) day1Max = days_dictionary.get(month1) day1 = random.randint(1, day1Max) year1 = input(&quot;year&quot;) print(&quot;random day: &quot; + str(month1) + &quot;/&quot; + str(day1) + &quot;/&quot; + str(year1)) month2 = random.choice(list(days_dictionary.keys())) day2Max = days_dictionary.get(month2) day2 = random.randint(1, day2Max) print(&quot;random day: &quot; + str(month2) + &quot;/&quot; + str(day2) + &quot;/&quot; + str(year1)) datetime1 = datetime.datetime(int(year1), int(month1), int(day1)) datetime2 = datetime.datetime(int(year1), int(month2), int(day2)) global diffDay diffDay = str(datetime2 - datetime1) diffDay = int(diffDay.partition(&quot;,&quot;)[0].partition(&quot;days&quot;)[0]) if int(diffDay) &lt; 0: diffDay *= -1 print(&quot;The number of days between the given range of dates is: &quot; + str(diffDay) + &quot; days&quot;) . random day: 1/13/2000 random day: 4/12/2000 The number of days between the given range of dates is: 90 days .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/12/12/w16_CSP3.14LessonNotebook.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/w16_CSP3.14LessonNotebook.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Homework",
            "content": "from datetime import date import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } day1 = int(input(&quot;Input a day&quot;)) month1 = int(input(&quot;Input a month&quot;)) year1 = input(&quot;Input a year&quot;) print(&quot;user day: &quot; + str(month1) + &quot;/&quot; + str(day1) + &quot;/&quot; + year1) month2 = random.choice(list(days_dictionary.keys())) day2Max = days_dictionary.get(month2) day2 = random.randint(1, day2Max) print(&quot;random day: &quot; + str(month2) + &quot;/&quot; + str(day2) + &quot;/&quot; + year1) global numDay numDay = int(days_dictionary.get(month1)) - day1 for i in range (month1 + 1, month2 + 1): numDay += days_dictionary.get(month1) month1 += 1 numDay -= (days_dictionary.get(month2) - day2) print(str(numDay)) . user day: 1/1/2000 random day: 5/14/2000 133 . Note . I just realized that I probably should have used the datetime library. Below is the edited code. . from datetime import date import datetime import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } day1 = int(input(&quot;Input a day&quot;)) month1 = int(input(&quot;Input a month&quot;)) year1 = int(input(&quot;Input a year&quot;)) print(&quot;user day: &quot; + str(month1) + &quot;/&quot; + str(day1) + &quot;/&quot; + str(year1)) month2 = random.choice(list(days_dictionary.keys())) day2Max = days_dictionary.get(month2) day2 = random.randint(1, day2Max) print(&quot;random day: &quot; + str(month2) + &quot;/&quot; + str(day2) + &quot;/&quot; + str(year1)) datetime1 = datetime.datetime(year1, month1, day1) datetime2 = datetime.datetime(year1, month2, day2) diffDay = str(datetime2 - datetime1) print(&quot;The number of days between the given range of dates is: &quot; + diffDay.partition(&quot;,&quot;)[0]) . user day: 1/1/2000 random day: 8/13/2000 The number of days between the given range of dates is: 225 days .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/12/w16_3.14-15HW.html",
            "relUrl": "/2022/12/12/w16_3.14-15HW.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "AP CSP Vocab",
            "content": "Bits: The smallest unit of data that a computer stores. Include 0 and 1. (Binary) . Bytes: 8 bits grouped together. An example is that an IP address consists of four bytes, each separated by a decimal. A decimal number can also be expressed in binary as a byte. . | Hexadecimal: Uses base 16 Hexadecimal numbers range from 0-9, and the remaining six digits are in letters (A = 10, B = 11, C, D, E, F, etc.) . | Unsigned integer: Nonnegative integer, while a signed integer can be both positive and negative. . Unsigned integer can be represented in regular binary . To represent a signed integer, add another digit in front of the binary number. The digit is either 0 or 1, with 0 being positive and 1 being negative. . For example, +6 is 0110 in binary, while -6 is 1110 . | Floating point: Decimal numbers are approximated by binary fractions. Many different decimal numbers may share the same binary fraction. Therefore, rounding errors can occur sometimes when performing Python calculations. . | ASCII: A character encoding (American) . | Unicode: International encoding standard for text | RGB: Contains views for red, blue, and green, range from 0-255 | . Lossy permanently deletes certain information, while lossless does not. . . Variables: Abstractions that store values (numbers, boolean values, strings) Variables are categorized based on data type, which typically includes: integer, double/float, string, and booleans. | List: Contains elements | Dictionaries: Consist of key value pairs | . The homework example above demonstrates the use of lists and variables in Python. The album and song variable takes in a string input which is converted into an integer. The album list consists of lists and tuples, which are used to separate albums and songs. . Python . Variables . Assigning variables: variable name = value . Why use variables? . Variables help to manage complexity by storing values. They can have descriptive names that indicate what the variable does. Furthermore, variables can be reused throughout the program, and if the value needs to be changed, only the variable assignment needs to be changed, while the rest of the code can remain the same. . Lists . Assigning a list to a variable example: myList = [1, 2, 3] . Add elements to a list with: list.append(element) . Dictionaries . Create a dictionary with this syntax: dictionary name = {key:value} . Algorithm: A set of instructions to do a certain task . Selection: Determines which parts of codes are ran based on if they evaluate to true or false. Used with if statements. . Conditional: Different code statements are executed based of if they evaluate to true or false (boolean expressions (See 3.5)) . Conditionals . Below is an example of an if else statement that relates to binary . This should be pretty straightforward in demonstrating what an if statement is, so I&#39;m not going to do a code example for an if statement. Check the code cell below the next to see an example of a elif. . binaryString = input(&quot;Enter your binary string in 8 digits&quot;) if binaryString[0:1] == 1: print(&quot;Your binary number is greater than or equal to 128&quot;) else: print(&quot;Your binary number is less than 128&quot;) . Your binary number is less than 128 . weather = &quot;rainy&quot; if weather == &quot;sunny&quot;: print(&quot;Remember to bring a hat&quot;) elif weather == &quot;windy&quot;: print(&quot;Go fly a kite!&quot;) else: print(&quot;Remember to bring an umbrella&quot;) . Remember to bring an umbrella . Sequencing: The order in which an algorithm runs. . Selection: Algorithms figure out whether to execute a boolean statement (if statement) . Iteration: Loop (ex: for, while) . See here for a coding example demonstrating sequencing, selection, and iteration. . Coding example . The code below converts a decimal number into binary. This demonstrates sequencing, selection, and iteration. . Sequencing: First, the binary numbers are appended to the binary list. Next, each binary number is subtracted from the inputted decimal number provided that the input number &gt; the binary number. If that is the case, a &quot;1&quot; will be added to the binary string; otherwise, a &quot;0&quot; will be added. | Selection: The if statement determines if a &quot;1&quot; or a &quot;0&quot; is added to the binary string. | Iteration: Two for loops are present; the first adds binary numbers to the list and the second adds a 1 or a 0 to the binary string. | . Furthermore, this code segment demonstrates concatenating strings. As you can see in the example below, the output string is either appended to 1 or 0 depending on if the power of 2 fits in the number. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 . Expressions . Expressions are values that can be combined to be interpreted into a new value. . The usual mathematical symbols apply, the main difference is that the symbol for exponents is **, not ^. . The coding example here demonstrates how to use the ** (exponent). . Booleans . Booleans have 2 values: True and False. . Note: All of the code cells on this blog demonstrate boolean expressions and selections. Check a JavaScript version to see boolean expressions and iteration. . Relational Operators . ==, !=, &gt;, &lt;, &gt;=, &lt;= . Relational/comparison operators can compare numbers, but they can also be used to compare strings. The later a letter is, the greater its value. . For example, as you can see in the code below, print(b &gt; a) outputs as true, because in alphabetical order, b is after a. . a = &quot;a&quot; b = &quot;b&quot; print(b &gt; a) . True . Logical operators . and, or, not . In Python, and is &amp;&amp;, or is ||, and not is ! . x = 5 y = 5 z = 3 if x == 5 and y == 5: print(&quot;x and y are equal to 5&quot;) if x == 5 or z == 5: print(&quot;Either x or z is equal to 5&quot;) if not x == 3: print(&quot;x is not equal to 3&quot;) . x and y are equal to 5 Either x or z is equal to 5 x is not equal to 3 . . You can create truth tables with logical operators. . A truth table lists all the possible True/False values that two booleans (P and Q is the convention) can take. These True/False values are then used to evaluate a third expression to see if all cases are true. . An example below is an application of DeMorgan&#39;s Law. . def checkDeMorgans(): if not a or not b == (not (a and b)): print(&quot;DeMorgan&#39;s Law is true&quot;) a = True b = True checkDeMorgans() a = False b = True checkDeMorgans() a = True b = False checkDeMorgans() a = False b = False checkDeMorgans() . DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true . Strings . Psuedocode: Using common language to write out code. Good for planning purposes and helps other people understand what you intend to do with the code. . Index: Represents the position of an array. . Length: How long something is. For example, the length of a string is the number of characters it has. . Python . Length: len(value you want to find length of) . Substring syntax in Python: string[start index:end index - 1] . In this code, the substring takes an individual character from the binary string and calculates its values based on the base two power place it is in. . This can show specific characters in a string, which are the individual letters/numbers. . Below is an example of traversing through a string. . message = &quot;StRiNG&quot; for i in range(0, len(message)): print(message[i]) . S t R i N G . You can also change a string to uppercase or lowercase with the upper() and lower functions. . msg = &quot;dEfaUlt stRinG&quot; print(msg) print(msg.upper() + &quot; now uppercase&quot;.upper()) print(msg.lower() + &quot; now lowercase&quot;.lower()) . dEfaUlt stRinG DEFAULT STRING NOW UPPERCASE default string now lowercase . Nested Conditionals . Nested conditionals are essentially conditionals within conditionals. . Below is an example of nested if statements in Python . num = int(input(&quot;Enter a number&quot;)) print(&quot;Enter a number: &quot; + str(num)) if num &gt; 0: print(&quot;Your number is positive&quot;) if num &gt; 50: print(&quot;Your number is also greater than 50&quot;) else: print(&quot;Your number is negative&quot;) if num &lt; -50: print(&quot;Your number is also less than -50&quot;) . Enter a number: 60 Your number is positive Your number is also greater than 50 . Use iteration to simplify your code and to prevent manually repeating code over and over again. . Iteration: . While loop: while condition: . See the code cell below for an example of iterating through a list using a while loop. . myList = [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] i = 0 while i &lt; len(myList): print(myList[i]) i += 1 . apples oranges bananas . break . i = 0 while (i &lt; 5): print(i) if i == 3: break i+= 1 . 0 1 2 3 . Procedural abstraction . Procedural abstraction provides a name for a task without showing what the actual task does, ex: a function . def addNum(num1, num2): return num1 + num2 sum = addNum(5, 3) print(sum) . 8 . Lists . Lists: Collections that store data, can use loops to iterate through them | . Python: list name = [element 1 , element 2 ] . Index: Specify the location where a list element is found, usually starts at 0 Note: In AP CSP, list indexes start at 1 | . Example: myList = [0, 1, 2] . print(myList[0]) will output 0 . Below is an example of using different methods for lists: . myList = [1, 2, 3] print(&quot;Element at index 1 in myList: &quot; + str(myList[1])) var1 = myList[0] print(&quot;Value of var1 (element at index 0) &quot; + str(var1)) myList.insert(1, 1.5) print(&quot;Inserting 1.5 into list at index 1... &quot; + str(myList)) myList.append(4) print(&quot;Adding the value 4: &quot; + str(myList)) myList.remove(4) myList.remove(1) print(&quot;Removing element 1 and 4... &quot; + str(myList)) . Element at index 1 in myList: 2 Value of var1 (element at index 0) 1 Inserting 1.5 into list at index 1... [1, 1.5, 2, 3] Adding the value 4: [1, 1.5, 2, 3, 4] Removing element 1 and 4... [1.5, 2, 3] . Iteration: . While loop: while condition: . See the code cell below for an example of iterating through a list using a while loop. . myList = [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] i = 0 while i &lt; len(myList): print(myList[i]) i += 1 . apples oranges bananas . For loop (iterate through lists): for element name in list name: . Recursive loop: Recursive loops call themselves by calling the function name again . Note: Don&#39;t do the code below, will run forever . def recursive_function(): recursive_function . . You can put a dictionary in a list, below is an example: . Note: When you are printing a dictionary by its key, specify the key name in brackets []. . Example: myList = {&quot;myKey&quot;:&quot;myValue&quot;}, to print out the value, do: print(myList[&quot;myKey&quot;]) . myList = [{1: &quot;red&quot;, 2: &quot;blue&quot;}, {1: &quot;purple&quot;, 2: &quot;green&quot;}] print(&quot;Printing the first dictionary in myList: &quot; + str(myList[0])) print(&quot;Printing the second dictionary in myList: &quot; + str(myList[1])) print(&quot;Printing the second key in the first dictionary in myList: &quot; + str(myList[0][2])) . Printing the first dictionary in myList: {1: &#39;red&#39;, 2: &#39;blue&#39;} Printing the second dictionary in myList: {1: &#39;purple&#39;, 2: &#39;green&#39;} Printing the second key in the first dictionary in myList: blue . Procedures . Procedure: Programming instructions, can have parameters/return values . | Parameters: The input value in a procedure/function . | Arguments: The values of the parameters when they are called. . | Modularity: Separating functions into many pieces for better organization and to decompose a larger problem so that many parts of the code work to perform one function. . | Procedural Abstraction: Gives a name (tells you what the task does) but does not show how a task is done. It takes in parameters and may execute different statements (selection) depending on the parameter. It is used to decompose a large problem by providing a solution to a smaller problem. . | . Calling Procedures . Procedure call interrupts the code and executes the code inside the procedure. After that finishes, the program moves back to where it originally was when it called the procedure. . A procedure may return a value, but it does not need to do so . Calling a procedure: procedure name(arguments) . Developing Procedures . When making a procedure, make sure to do the following: . Give the procedure a descriptive name | Note what parameters are needed | Note any required data | Determine if the procedure returns a value or just simply does something | . JavaScript notes . function name(parameters) {}: Creates a function . . Library: Allows the user to import methods that can perform functions that would be complicated to code The entire package can be imported or just a single method from the package. To import a single method from a package, type from package name import method name . | Import a library as a user provided name: import name as user input name . | To import all methods from a library, type from name import * . | . . Packages example: numpy, datetime, turtle . Math . Below is an example of using the math package . from math import * print(&quot;Enter 1st number&quot;) num1 = float(input(&quot;Enter 1st number&quot;)) print(num1) print(&quot;Enter 2nd number&quot;) num2 = float(input(&quot;Enter 2nd number&quot;)) print(num2) print(&quot;Number 1 rounded up: &quot; + str(ceil(num1))) print(&quot;Number 2 rounded up: &quot; + str(ceil(num2))) print(&quot;Number 1 rounded down: &quot; + str(floor(num1))) print(&quot;Number 2 rounded down: &quot; + str(floor(num2))) print(&quot;LCM: &quot; + str(lcm(floor(num1), floor(num2)))) print(&quot;GCM: &quot; + str(gcd(ceil(num1), ceil(num2)))) print(&quot;Factorial of num1: &quot; + str(factorial(floor(num1)))) print(&quot;Factorial of num2: &quot; + str(factorial(floor(num2)))) print(&quot;Square root of 1: &quot; + str(sqrt(num1))) #print(&quot;Number 1 rounded up: &quot; + str()) . Enter 1st number 1.3 Enter 2nd number 2.5 Number 1 rounded up: 2 Number 2 rounded up: 3 Number 1 rounded down: 1 Number 2 rounded down: 2 LCM: 2 GCM: 1 Factorial of num1: 1 Factorial of num2: 2 Square root of 1: 1.140175425099138 . Below is an example that utilizes the random library . import random print(random.randint(1, 10)) # prints a random number between 1 and 10 . 8 . Simulations: Abstractions that mimic things that occur in the real world, you can use simulations to calculate things that you can&#39;t test in the real world May contain bias because some real world elements can not be factored in Use random number generators to simulate randomness and variability. Applications: Rolling a dice, flipping a coin, spinners . | Random number generator: You can use the random library: import random . | . Problem: Decision Problem: A problem with yes/no answer | Organization Problem: A problem with the goal of finding a best answer | . | Instance: Problem with specific input | Efficiency: How much computing you need for a problem to be resolved Polynomial Efficiency (Good): Proportional amount of time (linear) the more work you do | Exponential Efficiency (Bad): Exponential amount of time the more work you do (ex: double the amount of time) | . | Heuristic Approach: Finding a more efficient optimal solution | Decidable Problem: A decision problem with a solution that always outputs correctly | Undecidable Problem: A decision problem with no solution | .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/09/CSPVocab.html",
            "relUrl": "/2022/12/09/CSPVocab.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: Programming instructions, can have parameters/return values . Parameters: The input value in a procedure/function . Arguments: The values of the parameters when they are called. . Modularity: Separating functions into many pieces for better organization and to decompose a larger problem so that many parts of the code work to perform one function. . Procedural Abstraction: Gives a name (tells you what the task does) but does not show how a task is done. It takes in parameters and may execute different statements (selection) depending on the parameter. It is used to decompose a large problem by providing a solution to a smaller problem. . What are some other names for procedures?: . Other words for procedures are function/method. . Why are procedures effective?: . Procedures help split up the code into many parts. You can create functions that contain many lines of code, and then assign the function a specific name. This makes it easier when debugging because you can single out a specific function that is going wrong and debug them. . Additional Notes . 3.12 Calling Procedures . Procedure call interrupts the code and executes the code inside the procedure. After that finishes, the program moves back to where it originally was when it called the procedure. . A procedure may return a value, but it does not need to do so . Calling a procedure: procedure name(arguments) . 3.13 Developing Procedures . When making a procedure, make sure to do the following: . Give the procedure a descriptive name | Note what parameters are needed | Note any required data | Determine if the procedure returns a value or just simply does something | . JavaScript notes . function name(parameters) {}: Creates a function . Challenge 1 below: Add the command that will call the procedure. . decimal = 7 def convertToBinary(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; return(output) conversion = convertToBinary(decimal) print(conversion) . 00000111 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . def findMax(numberA, numberB): if numberA &gt; numberB: print(&quot;Maximum is: &quot; + str(numberA)) else: print(&quot;Maximum is: &quot; + str(numberB)) def findMin(numberA, numberB): if numberA &lt; numberB: print(&quot;Minimum is: &quot; + str(numberA)) else: print(&quot;Minimum is: &quot; + str(numberB)) findMin(3, 5) findMax(3, 5) . Minimum is: 3 Maximum is: 5 . JavaScript Version . function findMax(numberA, numberB) { if (numberA &gt; numberB) { console.log(&quot;Maximum is: &quot; + numberA); } else { console.log(&quot;Maximum is: &quot; + numberB); } } function findMin(numberA, numberB) { if (numberA &lt; numberB) { console.log(&quot;Minimum is: &quot; + numberA); } else { console.log(&quot;Minimum is: &quot; + numberB); } } findMax(3, 5); findMin(3, 5); . Maximum is: 5 Minimum is: 3 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . Comments . My code below uses Python. To convert the characters into ASCII, I used the ord() function. I then created my own decimal to binary converter with the asciiToBinary() function (procedure), using different code than the binary converter I made in Challenge 1. . While I was searching how to convert characters into ASCII, I also wondered if there was a Python function that convert decimal to binary. I found that the bin() function could do the task, so below, I did the same homework using the bin() function. . binaryList = [] def charToAscii(letter): ascii = ord(letter) asciiToBinary(ascii) def asciiToBinary(ascii): binaryNum = 0; count = 0; binaryString = &quot;&quot;; while binaryNum &lt; ascii: binaryNum = 2**count count += 1 count -= 1 while (ascii &gt; 0 and count &gt;= 0): if ascii &gt;= 2**count: ascii -= (2**count) binaryString += &quot;1&quot; count -= 1 else: binaryString += &quot;0&quot; count -= 1 count += 1 if count &gt; 0: while count &gt; 0: binaryString += &quot;0&quot; count -= 1 binaryString = binaryString[1:len(binaryString)] binaryList.append(binaryString) charToAscii(&quot;A&quot;) charToAscii(&quot;P&quot;) charToAscii(&quot;C&quot;) charToAscii(&quot;S&quot;) charToAscii(&quot;P&quot;) print(&quot;&#39;APCSP&#39; in binary is&quot;) print(binaryList) . &#39;APCSP&#39; in binary is [&#39;1000001&#39;, &#39;1010000&#39;, &#39;1000011&#39;, &#39;1010011&#39;, &#39;1010000&#39;] . Using bin() . well this used up much fewer lines of code :P . binaryList = [] def charToAscii(letter): ascii = ord(letter) asciiToBinary(ascii) def asciiToBinary(ascii): binaryString = bin(ascii) binaryString = binaryString[2:len(binaryString)] binaryList.append(binaryString) charToAscii(&quot;A&quot;) charToAscii(&quot;P&quot;) charToAscii(&quot;C&quot;) charToAscii(&quot;S&quot;) charToAscii(&quot;P&quot;) print(&quot;&#39;APCSP&#39; in binary is&quot;) print(binaryList) . &#39;APCSP&#39; in binary is [&#39;1000001&#39;, &#39;1010000&#39;, &#39;1000011&#39;, &#39;1010011&#39;, &#39;1010000&#39;] . JavaScript version . I was also curious to see if I could make a JavaScript version of the homework assignment. I learned that the JavaScript function that converts characters to ASCII is .charCodeAt(0), and the function that converts ASCII to binary is toString(2). Below is my code. . &lt;p id=&quot;binary&quot;&gt;&lt;/p&gt; &lt;script&gt; const numOfBinary = 8; let binary = []; let ascii = &quot;&quot;; function charToAscii(letter) { ascii = letter.charCodeAt(0); asciiToBinary(ascii); } function asciiToBinary(ascii) { binary.push(ascii.toString(2)); } charToAscii(&quot;A&quot;); charToAscii(&quot;P&quot;); charToAscii(&quot;C&quot;); charToAscii(&quot;S&quot;); charToAscii(&quot;P&quot;); document.getElementById(&quot;binary&quot;).innerHTML = &quot;&#39;APCSP&#39; in binary is&quot; + &quot;&lt;br&gt;&quot; + binary; &lt;/script&gt; . .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/08/w15_CSP3.12-13LessonNotebook.html",
            "relUrl": "/2022/12/08/w15_CSP3.12-13LessonNotebook.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Notes . Array: Stores a collection of primitive data | Element: A value in the array | Index: The position where an element is, starting from 0 | . . To create a 2D Array, type data type[][] name = new data type[num row][num column] . You can identify the length of an array with .length. . The example below accesses the last element in an array using .length. This is especially useful for when you are not sure of the sizes of an array. . public class TwoDArray{ public static void main(String[] args) { int[][] arr = {{1, 2, 3}, {4, 5, 6}}; System.out.println(arr[arr.length - 1][arr[arr.length-1].length - 1]); } } TwoDArray.main(null) . 6 . To iterate through a 2D array, nested for loops are extremely useful. Below is an exmpale; . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[1][2] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); arr[2][1] = &quot;Athens&quot;; System.out.println(arr[2][1]); } } Test.main(null); . Change Austin to Athens and print! Athens . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! for (int row = 0; row &lt; arr.length; row++) { for (int col = 0; col &lt; arr[row].length; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(); } } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); int length = 0; int max = 0; for (int row = 0; row &lt; arr.length; row++) { for (int col = 0; col &lt; arr[row].length; col++) { length = arr[row][col].length(); if (length &gt; max) { max = length; longest = arr[row][col]; } } } System.out.println(longest); } } Test.main(null); . Use nested for loops to find the longest or shortest string! Cincinnati . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. . 2017 FRQ #4a . 1st attempt . public static Position findPosition(int num, int[][] intArr) { for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { if (intArr[row][col] == num) { return } } } return null; } . Comments . I graded my first attempt a 4/5 because I did not know how to return an object since the method type is of class Position. The way to do so is: return new Position(row, col);, which returns a Position object with the row and column location of the number. Below is my correction: . public static Position findPosition(int num, int[][] intArr) { for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { if (intArr[row][col] == num) { return new Position(row, col); // correction } } } return null; } . 4b . 1st attempt . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] arr = {}; for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { arr[row][col] = findPosition(intArr[row][col] + 1, intArr); } } return arr; } . Comments . I graded my first attempt a 3/4 because I did not create the 2D array correctly. Since the successor array has the same dimension as the integer array, the dimensions of the successor array needed to be specified with Position[][] arr = new Position[intArr.length][intArr[0].length];. Below is my correction. . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] arr = new Position[intArr.length][intArr[0].length]; // correction for (int row = 0; row &lt; intArr.length; row++) { for (int col = 0; col &lt; intArr[row].length; col++) { arr[row][col] = findPosition(intArr[row][col] + 1, intArr); } } return arr; } . . int height = 3; int spaceCounter = 0; int leafCounter = 0; int trunkSpace = height - 1; String[][] tree = new String[height][2*(2*height-1)-1]; for (int i = 0; i &lt; tree.length; i++) { leafCounter = 0; int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else if (j % 2 != 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot; &quot;; } else { tree[i][j] = &quot; &quot;; } } } for (int i = 0; i &lt; tree.length; i++) { for (int j = 0; j &lt; tree[i].length; j++) { System.out.print(tree[i][j]); } System.out.println(); } . * * * * * * * * * . import java.util.Scanner; Scanner input = new Scanner(System.in); System.out.println(&quot;How tall would you like your tree to be?&quot;); int height = input.nextInt(); System.out.println(height); int leafCounter = 0; int trunkSpace = height - 1; String[][] tree = new String[height + height - 1][2*(2*height-1)-1]; for (int i = 0; i &lt; tree.length - (height-1); i++) { leafCounter = 0; int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else { tree[i][j] = &quot; &quot;; } } } for (int i = tree.length - (height-1); i &lt; tree.length; i++) { int maxLeaf = 3; leafCounter = 0; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; 2 * height - 1 -3) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else { tree[i][j] = &quot; &quot;; } } } for (int i = 0; i &lt; tree.length; i++) { for (int j = 0; j &lt; tree[i].length; j++) { System.out.print(tree[i][j]); } System.out.println(); } . How tall would you like your tree to be? 5 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/12/06/w15_unit8LessonNotebook.html",
            "relUrl": "/jupyter/2022/12/06/w15_unit8LessonNotebook.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Lists: Collections that store data, can use loops to iterate through them | . Python: list name = [element 1 , element 2 ] . Index: Specify the location where a list element is found, usually starts at 0 Note: In AP CSP, list indexes start at 1 | . Example: myList = [0, 1, 2] . print(myList[0]) will output 0 . . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] ← x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1 | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Use iteration to simplify your code and to prevent manually repeating code over and over again. . Iteration: . While loop: while condition: . See the code cell below for an example of iterating through a list using a while loop. . myList = [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] i = 0 while i &lt; len(myList): print(myList[i]) i += 1 . apples oranges bananas . For loop (iterate through lists): for element name in list name: . Recursive loop: Recursive loops call themselves by calling the function name again . Note: Don&#39;t do the code below, will run forever . def recursive_function(): recursive_function . . You can put a dictionary in a list, below is an example: . Note: When you are printing a dictionary by its key, specify the key name in brackets []. . Example: myList = {&quot;myKey&quot;:&quot;myValue&quot;}, to print out the value, do: print(myList[&quot;myKey&quot;]) . myList = [{1: &quot;red&quot;, 2: &quot;blue&quot;}, {1: &quot;purple&quot;, 2: &quot;green&quot;}] print(&quot;Printing the first dictionary in myList: &quot; + str(myList[0])) print(&quot;Printing the second dictionary in myList: &quot; + str(myList[1])) print(&quot;Printing the second key in the first dictionary in myList: &quot; + str(myList[0][2])) . Printing the first dictionary in myList: {1: &#39;red&#39;, 2: &#39;blue&#39;} Printing the second dictionary in myList: {1: &#39;purple&#39;, 2: &#39;green&#39;} Printing the second key in the first dictionary in myList: blue . . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . . Ver 1 . Below is my quiz that does not use randomization. It has 6 questions, and some questions have more than 3 answer choices. At the end of the quiz, a score will be displayed with a message saying whether the user has passed or not. . questions = [ &quot;What is the method that adds an element to the end of the list?&quot;, &quot;What is a method that can be used to edit a list?&quot;, &quot;T/F: Lists can contain many items in the form of tuples or hash maps.&quot;, &quot;Give an example of an iteration loops&quot;, &quot;Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number?&quot;, &quot;Write out the code that will create a list called &quot;myList &quot; and store the numbers: 1, 2, 3 (you can write it in any order)&quot; ] answers = [[&quot;append&quot;, &quot;.append&quot;, &quot;.append()&quot;], [&quot;insert&quot;, &quot;append&quot;, &quot;remove&quot;], [&quot;T&quot;, &quot;true&quot;, &quot;True&quot;], [&quot;for&quot;, &quot;recursion&quot;, &quot;while&quot;], [&quot;0&quot;, &quot;2&quot;, &quot;3&quot;, &quot;zero&quot;, &quot;two&quot;, &quot;three&quot;, &quot;Zero&quot;, &quot;Two&quot;, &quot;Three&quot;], [&quot;myList = [1, 2, 3]&quot;, &quot;myList = [1, 3, 2]&quot;,&quot;myList = [2, 1, 3]&quot;,&quot;myList = [2, 3, 1]&quot;,&quot;myList = [3, 1, 2]&quot;,&quot;myList = [3, 2, 1]&quot;] ] number = 0 score = 0 def questionloop(): for question in questions: global number print(question) usrAnswer = input(&quot;Enter answer:&quot;) print(&quot;Enter answer: &quot; + usrAnswer) answercheck(usrAnswer) number += 1 print(&quot;Your score is: &quot; + str(score) + &quot;/&quot; + str(len(questions))) if score/len(questions) &gt;= 0.7: print(&quot;Congrats! You passed!&quot;) else: print(&quot;You did not pass. Try again.&quot;) # IMPORTANT: rem pass def answercheck(usrAnswer): for i in range (0, len(answers[number])): if usrAnswer == answers[number][i]: print(&quot;Correct!&quot;) global score score += 1 return print(&quot;Incorrect!&quot;) questionloop() . What is the method that adds an element to the end of the list? Enter answer: .append Correct! What is a method that can be used to edit a list? Enter answer: remove Correct! T/F: Lists can contain many items in the form of tuples or hash maps. Enter answer: wrong answer Incorrect! Give an example of an iteration loops Enter answer: for Correct! Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number? Enter answer: Zero Correct! Write out the code that will create a list called &#34;myList&#34; and store the numbers: 1, 2, 3 (you can write it in any order) Enter answer: myList = [3, 2, 1] Correct! Your score is: 5/6 Congrats! You passed! . Ver #2 . In this version of the quiz, I imported the random library to randomize the questions. All of the other features remain the same. . import random questions = [ &quot;What is the method that adds an element to the end of the list?&quot;, &quot;What is a method that can be used to edit a list?&quot;, &quot;T/F: Lists can contain many items in the form of tuples or hash maps.&quot;, &quot;Give an example of an iteration loops&quot;, &quot;Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number?&quot;, &quot;Write out the code that will create a list called &quot;myList &quot; and store the numbers: 1, 2, 3 (you can write it in any order)&quot; ] answers = [[&quot;append&quot;, &quot;.append&quot;, &quot;.append()&quot;], [&quot;insert&quot;, &quot;append&quot;, &quot;remove&quot;], [&quot;T&quot;, &quot;true&quot;, &quot;True&quot;], [&quot;for&quot;, &quot;recursion&quot;, &quot;while&quot;], [&quot;0&quot;, &quot;2&quot;, &quot;3&quot;, &quot;zero&quot;, &quot;two&quot;, &quot;three&quot;, &quot;Zero&quot;, &quot;Two&quot;, &quot;Three&quot;], [&quot;myList = [1, 2, 3]&quot;, &quot;myList = [1, 3, 2]&quot;,&quot;myList = [2, 1, 3]&quot;,&quot;myList = [2, 3, 1]&quot;,&quot;myList = [3, 1, 2]&quot;,&quot;myList = [3, 2, 1]&quot;] ] order = random.sample(range(0, len(questions)), len(questions)) for i in range (0, len(questions)): storage = questions[i] storageAnswer = answers[i] questions[i] = questions[order[i]] answers[i] = answers[order[i]] questions[order[i]] = storage answers[order[i]] = storageAnswer number = 0 score = 0 def questionloop(): for question in questions: global number print(question) usrAnswer = input(question) print(&quot;Enter answer: &quot; + usrAnswer) answercheck(usrAnswer) number += 1 print(&quot;Your score is: &quot; + str(score) + &quot;/&quot; + str(len(questions))) if score/len(questions) &gt;= 0.7: print(&quot;Congrats! You passed!&quot;) else: print(&quot;You did not pass. Try again.&quot;) def answercheck(usrAnswer): for i in range (0, len(answers[number])): if usrAnswer == answers[number][i]: print(&quot;Correct!&quot;) global score score += 1 return print(&quot;Incorrect!&quot;) questionloop() . What is a method that can be used to edit a list? Enter answer: remove Correct! What is the method that adds an element to the end of the list? Enter answer: .append Correct! Give an example of an iteration loops Enter answer: for Correct! Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number? Enter answer: Zero Correct! T/F: Lists can contain many items in the form of tuples or hash maps. Enter answer: wrong answer Incorrect! Write out the code that will create a list called &#34;myList&#34; and store the numbers: 1, 2, 3 (you can write it in any order) Enter answer: myList = [3, 2, 1] Correct! Your score is: 5/6 Congrats! You passed! . Extra . Below is the quiz that I made with JavaScript. You can go forward and backwards to try out different questions, and you can type in answer. The check button will give you feedback on if your answer is right or wrong. . . Check Back Next . This is my code: . &lt;p id=&quot;question&quot;&gt;&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;answerBox&quot;&gt; &lt;button onclick=&quot;check()&quot;&gt;Check&lt;/button&gt; &lt;br&gt; &lt;br&gt; &lt;button onclick=&quot;backQuestion()&quot;&gt;Back&lt;/button&gt; &lt;button onclick=&quot;nextQuestion()&quot;&gt;Next&lt;/button&gt; &lt;p id=&quot;feedback&quot;&gt;&lt;/p&gt; &lt;script&gt; let questions = [&quot;What is the method that adds an element to the end of the list?&quot;, &quot;What is a method that can be used to edit a list?&quot;, &quot;T/F: Lists can contain many items in the form of tuples or hash maps.&quot;, &quot;Give an example of an iteration loop&quot;, &quot;Refer to the following list: [1, 2, 7, 3, 10]. What index contains an odd number?&quot;, &quot;Write out the code that will create a list called &quot;myList &quot; and store the numbers: 1, 2, 3 (you can write it in any order)&quot; ]; let answers = [[&quot;append&quot;, &quot;.append()&quot;, &quot;.append&quot;], [&quot;insert&quot;, &quot;append&quot;, &quot;remove&quot;], [&quot;T&quot;, &quot;true&quot;, &quot;True&quot;], [&quot;for&quot;, &quot;recursion&quot;, &quot;while&quot;], [&quot;0&quot;, &quot;2&quot;, &quot;3&quot;, &quot;zero&quot;, &quot;two&quot;, &quot;three&quot;, &quot;Zero&quot;, &quot;Two&quot;, &quot;Three&quot;], [&quot;myList = [1, 2, 3]&quot;, &quot;myList = [1, 3, 2]&quot;,&quot;myList = [2, 1, 3]&quot;,&quot;myList = [2, 3, 1]&quot;,&quot;myList = [3, 1, 2]&quot;,&quot;myList = [3, 2, 1]&quot;] ]; let i = 0; document.getElementById(&quot;question&quot;).innerHTML = questions[0]; function nextQuestion() { if (i &lt; questions.length - 1){ document.getElementById(&quot;feedback&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;answerBox&quot;).value = &quot;&quot;; i++; } document.getElementById(&quot;question&quot;).innerHTML = questions[i]; } function backQuestion() { if (i &gt; 0){ document.getElementById(&quot;feedback&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;answerBox&quot;).value = &quot;&quot;; i--; } document.getElementById(&quot;question&quot;).innerHTML = questions[i]; } function check() { var response = document.getElementById(&quot;answerBox&quot;).value; for (let multiA = 0; multiA &lt; answers[i].length; multiA++) { if (response == answers[i][multiA]) { document.getElementById(&quot;feedback&quot;).innerHTML = &quot;Correct&quot;; return; } } document.getElementById(&quot;feedback&quot;).innerHTML = &quot;Incorrect&quot;; } &lt;/script&gt; . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot;) grocery_list.append(&quot;artichoke&quot;) print(grocery_list[6]) # Insert the item eggs as the third item of the list grocery_list.insert(2, &quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[6] # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichoke [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichoke&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichoke&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] decimalList = [] def binary_convert(binary): sum = 0; for binaryNum in binarylist: for i in range (0, 8): binaryDigit = binaryNum[i:i + 1:1] if binaryDigit == &quot;1&quot;: sum += 2 ** (7 - i) decimalList.append(sum) sum = 0 #use this function to convert every binary value in binarylist to decimal #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results binary_convert(binarylist) for decimalNum in decimalList: if decimalNum &lt; 100: decimalList.remove(decimalNum) print(decimalList) . [170, 150, 236, 209, 129] .",
            "url": "https://lwu1822.github.io/fastpages/homework/",
            "relUrl": "/homework/",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Unit 7 Homework",
            "content": "Notes . ArrayLists: Dynamic size that allows you to add and remove elements. . ArrayLists are classes while Arrays are objects. This means that ArrayLists have many methods. Arrays also store primitive data while ArrayLists store object references. ArrayLists use wrapper classes instead of primitives. . To use ArrayLists, make sure to import with the import java.util.ArrayList statement. . import java.util.ArrayList; public class Demo{ public static void main(String[] args) { ArrayList&lt;String&gt; fruits = new ArrayList&lt;String&gt;(); fruits.add(&quot;apple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pears&quot;); fruits.add(&quot;oranges&quot;); for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } Demo.main(null) . apple pineapple pineapple pears oranges . On the other hand, I can also traverse through ArrayLists using a for each loop. . import java.util.ArrayList; public class Demo{ public static void main(String[] args) { ArrayList&lt;String&gt; fruits = new ArrayList&lt;String&gt;(); fruits.add(&quot;apple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pears&quot;); fruits.add(&quot;oranges&quot;); for (String fruit : fruits) { System.out.println(fruit); } } } Demo.main(null) . apple pineapple pineapple pears oranges . Objects . There is a way to compare if two objects have the same attributes using the .equals() method. However, you need to first override the method to do so. . Below is an example: . To override the .equals() method, you need to create the method that takes in an object. In this example, the object is the format of Object obj. In the .equals() method, Object obj refers to test2. Next, obj needs to be typecasted to the class, in this case ObjectTest, for comparison to work. The return statement checks to see if the attributes of the two objects are equal. Note: this refers to test1 . public class ObjectTest { String attribute1; String attribute2; // IMPORTANT: forgot to specify String in parameters // see https://www.daniweb.com/programming/software-development/threads/346224/identifier-expected-in-constructor-definition // youtube reference for comparing objects: https://www.youtube.com/watch?v=X2AjBFZfFCY public ObjectTest(String attribute1, String attribute2) { this.attribute1 = attribute1; this.attribute2 = attribute2; } @Override public boolean equals(Object obj) { ObjectTest test = (ObjectTest)obj; return this.attribute1.equals(test.attribute1) &amp;&amp; this.attribute2.equals(test.attribute2); } public static void main(String[] args) { ObjectTest test1 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); ObjectTest test2 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); if (test1.equals(test2)) { System.out.println(&quot;Same attributes&quot;); } } } ObjectTest.main(null) . Same attributes . Hack 1 . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; testArray = new ArrayList&lt;Integer&gt;(); testArray.add(1); testArray.add(2); System.out.println(testArray.size()); } } hack1.main(null); . 2 . Hack 2 . import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i = 0; i &lt; color.size(); i++) { if (color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ . [green box, blue water] . Hack 3 . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int number : num) { sum += number; } System.out.println(sum); . 9 . Extra . Below is a binary search algorithm that is focused on unit 7.5 Searching. Binary search works by minimizing the amount of times that the code needs to search through the arraylist in order to find the index where the specific element lies. . For example, in the code below, I created an ArrayList called numberList. The elements in numberList are: [1, 3, 15, 28, 57, 73, 99]. . The number that I want to find (secretNum) is 73. Binary searching works by comparing the number in the middle of the ArrayList (28) with the secretNum (73). If the middle number is smaller, binary searching will then search in the middle of the ArrayList from 57 to 99. The middle number is 73, which is at index 5. . The reason why binary searching is more efficient is that if a for loop is used to iterate through each number in the array, then in this example, the numbers in the ArrayList need to be searched 6 times before reaching the secretNum of 73. With binary searching, the algorithm only needs to search 2 times (once in the middle of the ArrayList, the second time in the middle between 57 and 99). . ArrayList&lt;Integer&gt; numbersList = new ArrayList&lt;&gt;(); // numbersList: [1, 3, 15, 28, 57, 73, 99] numbersList.add(1); numbersList.add(3); numbersList.add(15); numbersList.add(28); numbersList.add(57); numbersList.add(73); numbersList.add(99); int secretNum = 73; int low = 0; int high = numbersList.size() - 1; int index = -1; int middle = 0; boolean done = false; while (!done) { int middle = (low + high)/2; if (numbersList.get(middle) &gt; secretNum) { high = middle - 1; } else if (numbersList.get(middle) &lt; secretNum) { low = middle + 1; } else if (numbersList.get(middle) == secretNum) { index = middle; done = true; } } System.out.println(secretNum + &quot; is located at index: &quot; + index); . 73 is located at index: 5 . Quizizz . . Reflection: . The question that I got wrong on my first attempt was: . You must type _____ at the top of your java file in order to use an ArrayList. (Hint: it is a imported package) . I originally thought the answer was import java.util.Arrays;, but this is for arrays, not arraylists. The correct answer is import java.util.ArrayList;. .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/04/w14_unit7ArrayListNoteAndHW.html",
            "relUrl": "/2022/12/04/w14_unit7ArrayListNoteAndHW.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Unit 3 Notes",
            "content": "Learnings . DeMorgan&#39;s Law: !(a || b) = (!a &amp;&amp; !b) and !(a &amp;&amp; b) = (!a || !b) . Compound Boolean Expression . Compound boolean expressions include AND (&amp;&amp;), OR (||), and NOT (!). . Truth tables . Truth tables display all the possible results for boolean expressions. . Below is the truth table for &amp;&amp; and ||: . P Q P&amp;&amp;Q . true | true | true | . true | false | false | . false | true | false | . false | false | false | . . P Q P Q . true | true | true | . true | false | true | . false | true | true | . false | false | false | . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/01/w14_unit3Notes.html",
            "relUrl": "/2022/12/01/w14_unit3Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Unit 1 Notes",
            "content": "Learnings . The main thing I learned for unit 1 is the idea of wrapper classes. Wrapper classes help make objects out of primitives, allowing access to many methods. For example, the wrapper class of int is Integer. . Notes . Casting: Changes the primitive data type . Casting is useful in division because if two integers are divided, the places after the decimal are truncated without rounding. To have an accurate division, type cast the integers with (double) to retain the decimal. . To round a number and return the result as an integer, add 0.5 to the number and then typecast it to an integer ((int)). . int a = 1; int b = 3; System.out.println(&quot;Dividing two integers: &quot; + a/b); double quotient = (double)a/(double)b; System.out.println(&quot;Dividing two doubles (originally integers): &quot; + quotient); System.out.println(); // truncating double c = 5.5; System.out.println(&quot;The value of double c is: &quot; + c); System.out.println(&quot;Truncating double c: &quot; + (int)c); // rounding int roundedNum = (int)(c+0.5); System.out.println(&quot;Rounding double c: &quot; + roundedNum); . Dividing two integers: 0 Dividing two doubles (originally integers): 0.3333333333333333 The value of double c is: 5.5 Truncating double c: 5 Rounding double c: 6 . Wrapper classes . Wrapper classes create objects out of primitives. The wrapper class capitalizes the first letter of the primitive data type and writes out the entire word. For example, the wrapper class of int is Integer. . Because wrapper classes create objects, there are many methods that can be used (shown in the code below). . Note: ArrayLists can only use wrapper classes; they can not use primitives. . toString(): Notice how Integer must be used, while int creates an error. . Integer test = 5; String test2 = test.toString(); System.out.println(test2); . 5 . int test = 5; // PROBLEM!! String test2 = test.toString(); System.out.println(test2); . | String test2 = test.toString(); int cannot be dereferenced . Concatenation . Concatenation combines multiple strings together into one string. . Concatenation can be used with the plus sign: + or with the concat() method. . Below is an example of concatenation using +: . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello + &quot; &quot; + world); . hello world . Below is an example of concatenation using concat() . The syntax is: concat(second string to add on to first string) . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello.concat(world)); . helloworld . Math . One of the Math methods that will be used frequently is random(). Math.random() returns a random number between 0 and 1, including 0 but excluding 1. . System.out.println(Math.random()); . 0.0758836497465144 .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/01/w14_unit1Notes.html",
            "relUrl": "/2022/12/01/w14_unit1Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "AP CSP Unit 3 Sections 5-7",
            "content": "3.5 Booleans Expressions . Vocab . Booleans . Booleans have 2 values: True and False. . Note: All of the code cells on this blog demonstrate boolean expressions and selections. Check a JavaScript version to see boolean expressions and iteration. . Relational Operators . ==, !=, &gt;, &lt;, &gt;=, &lt;= . Relational/comparison operators can compare numbers, but they can also be used to compare strings. The later a letter is, the greater its value. . For example, as you can see in the code below, print(b &gt; a) outputs as true, because in alphabetical order, b is after a. . a = &quot;a&quot; b = &quot;b&quot; print(b &gt; a) . True . Logical operators . and, or, not . In Python, and is &amp;&amp;, or is ||, and not is ! . x = 5 y = 5 z = 3 if x == 5 and y == 5: print(&quot;x and y are equal to 5&quot;) if x == 5 or z == 5: print(&quot;Either x or z is equal to 5&quot;) if not x == 3: print(&quot;x is not equal to 3&quot;) . x and y are equal to 5 Either x or z is equal to 5 x is not equal to 3 . . You can create truth tables with logical operators. . A truth table lists all the possible True/False values that two booleans (P and Q is the convention) can take. These True/False values are then used to evaluate a third expression to see if all cases are true. . An example below is an application of DeMorgan&#39;s Law. . def checkDeMorgans(): if not a or not b == (not (a and b)): print(&quot;DeMorgan&#39;s Law is true&quot;) a = True b = True checkDeMorgans() a = False b = True checkDeMorgans() a = True b = False checkDeMorgans() a = False b = False checkDeMorgans() . DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true DeMorgan&#39;s Law is true . Order of operations . Relational operators are evaluated first (ex: &gt;, &lt;), while logical operators are evaluated afterwards (ex: and, or, not) . 3.6 Conditionals . Vocab . Algorithm: A set of instructions to do a certain task . Selection: Determines which parts of codes are ran based on if they evaluate to true or false. Used with if statements. . Conditional: Different code statements are executed based of if they evaluate to true or false (boolean expressions (See 3.5)) . Conditionals . Below is an example of an if else statement that relates to binary . This should be pretty straightforward in demonstrating what an if statement is, so I&#39;m not going to do a code example for an if statement. Check the code cell below the next to see an example of a elif. . binaryString = input(&quot;Enter your binary string in 8 digits&quot;) if binaryString[0:1] == 1: print(&quot;Your binary number is greater than or equal to 128&quot;) else: print(&quot;Your binary number is less than 128&quot;) . Your binary number is less than 128 . weather = &quot;rainy&quot; if weather == &quot;sunny&quot;: print(&quot;Remember to bring a hat&quot;) elif weather == &quot;windy&quot;: print(&quot;Go fly a kite!&quot;) else: print(&quot;Remember to bring an umbrella&quot;) . Remember to bring an umbrella . 3.7 Nested Conditionals . Nested conditionals are essentially conditionals within conditionals. . Below is an example of nested if statements in Python . num = int(input(&quot;Enter a number&quot;)) print(&quot;Enter a number: &quot; + str(num)) if num &gt; 0: print(&quot;Your number is positive&quot;) if num &gt; 50: print(&quot;Your number is also greater than 50&quot;) else: print(&quot;Your number is negative&quot;) if num &lt; -50: print(&quot;Your number is also less than -50&quot;) . Enter a number: 60 Your number is positive Your number is also greater than 50 .",
            "url": "https://lwu1822.github.io/fastpages/2022/12/01/w14_CSPUnit3.5-7NoteAndHW.html",
            "relUrl": "/2022/12/01/w14_CSPUnit3.5-7NoteAndHW.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . . I added an input to take in a decimal number to convert to binary . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = int(input(&quot;Enter num&quot;)) print(&quot;Binary of num &quot; + str(num) + &quot; is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of num 32 is: 100000 . Below are some other versions of a decimal to binary converter that I made. . Version #1 . This version creates a list that stores the powers of 2 (from 2^0 to 2^7). Each number in the list is subtracted from the input decimal number if the decimal number is larger, and 1s and 0s are added accordingly to the binary string based on if the power of 2 is subtracted or not. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; return output; num = int(input(&quot;Enter a number&quot;)) print(str(num) + &quot; in binary is: &quot; + convert(num)) . 32 in binary is: 00100000 . Version #2 (Extra) . In this version, I created a different binary calculator that could repeatedly perform binary conversions. Once the user finishes entering all of the decimal numbers, the user can enter &quot;y&quot; to exit, and the calculator will display all of the conversions. . def binaryCalc(num): binaryNum = 0; count = 0; binaryString = &quot;&quot;; while binaryNum &lt; num: binaryNum = 2**count count += 1 #print(count) # count = 5 count -= 1 while (num &gt; 0 and count &gt;= 0): if num &gt;= 2**count: num -= (2**count) binaryString += &quot;1&quot; count -= 1 else: binaryString += &quot;0&quot; count -= 1 count += 1 #print(&quot;Count&quot; + str(count)) if count &gt; 0: while count &gt; 0: binaryString += &quot;0&quot; count -= 1 #print(&quot;binary&quot; + binaryString) return binaryString binaryList = [] def saveBinary(binary): binaryList.append(binary) end = False while (end == False): num = int(input(&quot;Enter a number: &quot;)) print(&quot;Enter a number&quot;) print(num) calculation = binaryCalc(num) saveBinary(calculation) response = input(&quot;Would you like to stop? y/n&quot;) print(&quot;Would you like to stop? y/n&quot;) print(response) if (response == &quot;y&quot;): end = True print(&quot;History: &quot; + str(binaryList)) . Enter a number 25 Would you like to stop? y/n n Enter a number 128 Would you like to stop? y/n n Enter a number 234 Would you like to stop? y/n y History: [&#39;011001&#39;, &#39;10000000&#39;, &#39;011101010&#39;] . . Lesson activities . print(&quot;True:&quot;,4 == 4) print(&quot;True:&quot;,1 &gt; 0) print(&quot;False:&quot;,7 &lt; 3) print(&quot;True:&quot;,5 != 6) print(&quot;False:&quot;,7 &gt;= 8) print(&quot;True:&quot;,3 &lt;= 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; == &quot;as&quot;) print(&quot;False&quot;,True &lt;= False) print(&quot;False:&quot;,[2,3,1] != [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &lt; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &gt; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] &gt;= [1,&#39;a&#39;]) print(&#39;&#39;) . True: True True: True False: False True: True False: False True: True True: True False False False: False True: True False: False True: True . print(&quot;True:&quot;, True or False) print(&quot;False:&quot;, not True) print(&quot;True:&quot;, True and True) print(&quot;False:&quot;, not True) print(&quot;False:&quot;, True and False) print(&quot;True:&quot;, not False) . True: True False: False True: True False: False False: False True: True . print( 3 &gt;= 3 and 4 &lt; 6 or 5 != 7 ) . True . age = 20 ; if (age &gt;= 70): print(&quot;Old&quot;) else: print(&quot;Not that old&quot;) if (age &gt; 50): print(&quot;You have lived for more than half a century&quot;) elif (age == 50): print(&quot;You have lived for half a century&quot;) else: print(&quot;You have lived for less than half a century&quot;) if (age &gt;= 21): print(&quot;You are old enough to drink&quot;) else: print(&quot;You are not old enough to drink&quot;) if (age &gt;= 18): print(&quot;You are old enough to vote&quot;) else: print(&quot;You are not old enough to vote&quot;) . Not that old You have lived for less than half a century You are not old enough to drink You are old enough to vote . def function(x, y, z): if(x &gt; y): #Code here if(x &gt; z): print(&quot;x is greater than y and z&quot;) #Code here else: print(&quot;x is greater than y but not z&quot;) #Code here else: if(x &gt; z): print(&quot;x is greater than z but not y&quot;) #Code here else: print(&quot;x is less than y and z&quot;) #Code here function(1, 2, 3) . x is less than y and z .",
            "url": "https://lwu1822.github.io/fastpages/week%2013/2022/11/30/w14_CSPUnit3.5-3.6LessonAndHW.html",
            "relUrl": "/week%2013/2022/11/30/w14_CSPUnit3.5-3.6LessonAndHW.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Unit 1-10 Vocab",
            "content": "Casting: Changes the primitive data type . Casting is useful in division because if two integers are divided, the places after the decimal are truncated without rounding. To have an accurate division, type cast the integers with (double) to retain the decimal. . To round a number and return the result as an integer, add 0.5 to the number and then typecast it to an integer ((int)). . int a = 1; int b = 3; System.out.println(&quot;Dividing two integers: &quot; + a/b); double quotient = (double)a/(double)b; System.out.println(&quot;Dividing two doubles (originally integers): &quot; + quotient); System.out.println(); // truncating double c = 5.5; System.out.println(&quot;The value of double c is: &quot; + c); System.out.println(&quot;Truncating double c: &quot; + (int)c); // rounding int roundedNum = (int)(c+0.5); System.out.println(&quot;Rounding double c: &quot; + roundedNum); . Dividing two integers: 0 Dividing two doubles (originally integers): 0.3333333333333333 The value of double c is: 5.5 Truncating double c: 5 Rounding double c: 6 . Wrapper classes . Wrapper classes create objects out of primitives. The wrapper class capitalizes the first letter of the primitive data type and writes out the entire word. For example, the wrapper class of int is Integer. . Because wrapper classes create objects, there are many methods that can be used (shown in the code below). . Note: ArrayLists can only use wrapper classes; they can not use primitives. . toString(): Notice how Integer must be used, while int creates an error. . Integer test = 5; String test2 = test.toString(); System.out.println(test2); . 5 . int test = 5; // PROBLEM!! String test2 = test.toString(); System.out.println(test2); . | String test2 = test.toString(); int cannot be dereferenced . Concatenation . Concatenation combines multiple strings together into one string. . Concatenation can be used with the plus sign: + or with the concat() method. . Below is an example of concatenation using +: . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello + &quot; &quot; + world); . hello world . Below is an example of concatenation using concat() . The syntax is: concat(second string to add on to first string) . String hello = &quot;hello&quot;; String world = &quot;world&quot;; System.out.println(hello.concat(world)); . helloworld . Math . One of the Math methods that will be used frequently is random(). Math.random() returns a random number between 0 and 1, including 0 but excluding 1. . System.out.println(Math.random()); . 0.28141796409418807 . Compound Boolean Expression . Compound boolean expressions include AND (&amp;&amp;), OR (||), and NOT (!). . Truth tables . Truth tables display all the possible results for boolean expressions. . Below is the truth table for &amp;&amp; and ||: . P Q P&amp;&amp;Q . true | true | true | . true | false | false | . false | true | false | . false | false | false | . . P Q P Q . true | true | true | . true | false | true | . false | true | true | . false | false | false | . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Comparing . Numbers . Numbers can be compared using ==. Numbers can always be compared with == because they are primitive types and not objects. . int a = 5; int b = 5; if (a == b) { System.out.println(&quot;a = b&quot;); } . a = b . Strings . There are two ways to compare strings: == and .equals(). . You can use == to compare strings when they are declared like this: String name = &quot;string&quot;; . An example is shown below: . String a = &quot;foo&quot;; String b = &quot;foo&quot;; if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } . The two strings are equal . However, if your two strings are objects, you can not use == to compare them (see below): . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are not equal . Instead, you need to use .equals() to compare the two string objects. . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a.equals(b)) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are equal . Note: a and b are different objects, but they contain the same string of foo, which is what .equals() checks for. . Objects . There is a way to compare if two objects have the same attributes using the .equals() method. However, you need to first override the method to do so. . Below is an example: . To override the .equals() method, you need to create the method that takes in an object. In this example, the object is the format of Object obj. In the .equals() method, Object obj refers to test2. Next, obj needs to be typecasted to the class, in this case ObjectTest, for comparison to work. The return statement checks to see if the attributes of the two objects are equal. Note: this refers to test1 . public class ObjectTest { String attribute1; String attribute2; // IMPORTANT: forgot to specify String in parameters // see https://www.daniweb.com/programming/software-development/threads/346224/identifier-expected-in-constructor-definition // youtube reference for comparing objects: https://www.youtube.com/watch?v=X2AjBFZfFCY public ObjectTest(String attribute1, String attribute2) { this.attribute1 = attribute1; this.attribute2 = attribute2; } @Override public boolean equals(Object obj) { ObjectTest test = (ObjectTest)obj; return this.attribute1.equals(test.attribute1) &amp;&amp; this.attribute2.equals(test.attribute2); } public static void main(String[] args) { ObjectTest test1 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); ObjectTest test2 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); if (test1.equals(test2)) { System.out.println(&quot;Same attributes&quot;); } } } ObjectTest.main(null) . Same attributes . for loops . For loops help with iteration. With for loops, you can specify how many times you want to repeat through something. . The syntax is: for (1; 2; 3){} (numbers explained below) . 1: Initialize a variable and set it equal to a certain value | 2: Create a conditional with the variable in 1 | 3: Set an increment for the variable | . Putting it all together, a for loop might look like this: . for (int i = 1; i &lt;= 5; i++) { System.out.println(&quot;The value of i is: &quot; + i); } . The value of i is: 1 The value of i is: 2 The value of i is: 3 The value of i is: 4 The value of i is: 5 . for each loops . for each loops are mainly used to iterate through arrays. An example is shown below: . int[] num = {1, 2, 3}; for (int numbers : num) { System.out.println(numbers); } . 1 2 3 . Class . What I learned . Static methods are used mainly for convenience. If you create a regular method, you need to create an object to execute the method. However, an object does not need to be created to access a static method. . Below is a piece of code that illustrates many parts of a class. . public class Person { private int age; private int height; public Person(){ } public int getAge() { return this.age; } public void setAge(int age) { this.age = age; } public int getHeight() { return this.height; } public void setHeight(int height) { this.height = height; } public static void main(String[] args) { Person person1 = new Person(); person1.setAge(20); person1.setHeight(65); System.out.println(&quot;person1&#39;s age is: &quot; + person1.getAge()); System.out.println(&quot;person1&#39;s height is: &quot; + person1.getHeight()); } } Person.main(null) . person1&#39;s age is: 20 person1&#39;s height is: 65 . Explanation of items in the code . A class is like a blueprint for an object. In this case, the class is Person (names of classes by convention have the first letter capitalized). The Person class has an empty constructor. Common things found in a class are getters and setters. Getters are created with getvariable name, and setters are created with setvariable name. In both cases, the first letter of the variable name should be capitalized, as in accordance with Java variable naming conventions. Getters and setters are used to protect your data so that you do not assign unintended values to your variables. Lastly, the this keyword is used to refer to the declared variables. this is used to differentiate between the declared variables and the variables that are passed into a method as parameters and who may have the same name. . Static vs nonstatic . In short, to access a variable from a static method, the variable must be declared with static. . static variables can be accessed in both static and nonstatic methods. nonstatic variables can only be accessed in nonstatic methods . public class staticDemo{ static int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . 5 . This will produce an error because there is no static! . public class staticDemo{ int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . | System.out.println(staticVar); non-static variable staticVar cannot be referenced from a static context . Static variables can be accessed in nonstatic methods! . public class staticDemo{ static int staticVar = 5; public void printVar() { System.out.println(staticVar); } public static void main(String[] args) { staticDemo a = new staticDemo(); a.printVar(); } } staticDemo.main(null) . 5 . Tester methods . Tester methods can be used to test if your code is working the way you want it to work. . Inheritance . public class Cat{ public boolean hasTail() { return true; } public void sayMeow() { System.out.println(&quot;Meow!&quot;); } } . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return super.hasTail(); } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); cat1.sayMeow(); System.out.println(&quot;Tabby cat fur type: &quot; + cat1.furType()); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Meow! Tabby cat fur type: striped Tabby cat has tail? true . In the example above, the superclass is Cat, while the subclass is TabbyCat. Extends helps save time from copying and pasting code. TabbyCat has access to all of the methods in Cat, but also has its specific method, furType(). The super keyword calls the superclass. . One interesting thing is that if the subclass has the same method as the superclass, the subclass&#39;s method will override the superclass. This is called polymorphism. See below: . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return false; // oof } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Tabby cat has tail? false . During compilation though, the hasTail() method will be looked for in the Cat class. Only during run time, the method will be resolved to the TabbyCat object. This is called late binding (using overriding) . Something very cool in Java is that you can have methods with the same name, as long as they have different parameters. This would result in overloading. . toString() . toString changes the value into a String object . Integer x = 5; System.out.println(&quot;Data type of x is: &quot; + x.toString().getClass().getSimpleName()); . Data type of x is: String . hashCode() . hashCode returns the hash code for an object. If obj1.equals(obj2), then obj1.hashCode() == obj2.hashCode(); . String text = new String(&quot;foo&quot;); String text2 = new String(&quot;foo&quot;); if (text.equals(text2)) { System.out.println(text.hashCode() == text2.hashCode()); } . true .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/29/w14_unit1-10Vocab.html",
            "relUrl": "/2022/11/29/w14_unit1-10Vocab.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "AP CSP Unit 3 Sections 3-4",
            "content": "Vocab . The three important vocab words for AP CSP are sequencing, selection, and iteration. . Sequencing: The order in which an algorithm runs. . Selection: Algorithms figure out whether to execute a boolean statement (if statement) . Iteration: Loop (ex: for, while) . See here for a coding example demonstrating sequencing, selection, and iteration. . 3.3 Expressions . Expressions are values that can be combined to be interpreted into a new value. . The usual mathematical symbols apply, the main difference is that the symbol for exponents is **, not ^. . The coding example here demonstrates how to use the ** (exponent). . 3.4 Strings . Psuedocode: Using common language to write out code. Good for planning purposes and helps other people understand what you intend to do with the code. . Index: Represents the position of an array. . Length: How long something is. For example, the length of a string is the number of characters it has. . Python . Length: len(value you want to find length of) . Substring syntax in Python: string[start index:end index - 1] . In this code, the substring takes an individual character from the binary string and calculates its values based on the base two power place it is in. . This can show specific characters in a string, which are the individual letters/numbers. . Below is an example of traversing through a string. . message = &quot;StRiNG&quot; for i in range(0, len(message)): print(message[i]) . S t R i N G . You can also change a string to uppercase or lowercase with the upper() and lower functions. . msg = &quot;dEfaUlt stRinG&quot; print(msg) print(msg.upper() + &quot; now uppercase&quot;.upper()) print(msg.lower() + &quot; now lowercase&quot;.lower()) . dEfaUlt stRinG DEFAULT STRING NOW UPPERCASE default string now lowercase . Coding example . The code below converts a decimal number into binary. This demonstrates sequencing, selection, and iteration. . Sequencing: First, the binary numbers are appended to the binary list. Next, each binary number is subtracted from the inputted decimal number provided that the input number &gt; the binary number. If that is the case, a &quot;1&quot; will be added to the binary string; otherwise, a &quot;0&quot; will be added. | Selection: The if statement determines if a &quot;1&quot; or a &quot;0&quot; is added to the binary string. | Iteration: Two for loops are present; the first adds binary numbers to the list and the second adds a 1 or a 0 to the binary string. | . Furthermore, this code segment demonstrates concatenating strings. As you can see in the example below, the output string is either appended to 1 or 0 depending on if the power of 2 fits in the number. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/29/w14_CSPUnit3.3-4NoteAndHW.html",
            "relUrl": "/2022/11/29/w14_CSPUnit3.3-4NoteAndHW.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "AP CSP Unit 3 Sections 1-2",
            "content": "Homework . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album = input() song = input() print(&quot;Playing &quot; + &quot; &quot;&quot; + str(albums[int(album)-1][3][int(song)-1][1]) + &quot; &quot;&quot;) . Playing &#34;Welcome to my Nightmare&#34; . Extra . The following code displays information of the album from the list using JavaScript and HTML. . &lt;table id=&quot;list&quot;&gt; &lt;tr&gt; &lt;th&gt;Album name&lt;/th&gt; &lt;th&gt;Artist&lt;/th&gt; &lt;th&gt;Year&lt;/th&gt; &lt;th&gt;Tracks&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script&gt; albums = [[&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, [ [1, &quot;Welcome to my Nightmare&quot;], [2, &quot;Devil&#39;s Food&quot;], [3, &quot;The Black Widow&quot;], [4, &quot;Some Folks&quot;], [5, &quot;Only Women Bleed&quot;] ] ], [&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, [ [1, &quot;Can&#39;t Get Enough&quot;], [2, &quot;Rock Steady&quot;], [3, &quot;Ready for Love&quot;], [4, &quot;Don&#39;t Let Me Down&quot;], [5, &quot;Bad Company&quot;], [6, &quot;The Way I Choose&quot;], [7, &quot;Movin&#39; On&quot;], [8, &quot;Bad Seagull&quot;] ] ], [&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ [1, &quot;I Turned to Stone&quot;], [2, &quot;Keeping a Rendezvous&quot;], [3, &quot;Reaper of the Glory&quot;], [4, &quot;She Used Me Up&quot;] ] ], [&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ [1, &quot;Pulling the Rug&quot;], [2, &quot;Psycho&quot;], [3, &quot;Mayhem&quot;], [4, &quot;Kentish Town Waltz&quot;] ] ] ]; var table = document.getElementById(&quot;list&quot;); //var row = table.insertRow(1); //var row2 = table.insertRow(2); for (let i = 0; i &lt; albums.length; i++) { var row = table.insertRow(i+1); for (let j = 0; j &lt; albums[i].length; j++) { var cell1 = row.insertCell(j); if (j == 3) { for (let k = 0; k &lt; albums[i][3].length; k++ ) cell1.innerHTML += albums[i][3][k][0] + &quot; &quot; + albums[i][3][k][1] + &quot;&lt;br&gt;&quot;; } else { cell1.innerHTML = albums[i][j]; } } } &lt;/script&gt; . Album name Artist Year Tracks . . Ignore this, this is just testing JavaScript . albums = [[&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, [ [1, &quot;Welcome to my Nightmare&quot;], [2, &quot;Devil&#39;s Food&quot;], [3, &quot;The Black Widow&quot;], [4, &quot;Some Folks&quot;], [5, &quot;Only Women Bleed&quot;] ] ], [&quot;Bad Company&quot;, &quot;Alice Cooper&quot;, 1975, [ [1, &quot;Welcome to my Nightmare&quot;], [2, &quot;Devil&#39;s Food&quot;], [3, &quot;The Black Widow&quot;], [4, &quot;Some Folks&quot;], [5, &quot;Only Women Bleed&quot;] ] ], ]; console.log(albums[1]); . [ &#39;Welcome to my NightmareBad Company&#39;, &#39;Alice Cooper&#39;, 1975, [ [ 1, &#39;Welcome to my Nightmare&#39; ], [ 2, &#39;Devil &#39;s Food&#39; ], [ 3, &#39;The Black Widow&#39; ], [ 4, &#39;Some Folks&#39; ], [ 5, &#39;Only Women Bleed&#39; ] ] ] . . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value for i in range(0, len(data)): if data[i] &lt; 100: print(str(i) + &quot; &quot; + str(data[i])) if data[i] &gt; 200: print(str(i) + &quot; &quot; + str(data[i])) . 2 4 4 308 6 5 9 306 . . Vocab . 3.1 Variables and Assignment . Variables: Abstractions that store values (numbers, boolean values, strings) Variables are categorized based on data type, which typically includes: integer, double/float, string, and booleans. | List: Contains elements | Dictionaries: Consist of key value pairs | . The homework example above demonstrates the use of lists and variables in Python. The album and song variable takes in a string input which is converted into an integer. The album list consists of lists and tuples, which are used to separate albums and songs. . Python . Variables . Assigning variables: variable name = value . Why use variables? . Variables help to manage complexity by storing values. They can have descriptive names that indicate what the variable does. Furthermore, variables can be reused throughout the program, and if the value needs to be changed, only the variable assignment needs to be changed, while the rest of the code can remain the same. . Lists . Assigning a list to a variable example: myList = [1, 2, 3] . Add elements to a list with: list.append(element) . Dictionaries . Create a dictionary with this syntax: dictionary name = {key:value} . JavaScript . Variables . Defining variables: . var variable name = value | const variable name = value | let variable name = value | . Boolean . Receive a true/false output from a boolean with: Boolean(conditional) . List . const list name = [elements] . Newlines can also be used in a list for increased readability: . const name = [ element 1, element 2 ] . . 3.2 Data Abstraction . Data abstraction: Simplifies code by hiding unnecessary information. An example of using data abstraction is lists, which are able to store multiple values. Lists can be more useful than variables in that you can have one list that stores multiple values which would otherwise have needed multiple variables to store them. | . Python . Lists . Data abstraction: Simplifies code by hiding unnecssary information. An example of using data abstraction is lists, which are able to store multiple values. Lists can be more useful than variables in that you can have one list that stores multiple values which would otherwise have needed multiple variables to store them. . Code: . name = [element 1 , element 2] . Elements can also be separated by newlines to increase readability: . name = [ element 1, element 2 ] . | id(list name): Each list has an id that can be displayed . | list name += [element] or list name.append(element): Add an element to the list . | . Iterating through lists . for variable 1, variable 2 in list name: . Miscellaneous . string.split(): Split each word of a string into an element in a list | &quot;&quot;.join(list name): Join elements of a list into a string | . JavaScript . Functions . To make a function, you need to specify a function name and parameters: function name(parameter 1, parameter 2){} . def binaryCalc(num): binaryNum = 0; count = 0; binaryString = &quot;&quot;; while binaryNum &lt; num: binaryNum = 2**count count += 1 #print(count) # count = 5 count -= 1 while (num &gt; 0 and count &gt;= 0): if num &gt;= 2**count: num -= (2**count) binaryString += &quot;1&quot; count -= 1 else: binaryString += &quot;0&quot; count -= 1 count += 1 #print(&quot;Count&quot; + str(count)) if count &gt; 0: while count &gt; 0: binaryString += &quot;0&quot; count -= 1 #print(&quot;binary&quot; + binaryString) return binaryString binaryList = [] def saveBinary(binary): binaryList.append(binary) firstCalc = binaryCalc(25) saveBinary(firstCalc) secondCalc = binaryCalc(128) saveBinary(secondCalc) thirdCalc = binaryCalc(234) saveBinary(thirdCalc) print(binaryList) . [&#39;011001&#39;, &#39;10000000&#39;, &#39;011101010&#39;] .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/28/w14_CSPUnit3.1-2NoteAndHW.html",
            "relUrl": "/2022/11/28/w14_CSPUnit3.1-2NoteAndHW.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / . the symbol for modulus is % . an algorithm is a sequence of steps that does a specific task . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for num in numlist: if int(num) % 3 == 0: print( num + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(num): numOfBinary = 8 binary = []; output = &quot;&quot; for i in range(numOfBinary): binary.append((2**(numOfBinary - 1 - i))) for i in range(len(binary)): if num - binary[i] &gt;= 0: num -= binary[i] output += &quot;1&quot; else: output += &quot;0&quot; print(output) convert(25) . 00011001 . Challenge . Using JavaScript and HTML frontend: . &lt;p id=&quot;binary&quot;&gt;&lt;/p&gt; &lt;script&gt; let num = 25; // change 25 to binary const numOfBinary = 8; // 8 bits (2^8 = 256, 256 possible numbers from 1-255) const binary = []; let output = &quot;&quot; // add powers of 2 to the binary array for (let i = 0; i &lt; numOfBinary; i++) { binary.push(2**(numOfBinary - 1 - i)); } // subtract powers of 2 from num (value = 25) and add 0s or 1s to the binary string accordingly for (let i = 0; i &lt; binary.length; i++) { if (num - binary[i] &gt;= 0) { num -= binary[i]; output += &quot;1&quot;; } else { output += &quot;0&quot;; } } document.getElementById(&quot;binary&quot;).innerHTML = &quot;Output&quot; + String(output); &lt;/script&gt; . . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is combining values together Length is how long a particular value is. For example, in a string, the length is the number of characters. A substring is a part of a string . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names : print(name) print(&quot;Length of &quot; + name + &quot;: &quot; + str(len(name))) length(names) . jaden Length of jaden: 5 max Length of max: 3 dylan Length of dylan: 5 orlando Length of orlando: 7 . Challenge . Using JavaScript and HTML frontend: . &lt;p id=&quot;list&quot;&gt;&lt;/p&gt; &lt;script&gt; const names = [&quot;jaden&quot;, &quot;max&quot;, &quot;dylan&quot;, &quot;orlando&quot;]; for (name of names) { document.getElementById(&quot;list&quot;).innerHTML += String(name) + &quot;&lt;br&gt;&quot; + &quot;Length of &quot; + String(name) + &quot;: &quot; + String(name.length) + &quot;&lt;br&gt;&quot;; } &lt;/script&gt; . . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://lwu1822.github.io/fastpages/week-13/big-idea-3/2022/11/18/w14_CSPLesson-expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/w14_CSPLesson-expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "FRQ 1",
            "content": "Explanation of code . Files overview . There are 3 files: APCalendar.java, Year.java, and CalendarApiController.java. APCalendar.java contains the methods that provide the functions of the calendar, Year.java is the POJO to get information from the APCalendar class, and CalendarApiController.java controls the REST API. . How the code works . Calendar data can be accessed through the URI. The endpoints are specified with @GetMapping in CalendarApiController.java. Within each endpoint, a Year object is created and the setYear method is called. Within the Year class, you can see which setters are called. These setters then call methods in the APCalendar class, which are programmed to output things such as if a given year is a leap year, the day of the week of a day, how many days since January 1st a given day of the year is, etc. . . What I learned . Within the APCalendar class, there were many methods that required multiple parameters, such as dayOfYear or numberOfLeapYears. I originally had a little trouble in getting these parameters as input in the endpoint, and after some research, I found that the syntax in the endpoint is something like this: /{var1}/{var2}/{etc}. Then, to specify multiple PathVariables, simply split them apart with commas, like this: &lt;code&gt;@PathVariable int var, @PathVariable int var2&lt;/code&gt;. . Using the debugger . The debugger not only helped me in debugging code; it also helped me to learn how the code works. One thing that I was confused about was what the toString() method did in Year.java. By running the debugger on the tester, (as seen below), . I learned that there is a default toString() method. This is overriden in the Year class. The System.out.println automatically calls the toString() method, which is why an output in JSON format is shown when the tester is run. . . Using Postman . .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/16/frq1PBL.html",
            "relUrl": "/2022/11/16/frq1PBL.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Binary Color",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Learnings from code: . When I first looked at the code for the binary table, I was confused with some of the syntax. Below is a documentation of things that I learned and an explanation of the code. . Many buttons have an id. This id is later used in Javascript. Furthermore, this: {{ i }} is liquid syntax. The i is referred from the for loop, whose syntax is this: {% for i in (start-num .. end-num). . Looking at the first button, there is a function called add. This results in calling the add function in JavaScript. Within the function, the getBits function is called and stored within the variable binary. This function takes the current values of the binary (the 0s or 1s underneath the light bulbs) and stores it into a variable called bits. Next, the variable decimal takes binary and converts it from base 2 into decimal. . The next part is confusing. Within the if statement, n &gt; 0 means that the +1 button was pressed, while the else statement means that the -1 button was pressed. The decimal of the binary value is then set to a certain number. In decimal = MAX === decimal ? 0 : decimal += n, MAX === decimal is a boolean expression which says that if true, the first option before : will run, and if false, the second option will run. MAX, as defined in the constructor, is equal to 255. Therefore, the code is saying that if the decimal (remember that the decimal is equivalent to the value of the 0s and 1s underneath the light bulbs) number is equal to 255, then when you add 1, turn the decimal number into 0 (since the maximum is 8 bits, 2^8 = 256, binary starts from 0, so maximum number is 255). However, if the decimal number is not equal to MAX, just add 1 to decimal. Same thing in the else part of the loop, only this time, it refers to if the -1 button is clicked. If decimal is 0, when the -1 button is clicked, go back to 255, otherwise, just decrease by 1. . After that, the decimal number is converted to binary and stored in the binary variable. To convert to binary, the decimal_2_base function is ran. Within the function, something new that I saw was the do while loop. I learned that the difference between this loop and the while loop was that the while loop would run only if the condition is fulfilled. The do while loop will always run once, and then if the condition in the while portion is fulfilled, the loop will run again. Within the loop, the variable digit is assigned to be equal to the remainder of the decimal number and the base, which when passed into the decimal_2_base function, was 2. digit is then passed into the variable conversion as a string. The next piece of code that I was confused about was ~~(decimal / base);. This is the same as Math.floor(), but runs faster. This piece of code devices the two variables decimal and base, and rounds to the largest integer that is less than or equal to the value. . For example, if decimal = 5, and base = 2, ~~(decimal / base) = ~~(2.5) which will round down to 2. .",
            "url": "https://lwu1822.github.io/fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . | . | . | . | . | . | . | . | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://lwu1822.github.io/fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Unit 6 Array",
            "content": "Notes . Arrays store one data type and has a fixed size. . The syntax to create an array is: data type[] name = new data type[num]. This creates an array with constructors. . The other way to create an array is to pre-initialize it. To do this, type data type[] name = {elements}. . The element of arrays can be accessed through the index. . Errors . ArrayIndexOutOfBoundsException: Arrays can be iterated through loops. If the loop accesses an index that the array does not have, this error can occur. An example is listed below: . int[] numbers = {1, 2, 3}; for (int i = 0; i &lt;= numbers.length; i++) { // uh-oh System.out.println(numbers[i]); } . 1 2 3 . java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 at .(#17:4) . In the example above, the code failed because the for loop iterates from i = 0 to i = 3. The array does not contain an element at index 3. Therefore, the code needs to be altered below: . int[] numbers = {1, 2, 3}; for (int i = 0; i &lt; numbers.length; i++) { // uh-oh System.out.println(numbers[i]); } . 1 2 3 . for each loop . A for each loop is especially useful to traverse through an array. An example is shown below: . int[] numbers = {1, 2, 3}; int sum = 0; for (int num : numbers) { // uh-oh sum += num; } System.out.println(sum); . 6 . #3a . public void addMembers(String[] names, int gradYear) { for (int i = 0; i &lt; names.length; i++) { memberInfo member = new MemberInfo(names[i], gradYear, true); memberList.add(member); } } . Comments: . My solution matched up with the official solutions. Something that I could have used though, would be the for each loop to iterate through each element in the array. . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(n, gradYear, true); memberList.add(member); } } . . Hacks . Hack 1 . int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length(); i+=2) { System.out.println(arrayOne[i]); } . Hack 2 . B .",
            "url": "https://lwu1822.github.io/fastpages/2022/11/09/w12_unit6HW.html",
            "relUrl": "/2022/11/09/w12_unit6HW.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "AP CSP Finals",
            "content": "Below is my score on the Trimester 1 AP CSP Finals. . . This was the question that I got wrong: . . Why I chose the answer: I confused WWW with HTTP. HTTP is a protocol, but WWW is not. . | Correct answer: The correct answer is that WWW is an information system that consists of linked pages, programs, and files. The Internet is a network that can access the World Wide Web. . Reviewing the 4.1 Daily Video 2, I reviewed that the Internet helps connect the computer networks, while WWW is the “network of linked data and programs, running over the Internet”. WWW uses the protocol HTTP. . | . There were also a few questions that I got correct, but I did not fully understand them. Looking at the solutions, my train of thought was about the same as the explanations, but I will include them below for future reference and review. . . My reasoning: I know that four bits in binary is equivalent to 2^4 = 16 values. Since there were 8 directions, I just assumed that each direction would be stored as a value. | . . My reasoning: I knew from before that binary was the fundamental bits that could store information (0s and 1s). However, I just think it is really interesting that all data can be stored in binary, from strings to colors to audio. | . . Note: This one I had no idea, so I guessed on the answer that sounded most correct. . | What I learned: Analog data changes continuously, while digital is discrete. Therefore, digital data would be sampled at regular intervals (not continuous) to approximate the runner’s position. . | .",
            "url": "https://lwu1822.github.io/fastpages/life/2022/11/08/w12_CSPFinalCorrection.html",
            "relUrl": "/life/2022/11/08/w12_CSPFinalCorrection.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "AP CSA Finals",
            "content": "Below is my score on the Trimester 1 AP CSA Finals. My score is 35/40. . . . These were the questions that I got wrong: . . Why I chose the wrong answer: I overlooked the word always in the question, which was why I also selected 1 as the correct answer (since if data does not contain 5, there would be an error). . | What I learned: Since the question says always, 1 would not be correct because if the one element in data is 5, there would not be an error. . | . . . Why I chose the wrong answer: I mistakenly believed that Math.random() produced a number between 0 and 1, inclusive. I also failed to realize that choice A could return an index of -1, which would produce an error. . | What I learned: Math.random() produces a random number between 0 and 1, but not including 1. Furthermore, the (int) type conversion does not round; therefore, myList.size() multiplied by a random decimal number will always result in a product less than myList.size() by at least 1, which will be enough for the maximum index number, which is always 1 less than the size of the list. . | . . . Why I chose the wrong answer: I was not familiar with the .add method. I was actually on the right track; however, when I went through the for loop the first time, I assumed that baboon would always be at index of 1, leading me to choose D instead of B. . | What I learned: Make sure to iterate through the entire for loop until the condition is false. . | . . . Why I chose the wrong answer: I did not understand that both the reference parameter and the actual parameter are aliases. . | What I learned: Passing a reference parameter results in it and the actual parameter being aliases to the same object. Therefore, changes made in the mystery method will also appear in values. Replacing the element of one index after the current index with the sum of the element in the current and subsequent index will result in the answer choice of C. . | . . . Why I chose the wrong answer: I forgot to check the second part of the OR conditional, where k&lt;4. . | What I learned: Since k is always less than 4, there would be an infinite loop. . | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/11/08/w12_CSAFinalCorrection.html",
            "relUrl": "/cb/2022/11/08/w12_CSAFinalCorrection.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Night at the Museum",
            "content": "Night at the Museum takes place at the end of every trimester to showcase students’ work from various classes. There were many exhibitions that you could view, the ones that I went to were the 3D Animations classroom, ceramics, and AP Studio Art rooms. . In the ceramics class, there were a lot of creative items that included mugs and other containers, such as this item which had the design of ocean waves: . . My favorite piece from the ceramics classroom was a mug in the shape of a dragon: . . The artwork in the AP Studio Art classroom had a lot of variety. Some that I found interesting were this drawing of a cat. . . Another piece of artwork that I really liked was this drawing of an eye because of how realistic it looked. . . I also went to the 3D Animations classroom to view their projects. Seeing the donuts were really cool and I felt a sense of familiarity with them because I have also taken the class. . . For APCSA, our team presented our crime prevention project. Another group’s project that I went to see was teamcoders’s Codehoots, which tested Java in a Kahoot style format. . For APCSA, our team presented our dictionary project. Another group’s project that I enjoyed playing around with was the Swag Team’s “Math Games”. The game that I played with was their blackjack game, and i won both rounds :) .",
            "url": "https://lwu1822.github.io/fastpages/life/2022/11/07/w12_NatM.html",
            "relUrl": "/life/2022/11/07/w12_NatM.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "World Crime News Table",
            "content": "News News Link Source .",
            "url": "https://lwu1822.github.io/fastpages/crimebusters/news",
            "relUrl": "/crimebusters/news",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Unit 5 Writing Classes",
            "content": "Notes . What I learned . Static methods are used mainly for convenience. If you create a regular method, you need to create an object to execute the method. However, an object does not need to be created to access a static method. . Polymorphism: This is used with Java extends. When a method in the subclass has the same name as the superclass, the subclass&#39;s method will override the superclass&#39;s. . Late binding results in overriding, or using the specific subclass&#39;s method during run time. On the other hand, if two methods have the same name but different parameters, using one method over the other would be called overloading. . private vs protected: Private only allows access within the class, while protected allows access in the same package or subclasses. . Below is a piece of code that illustrates many parts of a class. . public class Person { private int age; private int height; public Person(){ } public int getAge() { return this.age; } public void setAge(int age) { this.age = age; } public int getHeight() { return this.height; } public void setHeight(int height) { this.height = height; } public static void main(String[] args) { Person person1 = new Person(); person1.setAge(20); person1.setHeight(65); System.out.println(&quot;person1&#39;s age is: &quot; + person1.getAge()); System.out.println(&quot;person1&#39;s height is: &quot; + person1.getHeight()); } } Person.main(null) . person1&#39;s age is: 20 person1&#39;s height is: 65 . Explanation of items in the code . A class is like a blueprint for an object. In this case, the class is Person (names of classes by convention have the first letter capitalized). The Person class has an empty constructor. Common things found in a class are getters and setters. Getters are created with getvariable name, and setters are created with setvariable name. In both cases, the first letter of the variable name should be capitalized, as in accordance with Java variable naming conventions. Getters and setters are used to protect your data so that you do not assign unintended values to your variables. Lastly, the this keyword is used to refer to the declared variables. this is used to differentiate between the declared variables and the variables that are passed into a method as parameters and who may have the same name. . Access modifiers . public allows visibility outside of the declared class, while private only allows visibility within the class. . public class Access{ public int x = 5; } public class AccessTwo { public static void main(String[] args) { Access variableDemo = new Access(); System.out.println(variableDemo.x); } } AccessTwo.main(null) . 5 . Compare with this: . public class Access{ private int x = 5; // x is private } public class AccessTwo { public static void main(String[] args) { Access variableDemo = new Access(); System.out.println(variableDemo.x); } } AccessTwo.main(null) . | System.out.println(variableDemo.x); x has private access in Access . On the other hand, protected allows access only in the same package and subclasses. . public class Access{ protected int x = 5; // x is private } public class AccessTwo extends Access { public static void main(String[] args) { AccessTwo variableDemo = new AccessTwo(); System.out.println(variableDemo.x); } } AccessTwo.main(null) . 5 . Static vs nonstatic . In short, to access a variable from a static method, the variable must be declared with static. . static variables can be accessed in both static and nonstatic methods. nonstatic variables can only be accessed in nonstatic methods . public class staticDemo{ static int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . 5 . This will produce an error because there is no static! . public class staticDemo{ int staticVar = 5; public static void main(String[] args) { System.out.println(staticVar); } } staticDemo.main(null) . | System.out.println(staticVar); non-static variable staticVar cannot be referenced from a static context . Static variables can be accessed in nonstatic methods! . public class staticDemo{ static int staticVar = 5; public void printVar() { System.out.println(staticVar); } public static void main(String[] args) { staticDemo a = new staticDemo(); a.printVar(); } } staticDemo.main(null) . 5 . Tester methods . Tester methods can be used to test if your code is working the way you want it to work. . Inheritance . public class Cat{ public boolean hasTail() { return true; } public void sayMeow() { System.out.println(&quot;Meow!&quot;); } } . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return super.hasTail(); } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); cat1.sayMeow(); System.out.println(&quot;Tabby cat fur type: &quot; + cat1.furType()); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Meow! Tabby cat fur type: striped Tabby cat has tail? true . In the example above, the superclass is Cat, while the subclass is TabbyCat. Extends helps save time from copying and pasting code. TabbyCat has access to all of the methods in Cat, but also has its specific method, furType(). The super keyword calls the superclass. . One interesting thing is that if the subclass has the same method as the superclass, the subclass&#39;s method will override the superclass. This is called polymorphism. See below: . public class TabbyCat extends Cat { public String furType() { return &quot;striped&quot;; } public boolean hasTail() { return false; // oof } public static void main (String[] args) { TabbyCat cat1 = new TabbyCat(); System.out.println(&quot;Tabby cat has tail? &quot; + cat1.hasTail()); } } TabbyCat.main(null) . Tabby cat has tail? false . During compilation though, the hasTail() method will be looked for in the Cat class. Only during run time, the method will be resolved to the TabbyCat object. This is called late binding (using overriding) . Something very cool in Java is that you can have methods with the same name, as long as they have different parameters. This would result in overloading. . Abstract classes . Objects can not be created from abstract classes. Abstract classes serve as a blueprint that other classes can extend from. . abstract class AbstractCat { public void sayMeow() { System.out.println(&quot;meow&quot;); } } . class TabbyCatAbstract extends AbstractCat{ public String furType() { return &quot;striped&quot;; } public static void main(String[] args) { TabbyCatAbstract tabbycat = new TabbyCatAbstract(); System.out.println(tabbycat.furType()); } } TabbyCatAbstract.main(null) . striped . toString() . toString changes the value into a String object . Integer x = 5; System.out.println(&quot;Data type of x is: &quot; + x.toString().getClass().getSimpleName()); . Data type of x is: String . hashCode() . hashCode returns the hash code for an object. If obj1.equals(obj2), then obj1.hashCode() == obj2.hashCode(); . String text = new String(&quot;foo&quot;); String text2 = new String(&quot;foo&quot;); if (text.equals(text2)) { System.out.println(text.hashCode() == text2.hashCode()); } . true . Big O notation . Big O provides the worst case time complexity of an algorithm. It is written in the format of O(n), where n is the size of the input. The worst case time complexity is taken in that say if the function was 2n+3, you would write it as O(n) because as n increases, the 3 becomes less important. . The Big O notation for hash maps is O(1), which is the fastest possible running time. Binary search is O(logn). A single loop is O(n), while a nested loop is O(n^2). . 2019 FRQ #2 . Initial attempt . public class StepTracker { private int numDay; private int activeSteps; private int totalSteps; private int numActiveDays; public StepTracker(int steps) { activeSteps = steps; } public int activeDays() { return numActiveDays; } public double averageSteps() { return totalSteps/numDay; } public void addDailySteps(int steps) { totalSteps += steps; numDay++; if (steps &gt;= activeSteps) { numActiveDays++; } } } . Comments: . In the method averageSteps(), I did not do a type conversion to double in my return statement. A type conversion is needed because totalSteps and numDay are integers. . I also did not account for when numDay = 0, because the return statement can not be divided by 0. Therefore, an if statement is needed to return an average step of 0. . Corrections: . public class StepTracker { private int numDay; private int activeSteps; private int totalSteps; private int numActiveDays; public StepTracker(int steps) { activeSteps = steps; } public int activeDays() { return numActiveDays; } public double averageSteps() { if (numDay == 0) { // corrections return 0.0; } else { return (double) totalSteps/numDay; } } public void addDailySteps(int steps) { totalSteps += steps; numDay++; if (steps &gt;= activeSteps) { numActiveDays++; } } } .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/25/w9_unit5Class.html",
            "relUrl": "/2022/10/25/w9_unit5Class.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Unit 6",
            "content": "Notes . int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length; i+=2) { System.out.println(arrayOne[i]); } . 1 5 9 . int[] myNumbers = new int[] {5, 3, 4, 1, 2}; int i = 0; int min = 0; public void arraySorter(int[] array) { for (int i = 1; i &lt; array.length+1; i++) { for (int j = 0; j &lt; array.length; j++) { if (i == array[j]) { System.out.println(i); } } } } arraySorter(myNumbers); . 1 2 3 4 5 .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/24/w10_unit6JavaHacks.html",
            "relUrl": "/2022/10/24/w10_unit6JavaHacks.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Crime Safety Quiz",
            "content": "Crime Safety Quiz . Note: Unfortunately, this quiz requires the use of backend Spring framework, which was deployed on AWS. The AWS instance has shutdown, which means that the quiz does not work anymore. . This is the repository that contains the backend code that uses Spring. . This is the code that was used to create the table. . Quiz yourself on crime safety! . What this project does: This is a quiz that tests players on how much they understand about crime safety. It is in a table that records the number of times each answer choice is selected. The answer choices are connected to the backend using the Spring Framework. The number of times users selected the answer choices are saved in a MYSQL database. After the user selects one of the answer choices, there will also be feedback given on whether the user selected the right or wrong answer choice. . . Note: If the table shows an error of TypeError: Failed to fetch https://crimebusters.nighthawkcoding.ml/api/quiz/, see if using a VPN works :) . . Question A B C D .",
            "url": "https://lwu1822.github.io/fastpages/crimebusters/quiz",
            "relUrl": "/crimebusters/quiz",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "Unit 4 Iteration",
            "content": "Learnings . The do while loop: I learned that the difference between this loop and the while loop was that the while loop would run only if the condition is fulfilled. The do while loop will always run once, and then if the condition in the while portion is fulfilled, the loop will run again. . int i = 0; do { System.out.println(&quot;i is: &quot; + i); i++; }while (i &lt; 0); . i is: 0 . Compare the code above with the while loop below: . int i = 0; while (i &lt; 0) { System.out.println(&quot;i is: &quot; + i); // no output } . Notes . for loops . For loops help with iteration. With for loops, you can specify how many times you want to repeat through something. . The syntax is: for (1; 2; 3){} (numbers explained below) . 1: Initialize a variable and set it equal to a certain value | 2: Create a conditional with the variable in 1 | 3: Set an increment for the variable | . Putting it all together, a for loop might look like this: . for (int i = 1; i &lt;= 5; i++) { System.out.println(&quot;The value of i is: &quot; + i); } . The value of i is: 1 The value of i is: 2 The value of i is: 3 The value of i is: 4 The value of i is: 5 . for each loops . for each loops are mainly used to iterate through arrays. An example is shown below: . int[] num = {1, 2, 3}; for (int numbers : num) { System.out.println(numbers); } . 1 2 3 . while loops . The syntax of a while loop looks like this: . while (condition) { } . Everytime the while loop executes, it first checks the condition. If the condition is true, the code inside the loop is ran. After the code finishes, the while loop checks again with the condition. . for loops . The syntax of a for loop looks like this: . for (initialize variable; condition; change variable) { } . Every time the for loop executes, it checks the condition. If the condition is true, the code inside the for loop is ran. After the code finishes running, the variable is incremented by the amount specified. . . There can also be nested iteration (ex: for loop within for loop) . for each loop . The syntax for a for-each loop looks like this: . for (dataType item : array){ } . This is especially useful for iterating through arrays. . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letterIndividual = &quot;&quot;; public CaesarCipher(String msg) { for (int i = 0; i &lt; msg.length(); i++) { letterIndividual = msg.substring(i, i+1); if (letterIndividual.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letterIndividual.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letterIndividual.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } if (letterIndividual.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null) . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/21/w9_unit4Iteration.html",
            "relUrl": "/2022/10/21/w9_unit4Iteration.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "JavaScript Fetch API",
            "content": "Below is a table created using HTML. The table displays the word bright, and its definition, which was taken from an API. The API was called using JavaScript Fetch. . Word Definition .",
            "url": "https://lwu1822.github.io/fastpages/api/2022/10/21/w9_dictionaryFEJSFetchAPITable.html",
            "relUrl": "/api/2022/10/21/w9_dictionaryFEJSFetchAPITable.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Unit 5 Writing Classes Hacks (Work In Progress)",
            "content": "public class Cow { private String cowType; private String sound; private int numMilkings; public Cow(){ this.numMilkings = 0; this.cowType = null; this.sound = null; } public Cow (String cowType, String sound) { this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public Cow(String cowType, String sound, int numMilikings) { this.numMilkings = numMilikings; this.cowType = cowType; this.sound = sound; } public void setcowType(String cowType) { this.cowType = cowType; } public String getcowType() { return cowType; } public void toString() { } public static void main(String[] args) { Cow firstCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); Cow secondCow = new Cow(); Cow thirdCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;, 100); firstCow.setcowType(&quot;a&quot;); firstCow.getcowType(); System.out.println(firstCow.getcowType()); } } Cow.main(null) . a .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/20/w9_unit5ClassHack.html",
            "relUrl": "/2022/10/20/w9_unit5ClassHack.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Dictionary Feedback (Work In Progress)",
            "content": "Dictionary Feedback (Work In Progress) . Feedback page for our APCSP dictionary project! . Please answer yes or no to the following questions on how satisfied you were with our project. Thank you! :) . Question Yes No .",
            "url": "https://lwu1822.github.io/fastpages/teamberries/feedback",
            "relUrl": "/teamberries/feedback",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Class Lesson Notes",
            "content": "Unit 1 Primitives . Note: Credit to Period 1&#39;s Primitives presentation for the information below . What are primitives? . Primitives include certain data types, such as integer, doubles, booleans, char, float, and long. Primitive names typically start with a lowercase letter, and if needed, subsequent words start with an uppercase letter. . To switch between primitive data types, casting can be used. . There are 5 types of operators: +=, -=, *=, /=, and %= and an increment and decrement operator: ++ and --. . Scanners . To take in input in java, the Scanner class needs to be first imported with import java.util.Scanner;. Next, a scanner object can be created with Scanner object name = new Scanner(System.in). To take in input, specify the data type that the scanner takes in with scanner.nextdata type . Unit 2 Objects . What are objects? . Objects are instances of a class. There are three steps to create an object: declaration, instantiation, and initialization. Declaration is specified through a type followed by the variable name. Instantiation instantiates the object with the new keyword. Initialization occurs the name of the constructor method is specified after the new keyword. . Creating objects . The syntax to create objects is: Class-name object-name = new constructor-name . Methods . Methods are defined with a return type (int, bool, etc. or void (no return type)) and the method name. . Static vs non static . A static method can only access other static methods, while a nonstatic method can access both static and nonstatic methods. . Math class . Important methods: Math.abs, Math.random() . Unit 4 Iteration . while loops . The syntax of a while loop looks like this: . while (condition) { } . Everytime the while loop executes, it first checks the condition. If the condition is true, the code inside the loop is ran. After the code finishes, the while loop checks again with the condition. . for loops . The syntax of a for loop looks like this: . for (initialize variable; condition; change variable) { } . Every time the for loop executes, it checks the condition. If the condition is true, the code inside the for loop is ran. After the code finishes running, the variable is incremented by the amount specified. . . There can also be nested iteration (ex: for loop within for loop) . for each loop . The syntax for a for-each loop looks like this: . for (dataType item : array){ } . This is especially useful for iterating through arrays. . Unit 5 Writing Classes . What are classes? . Classes are the blueprints for objects. They contain instance variables, constructors, and methods. Objects are instances of classes. . Access modifiers . public: Can be accessed in classes outside of the declaring class . private: Can only be accessed in the declaring class . Getters and setters . Getters help make variables read only. Setters allow write only permissions. . The syntax for getters is: . public data-type getName . Unit 6 Arrays . What are arrays? . Arrays can only be used to store one data type. They are different from ArrayLists in that they are not as flexible; the size of an array is fixed. . To create an array, you can either use constructors (dataType[] arrayName = new dataType[numerOfItems]), or you can use pre-initiliazed arrays (dataType[] arrayName = {elements}) . Traversing arrays . Arrays can be traversed using a for or while loop. . ArrayIndexOutOfBoundsException: This occurs when the loop tries to access a nonexistant index in the array. . for each loop . The syntax is: . for (dataType i : arrayName) { // code } . This is usually used to iterate through each item in the for each loop. .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/17/w8_classLessonNotes.html",
            "relUrl": "/2022/10/17/w8_classLessonNotes.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Unit 2 Using Objects",
            "content": "Learnings . This unit had some very important learnings for me. The first thing that I learned was that if two strings are created in the format of String string1 = new String(&quot;string&quot;), the .equals() method should be used to compare them. . The second thing that I learned was that there is a way to compare if the attributes of two objects are the same using the .equals() method. However, this requires some manual overriding of the .equals() method because by default, .equals() works the same as ==, which compares the object memory address. You can still compare if two objects are the same object with ==. . Notes . Objects are instances of a class. There are three steps to create an object: declaration, instantiation, and initialization. Declaration is specified through a type followed by the variable name. Instantiation instantiates the object with the new keyword. Initialization occurs the name of the constructor method is specified after the new keyword. . Creating objects . The syntax to create objects is: Class-name object-name = new constructor-name . Methods . Methods are defined with a return type (int, bool, etc. or void (no return type)) and the method name. . Static vs non static . A static method can only access other static methods, while a nonstatic method can access both static and nonstatic methods. . Math class . Important methods: Math.abs, Math.random() . Comparing . Numbers . Numbers can be compared using ==. Numbers can always be compared with == because they are primitive types and not objects. . int a = 5; int b = 5; if (a == b) { System.out.println(&quot;a = b&quot;); } . a = b . Strings . There are two ways to compare strings: == and .equals(). . You can use == to compare strings when they are declared like this: String name = &quot;string&quot;; . An example is shown below: . String a = &quot;foo&quot;; String b = &quot;foo&quot;; if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } . The two strings are equal . However, if your two strings are objects, you can not use == to compare them (see below): . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a == b) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are not equal . Instead, you need to use .equals() to compare the two string objects. . String a = new String(&quot;foo&quot;); String b = new String(&quot;foo&quot;); if (a.equals(b)) { System.out.println(&quot;The two strings are equal&quot;); } else { System.out.println(&quot;The two strings are not equal&quot;); } . The two strings are equal . Note: a and b are different objects, but they contain the same string of foo, which is what .equals() checks for. . Objects . There is a way to compare if two objects have the same attributes using the .equals() method. However, you need to first override the method to do so. . Below is an example: . To override the .equals() method, you need to create the method that takes in an object. In this example, the object is the format of Object obj. In the .equals() method, Object obj refers to test2. Next, obj needs to be typecasted to the class, in this case ObjectTest, for comparison to work. The return statement checks to see if the attributes of the two objects are equal. Note: this refers to test1 . public class ObjectTest { String attribute1; String attribute2; // IMPORTANT: forgot to specify String in parameters // see https://www.daniweb.com/programming/software-development/threads/346224/identifier-expected-in-constructor-definition // youtube reference for comparing objects: https://www.youtube.com/watch?v=X2AjBFZfFCY public ObjectTest(String attribute1, String attribute2) { this.attribute1 = attribute1; this.attribute2 = attribute2; } @Override public boolean equals(Object obj) { ObjectTest test = (ObjectTest)obj; return this.attribute1.equals(test.attribute1) &amp;&amp; this.attribute2.equals(test.attribute2); } public static void main(String[] args) { ObjectTest test1 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); ObjectTest test2 = new ObjectTest(&quot;a&quot;, &quot;b&quot;); if (test1.equals(test2)) { System.out.println(&quot;Same attributes&quot;); } } } ObjectTest.main(null) . Same attributes . 1a . Initial attempt: . Comments: I started off alright; however, I was soon stuck at the for loop part. I knew that I had to use a for loop to perform iteration that will compare the substring to secret, but I did not know how to compare to certain characters within a string. After looking at part of the answers, I found that the program utilized the substring() method, which I did not know what it did. After some googling, I applied my knowledge to the code below in my second attempt. . public int scoreGuess(String guess) { int substring; int length = guess.length(); int score; for () score = substring * length * length; } . Second attempt . Comments: This attempt mostly matched the answer key. One thing that I did wrong, however, was that in my comparison in the if statement, I used == instead of .equals. I have seen .equals() before, but I have never used it, so once again, I had to do some googling. I learned that if you want to compare two objects, you would need to use the .equals() method. In this case, secret is an object, as indicated by this line of code: private String secret; . public int scoreGuess(String guess) { int length = guess.length(); int count; int score; for (int i = 0; i &lt; (secret.length() - (length - 1)); i++) { if (guess == secret.substring(i, length)) { count++; length++; } } score = count * length * length; return score; } . Correction: . public int scoreGuess(String guess) { int length = guess.length(); int count; int score; for (int i = 0; i &lt; (secret.length() - (length - 1)); i++) { if (guess.equals(secret.substring(i, length))) { count++; length++; } } score = count * length * length; return score; } . . 1b . Initial attempt: . Comments: I made this a lot more complicated than it needed to be 😳 . Mistakes: I forgot that objects do not need to be created within the findBetterGuess method since findBetterGuess and scoreGuess are in the same class. . Looking at the answer, I learned about the method called compareTo(), which allowed for comparison between strings. compareTo() returns an integer, in which if the integer is smaller than 0, the first string is alphabetically smaller than the second string. If the integer is greater than 0, the first string is alphabetically greater than the second string. If the integer is equal to 0 you guessed it , both strings are the same. . public String findBetterGuess(String guess1, String guess2) { WordMatch string1 = new WordMatch(guess1); WordMatch string2 = new WordMatch(guess2); int score1 = string1.scoreGuess(guess1); int score2 = string2.scoreGuess(guess2); if (score1 &gt; score2) { return guess1; } else if (score1 &lt; score2) { return guess2; } else { int smallGuess = Math.min(guess1.length(), guess2.length()); for (int i = 0; i &lt; smallGuess; i++) { String individualCh1 = guess1.substring(i, i); String individualCh2 = guess2.substring(i, i); int chNum1 = individualCh1.indexOf(individualCh1); int chNum2 = individualCh2.indexOf(individualCh2); if (chNum1 &gt; chNum2) { return guess1; break; } if (chNum2 &gt; chNum1) { return guess2; break; } } } } . Correction . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/16/w8_unit2Objects.html",
            "relUrl": "/2022/10/16/w8_unit2Objects.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "4.1 The Internet (AP CSP)",
            "content": "What is the Internet? . The Internet was developed to allow computers to communicate with each other. They do so by sending packets that consist of 0s and 1s. The packet includes the source and destination. . Computer system: Devices that are used for a similar purpose | Computer network: Computers that are connected to each other in order to communicate | Packet switching: The message that the computer sends is broken into many packets. These can be sent in a random order and are put in the original order once they arrive at the destination device. | Path: The journey (I couldn’t think up of a better word) of a packet from source to destination | Routing: Routers determine the best path to send a packet from source to destination | Bandwidth: The amount of data that can be sent in a network Units include bits per second | . . A protocol is the rules that determine how a packet is sent from source to destination. . There are many protocol models, such as OSI, and TCP/IP. . . TCP/IP model layers: . Application: Includes web servers and DNS DNS translates an IP address to a web URL that is easy for us to remember Protocols: HTTP, HTTPS | Transport: Protocols: TCP, UDP TCP: Slow, but reliable UDP: Fast, but unreliable | Internet: Consists of source and destination IP address, used for transportation of data The internet is scalable, it includes LANs and WANs | Network access: Deals with the hardware, associated with getting the information from binary Protocols: Ethernet NICs (Network interface cards) use the network access protocol and contain a MAC address (used to identify hardware) | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/10/16/w8_CB_4-1.html",
            "relUrl": "/cb/2022/10/16/w8_CB_4-1.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Spring Boot",
            "content": "JPA . JPA (Java Persistence API) allows access to data between Java objects. JPA includes many types of implementations, the most popular being Hibernate, which allows abstraction for object relational mapping (ORM). ORM allows a Java class to be mapped to a database. . The architecture of JPA includes several features such as Entity, which persistence objects within the database. . Repository . Spring Data JPA provides abstraction for Hibernate. It provides simplification by using the repository to access databases, which removes the need to use SQL. . A repository must extend from one of the three following repositories: JPARepository, PagingAndSortingRepository, or CrudRepository. Most of the time, it is extended to JPARepository . In the repository file, th interface is written as: public interface repository name extends JpaRepository&lt;&gt;. The question is, what does &lt;&gt; mean? . In &lt;&gt;, there are two generics that need to be configured. The first is the entity, and the second is the data type for the id. . How to create a Spring Boot JPA (In Progress) . First, create a file titled name.java. Within the file, mark the class as an Entity with @Entity, and mark the id with @Id. In addition, create getters and setters for each variable. . Controller . Create a file titled nameController.java. Use @RestController to mark the class as a controller .",
            "url": "https://lwu1822.github.io/fastpages/backend/2022/10/10/w7_springBoot.html",
            "relUrl": "/backend/2022/10/10/w7_springBoot.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Code Corrections",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . Changes: Change str(i) to str(i+1) since the index of an array starts at 0. . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: # Changed print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . Printing odd numbers . Change i=0 to i=1 to start at the odd number of 1 and not the even number of 0. . odd = [] i = 1 while i &lt;= 10: odd.append(i) i += 2 print(odd) . [1, 3, 5, 7, 9] . Change the modulo from 0 to 1 (odd numbers divide by 2 result in a remainder of 1) . numbers = [0,1,2,3,4,5,6,7,8,9,10] odd = [] for i in numbers: if (numbers[i] % 2 == 1): odd.append(numbers[i]) print(odd) . [1, 3, 5, 7, 9] . Printing a multiple of 2 and 5 . Add a simple elif statement so that if the number is divisible by 5, the program moves out of the if statement and does not repeat even if it is divisible by 2. . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) item = input(&quot;Please select an item from the menu&quot;) print(item) total = menu[item] print(&quot;The price of &quot; + item + &quot; is &quot; + str(total)) #code should add the price of the menu items selected by the user print(&quot;Your total price is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. burger The price of burger is 3.99 Your total price is: $3.99 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu. Enter &#39;done&#39; to finish&quot;) item = input(&quot;Please select an item from the menu&quot;) print(item) while item != &quot;done&quot;: total += menu[item] item = input(&quot;Please select an item from the menu&quot;) print(item) #code should add the price of the menu items selected by the user print(&quot;Your total price is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Enter &#39;done&#39; to finish burger burger fries drink done Your total price is: $10.96 . Hacks . Possible errors could pertain to first finding an API that provides a reverse dictionary, and then connecting it from frontend to backend. Other errors could occur when the reverse dictionary can not find a word based on the user&#39;s inputted definition or if the reverse dictionary outputs incorrect words. . | Test cases could be testing out each individual section of the code, for instance, first testing out one specific word before testing any input. By limiting the testing to one specific thing, we can first focus on the specific before expanding to the general. . | .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/09/w7_codeCorrection.html",
            "relUrl": "/2022/10/09/w7_codeCorrection.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "API with Jupyter Notebook",
            "content": "import requests url = &quot;https://dictionary-by-api-ninjas.p.rapidapi.com/v1/dictionary&quot; querystring = {&quot;word&quot;:&quot;bright&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;cc6d770f58msh120c53d95d27c68p1d2955jsn1898ff4fa031&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dictionary-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) wordDefinition = response.json().get(&#39;definition&#39;) word = response.json().get(&#39;word&#39;) print(&quot;Word: &quot;) print(word) print() print(&quot;Definition: &quot;) print(wordDefinition) . Word: bright Definition: See Brite, v. i. 1. Radiating or reflecting light; shedding or having much light; shining; luminous; not dark. The sun was bright o&#39;erhead. Longfellow. The earth was dark, but the heavens were bright. Drake. The public places were as bright as at noonday. Macaulay. 2. Transmitting light; clear; transparent. From the brightest wines He &#39;d turn abhorrent. Thomson. 3. Having qualities that render conspicuous or attractive, or that affect the mind as light does the eye; resplendent with charms; as, bright beauty. Bright as an angel new-dropped from the sky. Parnell. 4. Having a clear, quick intellect; intelligent. 5. Sparkling with wit; lively; vivacious; shedding cheerfulness and joy around; cheerful; cheery. Be bright and jovial among your guests. Shak. 6. Illustrious; glorious. In the brightest annals of a female reign. Cotton. 7. Manifest to the mind, as light is to the eyes; clear; evident; plain. That he may with more ease, with brighter evidence, and with surer success, draw the bearner on. I. Watts. 8. Of brilliant color; of lively hue or appearance. Here the bright crocus and blue violet grew. Pope. Note: Bright is used in composition in the sense of brilliant, clear, sunny, etc.; as, bright-eyed, bright-haired, bright-hued. Syn. -- Shining; splending; luminous; lustrous; brilliant; resplendent; effulgent; refulgent; radiant; sparkling; glittering; lucid; beamy; clear; transparent; illustrious; witty; clear; vivacious; sunny. Splendor; brightness. [Poetic] Dark with excessive bright thy skirts appear. Milton. Brightly. Chaucer. I say it is the moon that shines so bright. Shak. To be or become overripe, as wheat, barley, or hops. [Prov. Eng.] .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/09/dictionaryJupyterAPI.html",
            "relUrl": "/2022/10/09/dictionaryJupyterAPI.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Array List",
            "content": "What is an ArrayList? . An ArrayList is like an array, except better :) . The main problem with a regular array is that elements can not be added or removed from the array (can not change the array size). This is made possible with ArrayList . To begin, start by creating an ArrayList object: . import java.util.ArrayList; abstract class ArrayListDemo{ ArrayList&lt;String&gt; alphabet = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)); public ArrayListDemo() { } protected abstract void changes(); } . Add, edit, and remove elements . To add elements, use the add() method. To add an element at a specific index, use add(index, element). To add all elements in an array to another array, use addAll(index, array). To edit elements, use set(index, element). To remove elements at a specific index, use the remove(index) method, or to remove a specific element, use remove(element). To clear an array, use the clear() method. . Add elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.add(&quot;d&quot;); super.alphabet.add(1, &quot;z&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, z, b, c, d] . Edit elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.set(0, &quot;z&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [z, b, c] . Remove elements . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.remove(1); super.alphabet.remove(&quot;c&quot;); System.out.println(super.alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a] . Add an array to another . public class SpecificArray extends ArrayListDemo { ArrayList&lt;String&gt; alphabet2 = new ArrayList&lt;String&gt;(Arrays.asList(&quot;z&quot;, &quot;x&quot;, &quot;y&quot;)); public SpecificArray() { } public void changes() { super.alphabet.addAll(1, alphabet2); System.out.println(alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, z, x, y, b, c] . Clear . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { super.alphabet.clear(); System.out.println(alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [] . Array Info . To find the size of the array, use the size() method. To see the specific element at an index, use the get() method. indexOf(element) will return the first index that the element is in, while lastIndexOf(element) will return the index of the last occurrence of the element. To find the associated hash of the array, use the hashCode() method. The isEmpty() method will return true if the array is empty, and false if not. To check if the array contains an element, use the contains(element) method. To check if two arrays are equal to each other, use the equals(array) method, and to check if an array contains all of the elements in a collection, use the containsAll(array) method. To sort the elements in an ArrayList, use the sort() method. . ArrayList Info . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { System.out.println(super.alphabet); System.out.println(&quot;Size of alphabet array is: &quot; + super.alphabet.size()); System.out.println(&quot;Element of index 0 is: &quot; + super.alphabet.get(0)); System.out.println(&quot;Index of element b is: &quot; + super.alphabet.indexOf(&quot;b&quot;)); super.alphabet.add(&quot;a&quot;); System.out.println(&quot;Updated ArrayList: &quot; + super.alphabet); System.out.println(&quot;Last occurence of a is at index: &quot; + super.alphabet.lastIndexOf(&quot;a&quot;)); System.out.println(&quot;Hash code of alphabet is &quot; + super.alphabet.hashCode()); if (super.alphabet.isEmpty() == true) { System.out.println(&quot;alphabet array is empty!&quot;); } else { System.out.println(&quot;alphabet array is not empty!&quot;); } if (super.alphabet.contains(&quot;z&quot;) == true) { System.out.println(&quot;alphabet array contains the element z&quot;); } else { System.out.println(&quot;alphabet array does not contain the element z&quot;); } } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . [a, b, c] Size of alphabet array is: 3 Element of index 0 is: a Index of element b is: 1 Updated ArrayList: [a, b, c, a] Last occurence of a is at index: 3 Hash code of alphabet is 3910592 alphabet array is not empty! alphabet array does not contain the element z false . Compare ArrayLists . public class SpecificArray extends ArrayListDemo { ArrayList&lt;String&gt; alphabet2 = new ArrayList&lt;String&gt;(Arrays.asList(&quot;z&quot;, &quot;x&quot;, &quot;y&quot;)); public SpecificArray() { } public void changes() { System.out.println(&quot;alphabet: &quot; + alphabet); System.out.println(&quot;alphabet2: &quot; + alphabet2); if (alphabet.equals(alphabet2)) { System.out.println(&quot;alphabet and alphabet2 are the same&quot;); } else { System.out.println(&quot;alphabet and alphabet2 are different&quot;); } if (alphabet.containsAll(alphabet2)) { System.out.println(&quot;alphabet and alphabet2 have the same elements&quot;); } else { System.out.println(&quot;alphabet and alphabet2 have different elements&quot;); } } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . alphabet: [a, b, c] alphabet2: [z, x, y] alphabet and alphabet2 are different alphabet and alphabet2 have different elements . Sort ArrayLists . public class SpecificArray extends ArrayListDemo { public SpecificArray() { } public void changes() { alphabet.add(&quot;a&quot;); System.out.println(&quot;Modified alphabet ArrayList: &quot; + alphabet); alphabet.sort(Comparator.naturalOrder()); System.out.println(&quot;Sorted ArrayList alphabet: &quot; + alphabet); } public static void main(String[] args) { SpecificArray changeArray = new SpecificArray(); changeArray.changes(); } } SpecificArray.main(null); . Modified alphabet ArrayList: [a, b, c, a] Sorted ArrayList alphabet: [a, a, b, c] .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/07/w7_arrayList.html",
            "relUrl": "/2022/10/07/w7_arrayList.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Java Backend API",
            "content": "Crime News API . . Map API . . How I created a table in Java backend using an API . This took me a whole day to figure out. . Learning about APIs is still an ongoing process for me, so below, I’ll document the things that I learned about APIs and what I picked up while coding. . The code that I started with was what I took from the RapidAPI website. I then used some code to parse the JSON response. This was the place that messed me up for a long time, as I kept receiving errors in my code. After hours of googling, I finally found the answer, and that fixed things up. . However, the most important things I learned was: . The API calling process in Java | Thymeleaf | API calling process in Java . First, an HTTP client needs to be created with HttpClient. Next, a request using HttpRequest is created to send a request to the HTTP client. Within the request, the type of request (GET), URI, and headers are specified. Putting it all together is build(). Then use the client to send back the HTTP request. . Thymeleaf . After receiving the JSON data, an issue that I ran into was to output the data into a table format on the frontend of Spring boot. I took a look at some of the programs already present in the spring portfolio, such as greet.html, knowing that it would have to convert backend data to frontend. Within the program, I noticed an interesting snippet of code which was ${name}. Googling the syntax lead me to learn about Thymeleaf, which is a Java template engine. This was really cool, because Thymeleaf changes Java data into HTML (which can actually be shown on a webpage). I’ll probably bore you with the details later when I update this blog further, but for now, you are spared :) Anyways, a simple Youtube search of “what is Thymeleaf” gave me an introduction of how to use this template language. The thing that was super useful that I learned from the video was that Thymeleaf uses th:each to iterate over arrays and lists. This allowed me to print the JSON data, which consisted of objects, into a table format. . . Misc . Benefits of using API include that it helps simplify the process between how the user interacts with the application and what data the application an receive from the server. . The benefits of backend implementation is that it allows for more control. For instance, the API access can be limited .",
            "url": "https://lwu1822.github.io/fastpages/backend/2022/10/05/w6_javaBackendAPI.html",
            "relUrl": "/backend/2022/10/05/w6_javaBackendAPI.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "Deployment",
            "content": "Curl . . Making a change in Flask Portfolio and showing it on the website . . . .",
            "url": "https://lwu1822.github.io/fastpages/deployment/2022/10/04/w6_deployment.html",
            "relUrl": "/deployment/2022/10/04/w6_deployment.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "Random",
            "content": ". © MapTiler © OpenStreetMap contributors . .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/10/03/mapAPI.html",
            "relUrl": "/js/2022/10/03/mapAPI.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "1.3 Collaboration",
            "content": "Program . A program is developed with an idea that aims to follow a purpose. . Developers need to investigate the issue and be aware of constraints (such as time), pay attention to user concerns. Methods of investigation include surveys or testing. . Afterwards, developers design the program through brainstorming, creating the user interface, and organizing. . Prototypes are created, and small parts are created to test each individual parts. . Last process is to refine. . Each contributor to the program should be properly credited in the documentation. . Documentation: An overview of the program that may include functions, events, and other specific aspects of the code. .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/10/02/w6_CB_1-3.html",
            "relUrl": "/cb/2022/10/02/w6_CB_1-3.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "Fetch API Notes",
            "content": "Below is a documentation of me learning about APIs. . What is an API? . An API allows a developer to obtain data from web services. It performs abstraction to make tasks simpler for the user. Usually, an API acts between the application (what the user interacts with) and the server (contains the data, or resource). The process begins with the user creating an API call, which then proceeds with the application using the API to communicate with the server. The API then brings back the requested data to the user. . Types of APIs . REST API . The most common type of API is REST API. REST stands for Representational State Transfer. REST APIs are typically associated with JSON, although the payload (data that the API delivers), can be in the form of HTML or XML. REST is used because of its speed and reliability. It also allows services to be used through HTTP. . Parts of a REST API include: . Endpoint: Includes URI: The url | HTTP method: What the client wants to do with a resource Includes GET (get), POST (make), PUT (update), DELETE (remove) | Headers: Contains things required for authentication and information about the client and server | Body: Other info included in the request | . When the client wants to access a resource, it sends a HTTP Request to the server. The server responds with a HTTP Response that contains data, or the representation about the resource, not the actual resource itself. The format of the representation cna be in XML or JSON. . What is Fetch API? . Fetch enables the user to make HTTP requests to servers. The Fetch API includes the fetch() method, which can take in two parameters, the URL and options. . fetch() returns a promise that can be used with the .then() and .catch() methods as well as being able to use async/await. . Once the request finishes, promise will resolve into a Response object. . Response is an API wrapper for what was fetched. . Now, what is an API wrapper? . To understand this, a helpful website first explained what a wrapper is. Basically, a wrapper helps make an item simpler by “wrapping” over the item. For instance, it can use abstraction to help simplify code. It can also convert data to make it more compatible. . Thus, an API wrapper allows you to combine many API calls into one to make things simpler. . . Alright, where was I? Right, Response. . Feel like showing the response? Below is an example of reading the response if it is in raw text. (Don’t really understand it at the moment, will research more about it later) . fetch(&#39;/readme.txt&#39;) .then(response =&gt; response.text()) .then(data =&gt; console.log(data)); . Question: Is /readme.txt the URL? It looks like a file… Can a file be a URL? . I’m guessing /readme.txt is the URL to the README file. . Below is an explanation of a typical piece of code that you many find in a Fetch API: . .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) . Question to self: What is the difference between .then(data =&gt; console.log(data)) and .then(response =&gt; console.log(response))? . response: The response object that is returned by fetch. . response.json(): The response object does not return directly accessible data. Instead, the response needs to parsed into JSON using the json() method. . data: The JSON data . . You can also see the status code using the Response object. This can be accessed with the status property (response.status). . Quick lesson on status codes: . 200 is the status code you want, it means that the request was successful. | 404 means that what was requested does not exist | 500 means that there is a server error | . Note: fetch always succeeds, which means that even if the server responds with a 404, an error message would not show even if a catch statement was implemented. . Misc . Quick definition about entity: In programming, an entity is an object, which means it can include attributes and methods. . Allows access to the API through a specific programming language. . . Below is an example that uses the Fetch API to display airplane flight codes in a table: . IATA Code Name ICAO Code .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/10/01/w6_jsFetchAPINote.html",
            "relUrl": "/js/2022/10/01/w6_jsFetchAPINote.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Images",
            "content": "ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;-&quot;; } else if (g &gt;= 170) { str = &quot;*&quot;; } else if (g &gt;= 160) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;j&quot;; }else if (g &gt;= 140) { str = &quot;n&quot;; }else if (g &gt;= 130) { str = &quot;V&quot;; } else if (g &gt;= 120) { str = &quot;3&quot;; } else if (g &gt;= 110) { str = &quot;5&quot;; } else if (g &gt;= 100) { str = &quot;&amp;&quot;; } else if (g &gt;= 90) { str = &quot;g&quot;; }else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . . Explanation of code . First, the monaLisa object is created, which calls the Pics constructor and passes in a name of MonaLisa and an ext (extension) of .png. These are assigned to the attributes, creating an input file (images/MonaLisa.png), an output (resized) file (images/MonaLisa.png), and an output (ASCII) file (images/tmp/MonaLisa.txt). . Next, the setStats() method is called. The path of the input file is assigned to the path object. The number of bytes is also assigned, and then ImageIO reads the input file and obtains its width and height, assigning them to their respective variables. . Now going back to the main method, the monaLisa object calls the printStats() method and passes in the argument of &quot;Original&quot;. This basically outputs some information of the input file, such as its size, width, and height. As you can see in the output above, the printStats() method outputs, Original: 499298 389x413 images/MonaLisa.png. . Afterwards, the monaLisa object calls the resize() method with an argument of 33 (resize the image to 33%). An Image object is created. Note: this is really important, the Image object needs to be created out of the try catch block, because if it is created within, the scope of the Image object is within the try catch block and can not be accessed outside. See this for more info. Moving on, the width and height are defined based on the resized scale, and the input file is once again read into img. The resizedImg is obtained by using the getScaledInstance method and assigning it the resized width and height. Next, resizedImg is converted into a buffered image with the name of the resizedFile (images/tmp/MonaLisa.png). The resizedFile is then set as the path of the input file. Once again, the setStats() method is called. . Because of scope of variables, some values of the variables have changed. The path of the input file (inFile) is now assigned to path. The size of the resized file is recorded, and the file is also read in by ImageIO. Additionally, the width and height of the resized file is recorded. . Going back to the main method, the printStats() method is called. Same thing as before, this outputs Scaled: 55625 128x136 images/tmp/MonaLisa.png. . Lastly, the convertToAscii() method is called. Once again, the Image object needs to be set as null outside of the try catch block in order to fulfill the scope of the variable. The first try catch block ensures that if there is already an Ascii file in the output directory, the file would be removed. Next, the PrintWriter and FileWriter object is called to output text (ASCII characters) into the ASCII file (images/tmp/MonaLisa.txt). ImageIO then reads the input file. . Onto the for loop, each pixel of the image is iterated, and a value is calculated based on the RGB value of the pixel. The larger the value (closer to white, or 255), the less space the ASCII character will pick up. As for smaller values (closer to black, or 0), the ASCII character will take up more space. This is called by the asciiChar(double g) method, and it returns the ASCII character. . Grayscale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class Pics { final String inDir = &quot;images/&quot;; // location of images final String outDir = &quot;images/tmp/&quot;; // location of created files String inFile; String resizedFile; String grayscaleFile; String outFile; String ext; // extension of file long bytes; int width; int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.outFile = this.outDir + name + &quot;New.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void changePic() { BufferedImage img; try { File file = new File(this.outFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } test(); } protected abstract void test(); } . public class Grayscale extends Pics { public Grayscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed() * 0.299); int green = (int)(col.getGreen() * 0.587); int blue = (int)(col.getBlue() * 0.114); Color rgb = new Color(red + green + blue, red + green + blue, red + green + blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Grayscale monaLisa = new Grayscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Grayscale.main(null); . . Red . public class Redscale extends Pics { public Redscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); Color rgb = new Color(red, 0, 0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Redscale monaLisa = new Redscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Redscale.main(null); . . Blue . public class Bluescale extends Pics { public Bluescale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int blue = (int)(col.getBlue()); Color rgb = new Color(0, 0, blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Bluescale monaLisa = new Bluescale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Bluescale.main(null); . . Green . public class Greenscale extends Pics { public Greenscale(String name, String ext) { super(name, ext); } protected void test() { BufferedImage img; try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int green = (int)(col.getGreen()); Color rgb = new Color(0, green, 0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(super.outFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Greenscale monaLisa = new Greenscale(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.changePic(); } } Greenscale.main(null); . .",
            "url": "https://lwu1822.github.io/fastpages/2022/10/01/w6_img.html",
            "relUrl": "/2022/10/01/w6_img.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "Creating a table using JavaScript",
            "content": "Submenu | JavaScript | JavaScript Table | API | . . . Below is the code that I used to create the table above in JavaScript: . &lt;script&gt; function Fruits(name, taste) { this.name = name; this.taste = taste; } &lt;!-- space --&gt; var fruits = [ new Fruits(&quot;apple&quot;, &quot;sweet, sour&quot;), new Fruits(&quot;mango&quot;, &quot;sweet&quot;) ]; &lt;!-- space --&gt; function Combine(fruits) { this.fruits = fruits; this.combine = []; this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); } &lt;!-- space --&gt; var printFruits = new Combine(fruits); &lt;!-- space --&gt; var outputHTML = &quot;&quot;; outputHTML += &quot;&lt;table&gt;&quot;; outputHTML += &quot;&lt;tr&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + &quot;Fruit Type&quot; + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + &quot;Taste&quot; + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;/tr&gt;&quot;; &lt;!-- space --&gt; var week = 0; for (var row of printFruits.combine) { outputHTML += &quot;&lt;tr&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;td&gt;&quot; + row.taste + &quot;&lt;/td&gt;&quot;; outputHTML += &quot;&lt;/tr&gt;&quot;; } outputHTML += &quot;&lt;/table&gt;&quot;; &lt;!-- space --&gt; document.getElementById(&quot;output_div&quot;).innerHTML = outputHTML; &lt;/script&gt; . . Explanation of code: . An object called printFruits is created. This calls the Combine constructor, which uses information from the fruits array, which calls the Fruits constructor. This creates a key of name and taste and a value as set by the code. . Now, what does this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); do? Understanding the arrow function (=&gt;) took me awhile, but this is basically a shorthand way to write: . this.fruits.forEach(function(fruit) { this.combine.push(fruit); }); . which basically adds the elements in the fruit array into a new array called combine. . Afterwards, a table is created using HTML within JavaScript. The for loop loops over the combine array and outputs it as HTML in the table. . And that’s it! A table made in JavaScript. .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/09/25/w5_javascriptTable.html",
            "relUrl": "/js/2022/09/25/w5_javascriptTable.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "JavaScript",
            "content": "Submenu | JavaScript | JavaScript Table | API | . . The following code prints a message to the console . console.log(&quot;Hi&quot;); . Hi . If you type this in a normal JavaScript file though, this message would not show on the webpage. Instead, you have to go to Inspect Element (Ctrl + Shift + I in Chrome, using Windows), and go to the Console tab to view the message. . . Functions . Since I can&#39;t run the following code below in Jupyter Notebook, I&#39;ll attach a screenshot of running the output in terminal. . The reason this can&#39;t be run Jupyter Notebook (although I&#39;ll have to do more research about Jupyter Notebook to fully understand) is that Jupyter Notebook can&#39;t take input for JavaScript using prompt or readline. Maybe there&#39;s another way to have Jupyter Notebook take in input, but that&#39;ll take me a long time to research. . As shown below, I made a calculator with the code below. I created the functions add, subtract, multiply, and divide. . const prompt = require(&#39;prompt-sync&#39;)(); var total = prompt(&#39;1st number? &#39;); var num2 = prompt(&#39;2nd number? &#39;); var operation = prompt(&#39;Add/subtract/multiply/divide? Type: +/-/*, or /: &#39;); function add(total, num2) { return Number(total) + Number(num2); } function subtract(total, num2) { return Number(total) - Number(num2); } function multiply(total, num2) { return Number(total) * Number(num2); } function divide(total, num2) { return Number(total) / Number(num2); } while (num2 != &quot;end&quot;) { if (operation == &quot;+&quot;) { total = add(total, num2); } if (operation == &quot;-&quot;) { total = subtract(total, num2); } if (operation == &quot;*&quot;) { total = multiply(total, num2); } if (operation == &quot;/&quot;) { total = divide(total, num2); } console.log(&quot;Your result is &quot; + total); num2 = prompt(&#39;2nd number? &#39;); if (num2 == &quot;end&quot;) { break; } operation = prompt(&#39;Add/subtract/multiply/divide? Type: +/-/*, or /: &#39;); } console.log(&quot;Your result is &quot; + total); . Running the code in terminal, here is the output. . . Array and objects . function Fruits(name, taste) { this.name = name; this.taste = taste; } var fruits = [ new Fruits(&quot;apple&quot;, &quot;sweet, sour&quot;), new Fruits(&quot;mango&quot;, &quot;sweet&quot;) ]; function Combine(fruits) { this.fruits = fruits; this.combine = []; this.fruits.forEach(fruit =&gt; {this.combine.push(fruit);}); } printFruits = new Combine(fruits); console.log(printFruits.combine); . [ Fruits { name: &#39;apple&#39;, taste: &#39;sweet, sour&#39; }, Fruits { name: &#39;mango&#39;, taste: &#39;sweet&#39; } ] .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/25/w5_javascript.html",
            "relUrl": "/2022/09/25/w5_javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post88": {
            "title": "Creating a table using JavaScript for the CSA Team Project",
            "content": "This is a table created with JavaScript (not HTML) that displays the age and roles of the team members on the Crimebusters project. . . .",
            "url": "https://lwu1822.github.io/fastpages/js/2022/09/25/w5_csaJavascriptTableTeam.html",
            "relUrl": "/js/2022/09/25/w5_csaJavascriptTableTeam.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post89": {
            "title": "1.2 Collaboration",
            "content": "Examples of computing innovations: . Applications, such as games | Physical devices, such as computers | Systems, such as E-mail Ex: Systems for accessing and storing data | . Purpose of computing innovations is to help solve problems. . . Event driven programming: Program statements are ran when events are triggered . Forms of input and output: Tactile, audio, visual, text . For example, smartphones rely on tactile input. . Example of an input on a smartphone: Swipes . Action: Triggers an event . . Program: Group of statements, or commands . How to explain a code segment: . State it’s function | Explain how it performs its function | .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/25/w5_CB_1-2.html",
            "relUrl": "/cb/2022/09/25/w5_CB_1-2.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post90": {
            "title": "Fibonacci",
            "content": "For loop . I first created an array that contained two elements. Within the for loop, the first element of the array is added to the list of numbers through the setData method. Next, I changed the first element of the array into the second element, and the second into the sum of the first and second element, and allowed the for lop to repeat. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ } . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init(){ super.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; super.size; i++) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = for loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 6 milliseconds . . While loop . Same method of approach as the for loop. This time, I used a while loop that would repeat when i incremented (with i++). . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init(){ super.name = &quot;while loop&quot;; long[] nums = new long[]{0, 1}; int i = 0; while (i &lt; super.size) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = while loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 12 milliseconds . . Recursion . I created a method called recursiveLoop(), and then had it call its method repeatedly until the size of the Fibonacci sequence was reached (20 in this case). . public class FiboExtended extends Fibo { public FiboExtended() { super(); } protected void init() { super.name = &quot;recursion&quot;; long[] nums = new long[]{0, 1}; test(0, nums); } public void test(int i, long[] array) { long[] nums = array.clone(); if (i &lt; super.size) { super.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; test(i, nums); } } static public void main(String[] args) { long startTime = System.nanoTime(); FiboExtended fib = new FiboExtended(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); System.out.println(&quot;Time to run code: &quot; + duration/1000000 + &quot; milliseconds&quot;); } } FiboExtended.main(null); . Init method = recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time to run code: 3 milliseconds . . Skills . Skill 1.B: Determine code that would be used to complete code segments: (Explained in each type of code above) . | Skill 4.C: Determine if two or more code segments yield equivalent results . It&#39;s pretty simple to see how the for loop and while loop achieve the same results. In the for loop, each line of code is implemented, and after the program reaches the end of the loop, the loop is repeated (with i incrementing by 1), until i = 20 (the value of size). . The recursion is a little bit more complicated. First, the recursive loop is called within the init method, and then proceeds to run through the code. At the end of the code, i is incremented by 1, and the last line of code, recursiveLoop(i) tells the program to run the recursive loop again, repeating until i = 20. . tldr; As a result, all three methods achieve the same result in that the code within the loop is ran, i increases by 1, which causes the loop to run again until i = 20. . | Skill 5.A: Describe the behavior of a given segment of program code: (Explained in each type of code above) . Timing: Using system.nanoTime(), it seems as if the for loop runs the fastest, followed by recursion, and lastly the while loop. . | . Things I learned . From the example of Fibo using stream. . this(): Calls constructor with the same name in the current class . Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}): . new long[]{0, 1}: Creates an array, becomes the seed for the Stream.iterate method | f -&gt; new long[]{f[1], f[0] + f[1]}: Lambda expression, passing in the parameter of f into the function new long[]{f[1], f[0] + f[1]} | . .limit(this.size): Set a limit (in this case, 20), to the number of times the stream iterates . .forEach(f -&gt; this.setData(f[0]));: For each item, run the setData() method . Hashmap: Unlike an array that is accessed through an index, a hashmap uses key/value pairs. As a result, the index of a hashmap can be an string, whereas the index of an array is an integer. . . An explanation of the Fibo code using streams. . Looking at the code was pretty challenging, but after searching up each unfamiliar piece of code, I had a general idea of what the program does. . I will explain below what the code does so that it can further my understanding of Java. . By creating the fib object, the Fibo() constructor is ran. this(20); points to the Fibo(int nth) constructor. The code within the constructor is ran, mainly use to assign variables to various values. Next, the init() method is ran. An array is created within the stream. The stream will iterate 20 times, as determined with .limit(this.size). Next, for each item (the element in the array), the setData method will run with f[0] as an argument. When the stream iterates again, the array will change it&#39;s first element to the second element, and its second element to the sum of the first and second element. Now onto running the setData(long num) method. First, the element of f[0] will be added to the already created list. Next, a hashmap will be created, with a key with the index number, and a value with a duplicate of the list (list.clone();). Going back to the main method, fib.print(); runs the print() method. I&#39;ll skip the basic calling the variable stuff and proceed to the second System.out.println, in which the getNth() method is ran. Here, the last element of the list (and you have to access the last element with this.size - 1 because there are 20 elements in the array, so the 20th element is accessed using the 19th index since indexes start at 0) is obtained to print the 20th Fibonacci number. Next, the entire Fibonacci array and hashmap is printed. Finally, the for loop outputs each of the values for the specified key. The Fibonacci sequence for each number is printed successfully because each key is associated with a list, which contains the Fibonacci sequence for the sequence number. .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/24/w5_fibonacci.html",
            "relUrl": "/2022/09/24/w5_fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post91": {
            "title": "CSP Project Planning",
            "content": "Our Aim . We want to prioritize the customer before anything else; here’s how this will be done: . Our website will run smoothly with minimal errors | Try to keep our website as engaging as possible | Listen to reviews and make changes as necessary | Make the results accurate | About the Project . In this project, we are making a reverse dictionary. We were inspired by many students’ studious and driven culture and wanted to create a site that could help them. A problem that we noticed among many students, especially those in advanced English courses, is that they often don’t know or can’t remember the word they want to use. Through the use of this website, we want to help these students allowing them to do well where ever they choose to use this website. . How is This Done . In order to achieve this, we first need to get a basic understanding of how reverse dictionaries work and how to code them. After searching on Google, we came across many fascinating sites, some even explaining the basics of a reverse dictionary. Essentially it is looking for an output similar to the combination of the inputs. One of our ideas was to make the user input either the definition of the word or other words related to the word they need. For example, if you’re searching for the word “apple,” you can input “fruit,” “red,” and “grows on trees” to get your result. And currently, we are planning to code most of this with Python, use HTML to display everything, and use JavaScript to allow the user to interact with the results. . Create Performance Task Categories . 1 Program Purpose and Function . See above . 2 Abstraction . Each synonym could be stored in a list, which would either be manually created by us (less likely), or given in the API (more likely). The hard part would be to find a reverse dictionary API. . Managing Complexity . By using a list to store the synonyms of words, the code would be simplified so that multiple variables, each storing only one word, would not be needed. . 4 Procedural Abstraction . We could make functions that include that collect the user’s inputs of various word definitions. These inputs would then need to be processed by comparing with the information in the API and then being able to output the ideal words to frontend. . 5 Algorithm Implementation . Recursion can be used to repeatedly find definitions that contain certain keywords that the user implemented. if statements could be used to select the words with the closest definition and display them under a category, then select the words with a moderate level of closeness and put them in another category. . 6 Testing . Many parts of the program would include the need for testing. First of all, we need to implement an API and connect the frontend with the backend so that the frontend can display information about the API. This would require testing by inputting many definitions and seeing if the outcome word is what is desired. . Team Scrum Board . Team Scrum Board . Agile Methodology Diagram . . Our team used Slack as a form of communication to plan out our project. . .",
            "url": "https://lwu1822.github.io/fastpages/csp/2022/09/17/w5_CSPProjectPlanning.html",
            "relUrl": "/csp/2022/09/17/w5_CSPProjectPlanning.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post92": {
            "title": "1.1 Collaboration",
            "content": "College Board Big Ideas Learning Objectives: . CRD-1.A Explain how computing innovations are improved through collaboration. . CRD-1.B Explain how computing innovations are developed by groups of people . CRD-1.C Demonstrate effective interpersonal skills during collaboration. . Essential knowledge: . CRD-1.A.1 A computing innovation includes a program as an integral part of its function. . CRD-1.A.2 A computing innovation can be physical (e.g., self-driving car), nonphysical computing software (e.g., picture editing software), or a nonphysical computing concept (e.g., e-commerce) . CRD-1.A.3 Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. . CRD-1.A.4 Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. . CRD-1.A.5 Consultation and communication with users are important aspects of the development of computing innovations. . CRD-1.A.6 Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives. . CRD-1.B.1 Online tools support collaboration by allowing programmers to share and provide feedback on ideas and documents. . CRD-1.B.2 Common models such as pair programming exist to facilitate collaboration. . CRD-1.C.1 Effective collaborative teams practice interpersonal skills, including but not limited to: . communication | consensus building | conflict resolution | negotiation | . Collaboration allows people who specialize in different areas to work together to reach an end product. It can involve the combination of the diverse ideas of many people. Skills that are developed through collaboration include: communication, consensus building, conflict resolution, and negotiation. . Computing innovation: A physical or nonphysical program. Examples include VSCode (nonphysical) or a self driving car (physical). . Collaboration can take place in many formats. Examples include: pair programming (one as driver, one as navigator), think-pair-share (students think through a problem alone, discuss in pairs, then share with class). . Online tools for collaboration: . repl.it | Github | Shared document/folder | . Comments in code also help with communication to yourself and others reading your code. .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/17/w4_CB_1-1.html",
            "relUrl": "/cb/2022/09/17/w4_CB_1-1.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post93": {
            "title": "Iteration with 2D array",
            "content": "The following code outputs the monkeys horizontally in an imperative programming style. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts // PREVENT NEW LINE FROM POPPING UP //System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . With objects . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); } } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ . How to access arrays? . If you want to access individual elements within an array, you can access them with arrayName[row index][column index]. . What if I want to print all of the contents in an array? . We can use a for loop to achieve this. . for (int row = 0; row &lt; totalRow; row++) { for (int column = 0; column &lt; totalColumn; column++) { System.out.println(&quot;arrayEx[row][column]&quot;); } } . Complete song . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public void doctor(int num) { String doctorMsg[] = {&quot;.-.&quot;, &quot;===(_)== No more monkeys jumping on the bed!&quot;, &quot;// 6 6 /&quot;, &quot;( 7 )&quot;, &quot; &#39;--&#39; /&quot;, &quot; _ ._/&quot;, &quot;__) (__&quot;}; System.out.println(doctorMsg[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); MonkeyLoop doctorText = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); System.out.println(&quot;One fell off and bumped his head.&quot;); System.out.println(&quot;εミ(×。×)ο&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); for (int i = 0; i &lt; 7; i++){ doctorText.doctor(i); } System.out.println(&quot;&quot;); } System.out.println(&quot;oof&quot;); } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ oof .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/14/w4_2D_Array.html",
            "relUrl": "/java/2022/09/14/w4_2D_Array.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post94": {
            "title": "AP CSA 2022 and 2016 FRQ",
            "content": "2022 #1a . First attempt: . public int getScore() { Level goal = new Level(); Level points = new Level(); int pointTotal = 0; if (goal.goalReached()) { pointTotal = points.getPoints(); } } . I got stuck at the point above, so I looked at part of the answers. Here is my attempt afterwards: . What the code does: . A variable pointTotal is created that records the amount of points that the player earns. Since the points from level 2 and level 3 are earned only if the previous level is completed, I created if loops within the if loop. . After the points from the levels are totaled, the code then tests the ifBonus method. This is a boolean if statement where if ifBonus is true, the total score would triple. . public int getScore() { int pointTotal = 0; if (levelOne.goalReached()) { pointTotal += levelOne.getPoints(); if (levelTwo.goalReached()) { pointTotal += levelTwo.getPoints(); if (levelThree.goalReached()) { pointTotal += levelThree.getPoints(); } } } if (isBonus()) { pointTotal *= 3; } return pointTotal; } . Questions: . Why are objects not defined to call goalReached and getPoints? | . After some researching, I learned from this video that if methods are in the same class (isBonus and getScore are in the same class), an object does not need to be created to call the method. . #1b . public int playManyTimes(int num) { int scores[]; int maxScore = 0; for (int i = 0; i &lt; num; i++) { play(); scores[i] = getScore(); } for (int i = 0; i &lt; num; i++) { if (scores[i] &gt; maxScore) { maxScore = scores[i]; } } return maxScore; } . An array wasn&#39;t needed. All you had to do was compare the scores within the for loop like this: . public int playManyTimes(int num) { int maxScore = 0; int score = 0; for (int i = 0; i &lt; num; i++) { play(); score = getScore(); if (score &gt; maxScore) { maxScore = score; } } return maxScore; } . . 2016 #1a . Initial thoughts: . When I first read the question, I did not know where to start, so I looked at part of the answers to guide me on what to learn. . Looking at this, . . I was confused as to what List&lt;String&gt; was, so I googled it. . I learned that List&lt;String&gt; is used to make an object that can store the array list. For instance, List&lt;String&gt; list = new ArrayList&lt;String&gt;(); . I also saw how an array list can also be created with ArrayList&lt;String&gt;. The difference between ArrayList&lt;String&gt; and List&lt;String&gt; is that with List&lt;String&gt;, you can typecast the array list into a different type of list; however, you can&#39;t do that with ArrayList&lt;String&gt;. . The code below is what I got started with before I became stuck again. . public class RandomStringChooser { private List&lt;String&gt; words; public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); } } . Once again not knowing how to proceed, I took a look at the answers and came upon this: . . Because I had no idea what the syntax meant, I hopped onto Google and did some searching. . So, for (String singleWord : wordArray) is an example of a for-each loop. A for-each loop allows you to loop through the elements in an array list. . Below is a simple example of a for-each loop: . public class ForEachDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); for (String i : fruits) { System.out.println(i); } } } ForEachDemo.main(null); . apple pineapple mango . This essentially creates is the same as using a regular for loop, and printing out each index in the array list using .get. .get returns the element specified in the index number. . public class GetDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); // same as: // for (String i : fruits) { // System.out.println(i); // } for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } GetDemo.main(null); . apple pineapple mango . The code below is my continued attempt at answering 1a, after learning about the for-each loop. . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { return words.remove((int)(Math.random() * words.size())); } } } . This was close, but I forgot that NONE should be the output once all of the elements in the array list have been used. The correct answer is: . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { // forgot to write an if statement if (words.size() &gt; 0) { return words.remove((int)(Math.random() * words.size())); } return &quot;NONE&quot;; } } } . Concluding thoughts . This question was hard mainly because I had no idea what an array list was prior to doing this question. Although I looked at the answer key a few times, I researched all of the code that I did not understand to help me learn what an array list was, how to create it, and how to use iteration with array lists. . . 1b . Explanation: . If I&#39;m understanding correctly, when the object letterChooser is created, the RandomLetterChooser constructor will run. Since we want to create an array of strings, we would use the super keyword to call the getSingleLetters method, which will split the word into an array of strings. Then, System.out.print(letterChooser.getNext()); is ran, which will call the superclass&#39;s constructor and then run the getNext method. This will randomly output the characters. . The code below matched the answer key. . However, one thing that I wondered as I was examining the answer was, why was there no super() in RandomLetterChooser, which would call the superclass (RandomStringChooser). The answer, after some googling, told me that even if you don&#39;t type super(), the superclass will still implicitly be called. . public RandomLetterChooser(String str) { super(getSingleLetters(str)); } .",
            "url": "https://lwu1822.github.io/fastpages/ap_test_prep/2022/09/14/w4_2016_2022CSAFRQ.html",
            "relUrl": "/ap_test_prep/2022/09/14/w4_2016_2022CSAFRQ.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post95": {
            "title": "Create Performance Task",
            "content": "Notes . I watched this video and this to learn more about the requirements for the create task. . Some notes that I took down for future reference: . The code can be written in any programming language that satisfies the requirements. . | Requirements include having: input, list that manages complexity, procedure with algorithm, a call to the procedure, and output . | A video demonstrating the code will also be required. Within the video, you will need to show at least one input and output and the program&#39;s function. . | . Speaking of functions, there is a difference between the word &quot;function&quot; and &quot;purpose&quot;: . Purpose: The problem that is being solved/something that you pursue for a creative interest . | Function: How the program acts when you run it . | . While we&#39;re at it, some other vocab that I was unfamiliar with 1: . Procedure: Same thing as function . | Algorithm: Code that performs a specific action . | . . Anyways, back to the notes: . In addition to the code and a video, you will also need to submit a written response. A written response consists of four parts, questions 3a-3d. . | 3a. You will be writing about the program&#39;s purpose. Why did you create this program? You will also be documenting the program&#39;s function. Remember: Function and purpose are two different things! . | 3b. How does your list manage complexity? . | 3c. What does your procedure do, and make sure to talk about your algorithm. . | 3d. Testing! Make two different test scenarios for your code. . | . . Plagiarism . Obviously, plagiarism is a serious thing, so don&#39;t do it. However, there are some tiny things that you may have to pay attention to while creating your program to ensure that you don&#39;t get caught for plagiarizing. . Anything that is not your own code - this includes libraries - must be cited . | If you are using pictures or music that is not yours, cite that too . | . . Citing doesn&#39;t have to be anything fancy, just note that you used someone else&#39;s work somewhere in your code. . Ideas . I&#39;m still thinking of some ideas for my create task. The one that I&#39;m most inclined to creating is a schedule/planner. . A record of how this project would fulfill the create task requirements: . Input: User input would be typing into a text box of their tasks for the day. User will also specify a certain amount of hours that they have to work that day. . | List: The user input of assignments will be stored into a list that contains all of the tasks. . | Procedure and algorithm: Most likely to calculate the amount of time each task should be spent on . | Output: Output will be a calculation of how long each task should be spent on for the day. Output may also give certain times to do the task. . | . . A few other notes: . The program will most likely start by equally dividing the total time amongst all activities. By entering more input, the user is able to change how many hours they want to spend on a task based on the task&#39;s priority. | . Plans for AP MCQ . Each week, I&#39;ll blog about what I learned that&#39;s related to the APCSP test prep. . | I can add vocab on the vocab page (on my blog). This can serve for to record of what I learned and also a future reference for me to study. . | . 1. Paraphrased from CollegeBoard↩&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://lwu1822.github.io/fastpages/create-performance-task/2022/09/11/createTaskLog.html",
            "relUrl": "/create-performance-task/2022/09/11/createTaskLog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post96": {
            "title": "Thoughts from the video",
            "content": "Problem: . Many students are so stressed from academics that it is hard to also to have some time to just relax and have fun. . | It becomes hard to focus on so many opportunities that surround us . | Depression, anxiety, stress, etc. . | . Solution (how to feel less stressed): . Positive psychology: What is the secret to be happy? . | Behavior change: How we form habits and create choices? How do we change our behavior to become better? | How we become happier over time | . How to become happier . Take time to feel gratitude | Socialize | Be mindful | Exercise | Sleep | . 10 insights . We can control our happiness | Things in life don’t matter as much as we think | It takes effort to be happy | Repetition, repetition, repetition . Your mind is lying to you about what it means to be happy | Ex: The assumption that more money makes you happier. -&gt; The more money you have, the more likely you’ll want more. . Socialize | Help others | Be grateful | Jot down what you are grateful for. . Exercise, sleep sleep sleep sleep sleep | Pay attention to what you’re doing, focus on the small, happy things in life | Be wealthy in time, not necessarily in money | Gratitude: School: I’m grateful for all of my friends in school. They help make going to school everyday fun and something to look forward to. I know that if I ever need help, I can count on them, and for that, I am thankful. . Home: I’m thankful to my parents for supporting me, especially when at times, high school is hard and makes me more stressed (haha, like what this whole blog post is aimed to resolve). I’d like to give a special shoutout to my mom, because even though sometimes I can get a little frustrated, I know she wants the best for me and I really appreciate all of what she has done for me. . Additional things I’m grateful for: . My AWS deployment worked!! Only minor issue was I forgot to type sudo for one of the commands, and it took me half an hour to find out (˚ ˃̣̣̥⌓˂̣̣̥ ) | The fantastic shrimp and mooncake I just ate | Reading on a rainy day | Walking outside to relax | The small things in life :) | . . Goals: . Think about what I am grateful for more often | Practice some of the insights noted above when I feel stressed | Sleep at least eight hours everyday | Maintain a work life balance | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/09/09/w3-video.html",
            "relUrl": "/misc/2022/09/09/w3-video.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post97": {
            "title": "App Lab Plan",
            "content": "Here is the link to my app. . Subject . Since I’m in AP Stats, I decided to create a statistics quiz. . Questions . What is the mean of the following set of numbers: 5, 8, 9, 15, 16? | Normal distribution picture: What percent of data lies between one standard deviation of the mean? | A class of 30 students were surveyed on how many hours they sleep. The average was 7 hours with a standard deviation of 1.5 hours. What percentage of students sleep less than 8 hours? | Initial planning with partner . Shreyas and I planned out a general format for how we would make our individual apps. . We planned out four stages to make the app: design, brainstorm, implementation, and finishing. . We both created quizzes with three questions. Some of the code that we planned on excessive use was the onEvent function, which allowed an action to happen, such as switching the screen, given that something has occured, such as the click of a button. . Design . My app consists of six screens: Homepage, questions 1-3, end screen, and a finish screen. . Below are some pictures of what the initial design looked like: . . . After the initial design, I made a few revisions, namely changing the font, adding buttons (originally, the user had to click the screen), and adding radio buttons for the multiple choice selection. . An intermediate photo where I added a button: . . One of my screens on the final design: . . Coding . My code is relatively simple. A majority of the code used the onEvent function. I used the function for two purposes, the first was to change the screen when the Next button was pressed, and the second was to increase the score if the correct multiple choice was selected. . . Something else I made additionally was the use of a list that recorded if the user answered each individual question correctly. At the end of the quiz, the person would be able to receive feedback on what they answered correctly and anything that they could improve on, if needed. . I accomplished this by creating a list with the name of questionRight. The index of the array corresponded to the question, so if the user answered correctly on the first question, questionRight[0] would have a value of 1. At the end of the quiz, the questions that had a value of 1 would have a congratulations message, and the questions that had a value of 0 (incorrect) would have an explanation on how to arrive at the correct answer. . Explanations of code . This is a screenshot of part of my code. The rest of my code followed basically the same format. If you wish to check out my code, you can do so here. . . Here’s how the code works: . The first block of code is an onEvent function, in which when the next button (q1ButtonNext) was pressed, the app screen will change to the next question (q2Screen). . The second block of code is another onEvent function. This time though, when choice B is selected (q1ButtonB), a predefined variable score will increase by 1. . . Now I’ll give an overview on the use of a list in my app. First, I created a list called questionRight that contains three elements, each with the value 0. . . Later on in the code, if the user selects the correct answer choice for the button, the value of the element would become 1. . . At the end of the code, I used an if-else statement to decide which feedback message to show. If the element of the index is 0, the feedback for the wrong answer would be show; otherwise, the feedback, for the correct message would show. . . I could use individual variables in the code, but I used a list partially in preparation for the AP CSP Create Task. I think using a list would help in that if the quiz had more questions, using a list would be more organized than creating an individual variable for each question. . Things I learned . The code I encountered in AppLab was new to me. I used the documentation 1 very frequently. . I had to learn most of the things I coded. The most important code that I learned was the onEvent function. You can use it to specify an action to do when a certain event occurs, such as the press of a button. . Documentation 1 and 2 &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/09/08/w3-app-lab-plan.html",
            "relUrl": "/code.org/2022/09/08/w3-app-lab-plan.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post98": {
            "title": "If-Else Lesson",
            "content": "If . if is a conditional statement. It tests &quot;if the condition is true, then run the code within the if statement&quot; . The if statement syntax is like this: . if (condition) { // code } . Types of conditions: . a &lt; b | a &lt;= b | a &gt; b | a &gt;= b | a == b | a != b | true | false | . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to the current weather (rainy) // if the weather is rainy, remind the user to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . . If-else . The syntax for if-else statements are as follows: . if (condition) { // run this if condition is true } else { // run this if condition is false } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; // assign variable weather to sunny // if weather is rainy, remind to bring an umbrella // otherwise, no need to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else { System.out.println(&quot;No need for an umbrella!&quot;); } } } IfElseLesson.main(null) . No need for an umbrella! . . Else-if . else-if statements are written like this: . if (condition) { // run if condition is true } else if (condition 2) { // run if condition is false and condition 2 is true } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to rainy // if weather is rainy, remind to bring an umbrella // if weather is sunny, remind to bring a hat if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . Setting variable weather to sunny: . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring a hat! . . Putting It All Together . #1 . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;cloudy&quot;; // assign variable weather to cloudy // because it is cloudy, print that the weather is nice if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } else { System.out.println(&quot;Nice weather outside!&quot;); } } } IfElseLesson.main(null) . Nice weather outside! . #2 . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input if (questionNum == 100) { // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); // if answer is correct, add 100 points to score System.out.println(answer); if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below } else if (questionNum == 200) { System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } } else if (questionNum == 300) { System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } } else if (questionNum == 400) { System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } } else if (questionNum == 500) { System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . Switch case statements . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input switch (questionNum) { case 100: // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); // if answer is correct, add 100 points to score if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below case 200: System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } case 300: System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } case 400: System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } case 500: System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions (this is important, remember this for later). . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; 1 . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; 2 . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Now how is this useful? . Remember this? . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) 3 . 1. Reference↩ . 2. Reference↩ . 3. Reference↩ . Example in Coding . because what would De Morgan&#39;s law be if it&#39;s not applicable to coding? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . More examples: . This code reads: If it&#39;s not sunny and it&#39;s not cloudy and it&#39;s not snowy and it&#39;s not windy, then bring an umbrella. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!sunny &amp;&amp; !cloudy &amp;&amp; !snowy &amp;&amp; !windy) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . This code is kind of messy, huh? . How about this code? . This code reads: If it&#39;s not sunny or cloudy or snowy or windy, then bring an umbrella. . Better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!(sunny || cloudy || snowy || windy)) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . . A more complicated example... . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // huh??? if (!(!nopineappOnPizza &amp;&amp; !pineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! . Is this better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // if no pineapple on pizza or yes pineapple on pizza... // since there is a pineapple on pizza, then pineapple on pizza is good if ((pineappOnPizza || nopineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/07/w3-if-else.html",
            "relUrl": "/java/2022/09/07/w3-if-else.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post99": {
            "title": "Console Menu",
            "content": "The following is a console that incorporates our group&#39;s calculators. . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;2 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;3 - Vidhi&#39;s Print a Random Number&quot;); System.out.println(&quot;4 - Modulus Calculator&quot;); System.out.println(&quot;5 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); break; case 2: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 3: Scanner input5; System.out.println(&quot;This option will print a random number from 0 to 1&quot;); double random = (double) (Math.random()); System.out.println(random); break; case 4: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 5: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Lily&#39;s Average Calculator 2 - Vidhi and Riya&#39;s Temp Convertor 3 - Vidhi&#39;s Print a Random Number 4 - Modulus Calculator 5 - William&#39;s F=ma calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Lily Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 22.0 degree Celsius is equal to 295.0 in Kelvin 3: This option will print a random number from 0 to 1 0.2392119484083327 4: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 5: F=ma calculator Enter the mass: 5.0 Enter the accel: 2.0 Force calculator 5.0*2.0=10.0 0: Goodbye, World! . My menu . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Average Calculator&quot;); System.out.println(&quot;2 - Z Score Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; if (selection == 0) { System.out.print(&quot;Goodbye, World!&quot;); quit = true; } else if (selection == 1) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); } else if (selection == 2) { double x = 0; double avg = 0; double standardDeviation = 0; double z = 0; Scanner sc2 = new Scanner(System.in); System.out.println(&quot;Enter x: &quot;); x = sc2.nextDouble(); System.out.println(x); System.out.println(&quot;Enter avg: &quot;); avg = sc2.nextDouble(); System.out.println(avg); System.out.println(&quot;Enter standard deviation: &quot;); standardDeviation = sc2.nextDouble(); System.out.println(standardDeviation); z = (x-avg)/standardDeviation; System.out.println(&quot;Your z score is: &quot; + z); } else { //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Average Calculator 2 - Z Score Calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: Enter x: 10.0 Enter avg: 5.0 Enter standard deviation: 2.0 Your z score is: 2.5 0: Goodbye, World! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/05/w2-menu.html",
            "relUrl": "/java/2022/09/05/w2-menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post100": {
            "title": "Dictionary",
            "content": "Variables belong to a certain data type. Examples that we have seen before include: int, string, and bool. . Lists and dictionaries are also types. . Explanation of what the code does: . I first added three entries into the dictionary. Keys include FirstName, LastName, and some others that I created, such as Hobbies and Sports played. . I used a for loop to print the records from the dictionary. The for loop ranges from 0 to the length of the dictionary, in this example, 2. I then printed each record by printing the index of the dictionary (InfoDb[i]), starting from 0, then 1 and finally 2. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . For loop without index . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for record in InfoDb: print_data(record) for_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . While loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Recursive loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Reverse database . How the code works . This mainly used my code above. What I changed was using the reversed function for the for loop, which would print InfoDb[2], then InfoDb[1], and finally InfoDb[0]. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop_reverse(): for i in reversed(range(len(InfoDb))): record = InfoDb[i] print_data(record) return for_loop_reverse() . John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none . Add your own record to the database . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) print(&quot;Enter your info below!&quot;) firstName = input(&quot;First name?&quot;) print(&quot;First name? &quot; + firstName) lastName = input(&quot;Last name?&quot;) print(&quot;Last name? &quot; + lastName) bday = input(&quot;Birthday?&quot;) print(&quot;Birthday? &quot; + bday) book = input(&quot;Favorite books?&quot;) print(&quot;Favorite books? &quot; + book) food = input(&quot;Favorite foods?&quot;) print(&quot;Favorite foods? &quot; + food) hobby = input(&quot;Hobbies?&quot;) print(&quot;Hobbies? &quot; + hobby) sport = input(&quot;Sports played?&quot;) print(&quot;Sports played&quot; + sport) InfoDb.append({ &quot;FirstName&quot;: firstName, &quot;LastName&quot;: lastName, &quot;DOB&quot;: bday, &quot;Favorite books&quot;: [book], &quot;Favorite food&quot;: food, &quot;Hobbies&quot;: [hobby], &quot;Sports played&quot;: [sport] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Enter your info below! First name? Lily&#39;s Last name? Clone Birthday? July 24 Favorite books? lol Favorite foods? Rice Hobbies? Programming Sports playedNone Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Lily&#39;s Clone Birthday 🥳: July 24 Favorite books: lol Favorite food: Rice Hobbies: Programming Sports played: None . Learning . The purpose of lists and dictionaries are to collect information. . Add to dictionaries with .append(). . Dictionaries consist of key/value pairs. For example, &quot;FirstName&quot; is a key, while &quot;Lily&quot; is a value. . Application Programming Interface: Also known as API, it is the process in which data is shared between programs. Lists and dictionaries are the first step to learning about databases. . Code that I learned . d_rec: Stands for dictionary record. You can use it to call the specific information in the dictionary. . For example, print(d_rec[&quot;FirstName&quot;]) would print the specific value in the dictionary of the FirstName key. .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w2-dictionary.html",
            "relUrl": "/python/2022/09/05/w2-dictionary.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post101": {
            "title": "Python Quiz",
            "content": "Explanation of code . I imported the getpass and sys library. The quiz first recognizes the user&#39;s username and path to the Python interpreter. . The quiz then asks a few questions and answers, which are included in a list. Using the for loop, I can use recursion to iterate through each index in the list. . import getpass,sys print(&quot;Welcome &quot; + getpass.getuser() + &quot;. Your Python interpreter is currently running on the path: &quot; + sys.executable) questions = [&quot;What is the name for code that does not change every time you run the program?&quot;, &quot;What is the Python command that allows user input?&quot;, &quot;What do you use to combine different data types within the print statement?&quot;, &quot;def foo(bar): What is bar also known as?&quot;, &quot;What comparison operator do you use in Python to test if two values are equal to each other?&quot;, &quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answers = [&quot;static text&quot;, &quot;input&quot;, &quot;concatenation&quot;, &quot;parameter&quot;, &quot;==&quot;, &quot;import&quot;, &quot;if&quot;, &quot;expression&quot;] questionNum = len(questions) score = 0 for i in range(questionNum): print(questions[i]) # This is solely so that the user can see the questions in the Jupyter Notebook output response = input(questions[i]) print(&quot;Answer: &quot; + response) # Again, to show the output if response == answers[i]: print(&quot;Correct!&quot;) score += 1 else: print(&quot;Incorrect! The correct answer is: &quot; + answers[i]) print(&quot;Your total score is: &quot; + str(score) + &quot; out of &quot; + str(questionNum)) . Welcome lwu1822. Your Python interpreter is currently running on the path: /home/lwu1822/anaconda3/bin/python What is the name for code that does not change every time you run the program? Answer: static text Correct! What is the Python command that allows user input? Answer: input Correct! What do you use to combine different data types within the print statement? Answer: ? Incorrect! The correct answer is: concatenation def foo(bar): What is bar also known as? Answer: parameter Correct! What comparison operator do you use in Python to test if two values are equal to each other? Answer: == Correct! What command is used to include other functions that were previously developed? Answer: import Correct! What command is used to evaluate correct or incorrect response in this example? Answer: if Correct! Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Answer: ? Incorrect! The correct answer is: expression Your total score is: 6 out of 8 . How the rest of this post will be structured . This post captures my learnings from this page. . I will first document my learnings, and then display the code and its output below. . . In programming languages, a lot of the things within parenthesis are called parameters. . For example, in the code below, Hello World! would be an argument. . Static text: Text that stays the same. . print(&quot;Hello World!&quot;) . Hello World! . . Input and output . This is known as dynamic, versus static. Dynamic means that a variable can change each time you run the code. For example, each time you run the code, the input could change. . In Python code, the things specified in parenthesis are known as parameters. For example, in the code below, usr_input is a parameter. . usr_input = input(&quot;Enter some text: &quot;) print(usr_input) . hi :) . . Function . Note: Indentation matters in Python . When creating a function, make sure to indent to tell Python which lines of code belong within the function (since Python does not use curly braces to delineate functions). . Functions are created with the def keyword. . def addNum(a, b): return int(a) + int(b) num1 = input(&quot;Enter 1st number: &quot;) print(&quot;Enter 1st number: &quot; + num1) num2 = input(&quot;Enter 2nd number: &quot;) print(&quot;Enter 2nd number: &quot; + num2) total = addNum(num1, num2) print(&quot;Your total is: &quot; + str(total)) . Enter 1st number: 1 Enter 2nd number: 2 Your total is: 3 . . Libraries . Libraries can be imported with the - you guessed it - import function. . Examples of libraries include getpass and sys. . import getpass import sys print(&quot;You are: &quot; + getpass.getuser()) print(&quot;Your Python interpreter is running at the file path: &quot; + sys.executable) passwd = getpass.getpass(prompt=&#39;Enter the password. Hint: what language does this program run in? &#39;) print(&quot;Enter the password. Hint: what language does this program run in? &quot;) print(passwd) if passwd == &quot;python&quot;: print(&quot;Welcome! &quot; + getpass.getuser()) else: print(&quot;Incorrect!&quot;) . You are: lwu1822 Your Python interpreter is running at the file path: /home/lwu1822/anaconda3/bin/python Enter the password. Hint: what language does this program run in? python Welcome! lwu1822 .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w1-python-quiz.html",
            "relUrl": "/python/2022/09/05/w1-python-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post102": {
            "title": "HTML and CSS",
            "content": "I changed the theme from minima to minimal . . Overall, the minimal theme looked pretty similar to the minima theme. However, there were some problems with the new theme. . For some reason, when my window is maximized, the contents on the webpage are displayed incorrectly. . . But when I shrink my window, the contents are fine. . . I’m not sure why that is the case. Maybe if I have time, I’ll look into it. . . I reverted the theme back to minima. However, I wanted to change the background to something cool, maybe like a gradient. I used Vunsh’s blog as a starting point and used his dark mode .scss file (thanks!). Then, I changed the background color to a gradient using the linear-gradient command within the html, body, input, textarea, select, button block. . That’s pretty much all I changed. Looking at the .scss file, there were many parts of the code that I didn’t understand. By commenting and uncommenting each block of code, I was able to learn what they did. Here are my comments on some of the code. . . Some thoughts . I like the new theme, but I think there’s some things that I could change. . For instance, I don’t really like the font colors for the code here: . . However, this class isn’t mainly focused around CSS, so I’ll probably change the font colors only if I have time. . Table . Alright, I’m going to be honest. This took me hours to figure out, mainly because I had errors in my Liquid syntax because I forgot to include a space ╥﹏╥. . This is the page where I created my table and linked my weekly assignments. . I started off with a for loop using the {% for i in ([start num]..[end num]) %} template, where i is the week number. I then created each row in the table starting with the week number by printing {{i}}. I also used if statements ({% if i == # %}) and printed the links to my pages depending on the value of i. So if i == 0, I would print the links to Week 0, etc. .",
            "url": "https://lwu1822.github.io/fastpages/html/2022/09/05/2_html-css.html",
            "relUrl": "/html/2022/09/05/2_html-css.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post103": {
            "title": "Jekyll and Liquid",
            "content": "this took me hours to research btw . While I was setting up my fastpages blog, I noticed this interesting line of code in index.html. . . And I thought, hey, this is interesting, what does {{site.baseurl}} do? . After some googling, I found that {{site.baseurl}} wasn’t something in Markdown. Turns out it’s actually Jekyll syntax. . So what does {{site.baseurl}} do? . Basically, baseurl is the directory under the URL of the website. 1 So for example, this blog’s URL is lwu1822.github.io, and the baseurl is fastpages. . So I can just do ![]({{site.baseurl}}/images/diagram.png). Saves a lot of typing. . Pretty cool, huh? 😊 . . Something else I encountered while making this post . To type {{site.baseurl}} in this Markdown file, apparently you have to use the {% raw %} and {% endraw %} template around {{site.baseurl}} . 2 . Like this: . {% raw %} {{site.baseurl}} {% endraw %} . . Also something I encountered just as I was writing the line above . Notice how I was able to write {% endraw %} above? Unfortunately, it’s not that simple to just type it directly into your IDE, like this: . :warning: Warning: Don’t do this, it will break your code: . {% raw %} {% endraw %} {% endraw %} . The reason is because the first {% endraw %} will be interpreted as ending the {% raw %} template. . So if you want to be able to type {% endraw %} in Markdown, you need to do the following 3: . Create a variable, in this example, I’ll name it openTag, and assign it to {%: . {% assign openTag = &#39;{%&#39; %} . | Use the {{ openTag }} variable anytime you want to type text that contains {% in it. . For example, to type the text {% endraw %}, you would do: . {{ openTag }} endraw %} . | . Even more something that I learned . Apparently, you also can’t type {% directly in the IDE, which would also break your code (took me a long time to debug （ꐦ𝅒_𝅒）) . Instead, you have to type: {{ openTag }} . . Things for me to contemplate on: . I noticed on the provided Fastpages Notebook Blog Post, you can add an image without the baseurl. For example, you can specify an image with ![](images/diagram.png). Not sure why that works, but I’m guessing it has something to with Jupyter Notebooks. . . baseurl &#8617; . | Liquid template language &#8617; . | I took the steps from here but quite frankly, I found the explanation a little confusing, so I simplified it as much as I could in this blog &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "relUrl": "/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post104": {
            "title": "Alumni Panel",
            "content": "Takeaways . From today’s alumni panel event, I learned about the significance and prevalence of computer science. The skills learned in AP CSA and AP CSP are very applicable and can be used to solve real world problems. However, programmers face many difficulties in their coding career. For instance, Colin described about the constant error messages that are bound to show up while coding, which can leave a negative effect and greatly decrease motivation. One thing that really struck out to me, however, was the importance of google. Basically, any programming question you have can be solved by this very magical tool. Furthermore, PBLs not only occur in this class, but can also be found in colleges. For instance, Colin mentioned that in UCSD’s mechanical engineering, students will be tasked with a hands on project in their freshmen and senior year. The same methodologies still apply - scrum team and agile. Furthermore, not only is coding applied in CS majors, it is also used in other majors. For instance, Allison mentioned that stats majors are also required to program in R. A really cool example of where you could apply your coding knowledge was scripting. If you’re ever frustrated at repeating the same redundant tasks over and over again, hey- maybe try some automation :). Last but not least, a very important part of the event was the discussion of internships. Some tips that were brought up was to build a resume and to create some personal projects that demonstrate your passion for coding. Additionally, interaction with professors and TAs are a good idea to find research and programming opportunities. . . Notes that I took during the event . Challenge with compsci: . Error msg -&gt; keep motivation? | GOOGLE | Ego: People brag about internship Focus on own path | Work on own project | . | Learn computer theory in college (it’s different from high school programming) | Motivation: There’s always someone better than you | Don’t cut corner: Have a mindset to go above and beyond | Getting started There is no rigid structure telling you what to do | Don’t get restricted by your plan - be flexible | . | . Any PBL scenario in college? . UCSD mechanical engineering: 1 hands on project freshman and senior year Need to use scrum and agile flow | . | Study in group and work with other people | Learn what’s the best method to study | . Have you applied CS in your major if your major is not CS? . Convert data type, copy paste, manually -&gt; write script!! ;) | Matlab for mechanical student | Problem solving logic, working with Matlab | Jupyter notebook for technical paper | Stats majors: Program in R | . Existing college students, have you had a job with school/professor . Make a resume, talk with other students, find a way to stand out, what makes you unique? | Interact with a professor, ask if they have space in their labs | Interact with TAs | . Job/internships . Code Ninjas | Northrop Grumman | . Personal projects? . Companies look for personal projects | Have 2 or 3? | Visual projects are great | . Internships: . Have a resume | Know when to apply to internships, companies hire in September + November the year before the next summer | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post105": {
            "title": "Java Primitives",
            "content": "public class AvgCalculator{ public static void main(String[] args) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); } } AvgCalculator.main(null) . Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Mean: 3.0 . What I learned . Primitives include: int, double, boolean . String is not a primitive. . Code: Integer: int a . Double: double a . Boolean: boolean a . String: String a . To enable input, make sure to import the Scanner lirbary: import java.util.Scanner; . . Useful stuff learned while creating calculator: . if and while statements: . If the variable is an integer/double, you can use == . If the variable is a string, you must use .equals . Example: &quot;foo&quot;.equals(variableName) . . Playing with Code from Primitive Data Types . Variables . public class test { public static void main(String[] args) { int x = 5; System.out.println(&quot;This is an integer: &quot; + x); } } test.main(null) . This is an integer: 5 . Input + Output . import java.util.Scanner; public class Scanning { public static void main(String[] args) { Scanner test = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int input = test.nextInt(); System.out.println(input); System.out.println(&quot;Your number is: &quot; + input); } } Scanning.main(null); . Enter a number: 3 Your number is: 3 .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post106": {
            "title": "Code snippets",
            "content": "Collapsible Note: do not tab in HTML unless you want whitespace Also very important: Make sure to put an extra line after ``, otherwise, Markdown will not show. [Reference](https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab) &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/28/good-code-snippets.html",
            "relUrl": "/misc/2022/08/28/good-code-snippets.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post107": {
            "title": "code.org Notes",
            "content": "Lesson 2 . Class header: . public class ClassName { } . Main method: . public static void main(String[] args) { } . Lesson 3 . Create an object with: ClassName objectName = new ClassName(); . Lesson 6 . Subclass: Inherits the behaviors and attributes of a superclass . Inheritance: The subclass inherits the behaviors and attributes of the superclass . To extend a class, type: public class [subclass] extends [superclass] . Inside the extended class, you need to create the constructor signature for the subclass, and type super() to call the superclass constructor and methods. . Like this: . public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Lesoon 7 Methods . Methods are defined with: . public void [methodName]() { // code } . These can be later called with an object. . For example, in Lesson 7 #2, I created a method called turnRight(). This is then called by with myPainterPlus.turnRight(); . . . Lesson 9 Loops . While loops: while (condition()) {} . Lesson 10 Conditionals . If statements: if (condition()) {} . If else statements: . if (condition()) { // code } else { // code } . To specify something not happening, use !. . Ex: if (!condition()) {} // if condition is false, proceed with if statement . Lesson 12 Decomposition and Design . Important: Code readability is very important. Also, a method should contain few lines of code (around 1-10). Each method should only be used to perform one task. .",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org.html",
            "relUrl": "/code.org/2022/08/28/code-org.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post108": {
            "title": "code.org Answers",
            "content": "Lesson 2 . 2.1 . EXCEPTION error. No .java files are provided. Probably due to wrong file name. | No, wrong file name. | Yes, Java files must have the .java extension. | There is an error. The p in myPainter.move(); must be capitalized. | Yes, code is case-sensitive. | 2.2 . error: reached end of file while parsing | Need another } to finish code. . Yes, each opening curly brace needs a closing curly brace. | error: not a statement and error: &#39;;&#39; expected, meaning the command syntax is wrong. | Correct syntax: mypainter.move(); . See #3 | Yes, the error is fixed. | 3.1 . Painter starts at top left grid and faces east. | Stops at row 2 column 3, faces south. | Painter moves forward but does not paint because he has ran out. | Error because did not add () at Painter; | Added () |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org-answer.html",
            "relUrl": "/code.org/2022/08/28/code-org-answer.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post109": {
            "title": "APEL Notes",
            "content": "APEL . There are three areas of writing that APEL focuses on: rhetorical analysis, synthesis, and argumentative. . In Tri 1, we are learning rhetorical analysis. . Rhetorical analysis . Thesis . According to Collegeboard’s rubric, the thesis can be located anywhere within your essay. However, it is suggested to write your thesis somewhere in the intro paragraph, preferably as the last sentence. . The thesis must consist of two parts: a purpose verb and the author’s message .",
            "url": "https://lwu1822.github.io/fastpages/apel/2022/08/28/apel.html",
            "relUrl": "/apel/2022/08/28/apel.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post110": {
            "title": "Tools",
            "content": "Basic commands . ls: Lists the contents in the current directory . cd [file path]: Move to a directory . pwd: List your current directory . echo &quot;Moving to home directory with the cd command&quot; cd echo &quot;What directory am I in?&quot; pwd echo &quot;Moving to my vscode directory&quot; cd /home/lwu1822/vscode echo &quot;What directory am I in?&quot; pwd echo &quot;What files are within this directory?&quot; ls . Moving to home directory with the cd command What directory am I in? /home/lwu1822 Moving to my vscode directory What directory am I in? /home/lwu1822/vscode What files are within this directory? APCSA APCSP fastpages spring_portfolio test . Variables . To create variables, simply assign a value to a variable name. . Ex: x=5 . Reference variables with $[var] . text=&quot;Hello World!&quot; echo &quot;$text&quot; . Hello World! . Note: Single and double quotes are different! . See example below . text=&quot;Hello World!&quot; echo &quot;$text&quot; echo &#39;$text&#39; . Hello World! $text . Python versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Java versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Playing with some Regex . echo &quot;Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39;&quot; # What this bash script does: # Checks if there is output after grep (searching) for packages starting # with &#39;j&#39; and ending with &#39;s&#39; # First lists all conda packages, then filters to only show the package # names (excludes Version and Build Channel) with the cut command # The grep command uses some fun Regex # ^ means that the character following it (in parenthesis) must start at the # beginning # .*: &quot;.&quot;&quot; means any character, &quot;*&quot; means match the character before it # any number of times -&gt; &quot;.*&quot; means match any character any number of times # $: Character before it (s) must be at the end if conda list | cut -d &quot; &quot; -f 1 | grep &quot;^j.*s$&quot; ; then : else echo &quot;No packages starting with &#39;j&#39; and ending with &#39;s&#39;&quot; fi . Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39; jupyterlab_pygments jupyterlab_widgets . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/lwu1822/.local/share/jupyter/kernels/bash java /home/lwu1822/.local/share/jupyter/kernels/java javascript /home/lwu1822/.local/share/jupyter/kernels/javascript python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . Conda check for Jupyter . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . (I have checked Slack :)) . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$check&quot; fi . python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . . Hacks . To verify tools: . For many packages, you can type the name of the package and then --version, or you can grep from the dpkg -l list . java --version dpkg -l | cut -d &quot; &quot; -f 3 | grep -E &quot;^(java)&quot; . Python 3.9.12 java-common . To verify Conda, you can use the conda list command. I&#39;m not going to do this here because the output is huge, but you can see above where I used regex and grep to search for the specific things I want . main_dir=vscode/ fastpages_dir=fastpages/ cd cd $main_dir/$fastpages_dir ls # git pull origin master . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word .",
            "url": "https://lwu1822.github.io/fastpages/bash/2022/08/26/tools.html",
            "relUrl": "/bash/2022/08/26/tools.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post111": {
            "title": "LaTeX",
            "content": "LaTeX . Fastpages also supports LaTeX! So cool! . This is said to be the most beautiful math equation: . Ready? . Woah $e^{i pi} + 1 = 0$",
            "url": "https://lwu1822.github.io/fastpages/latex/2022/08/25/latex.html",
            "relUrl": "/latex/2022/08/25/latex.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post112": {
            "title": "Jupyter notebook post",
            "content": "Intro . Hi! This post will just be me playing around and explaining how to use Jupyter notebook in VSCode. I don&#39;t know about you, but VSCode&#39;s documentation is super long and wordy, so I&#39;ll try to use simple English and incorporate some humor within :) . This page will also include some tips and tricks that I found while using Jupyter Notebook, or some things that I struggled with. . Information on this page will also based on the descriptions on this page . What is Jupyter Notebook?? . For the long and wordy explanations that pop up when you google: Jupyter Notebook . Jupyter Notebook is an environment that allows you to create cells that can contain various types of code, including Python and Markdown. . Now, you might be wondering, why do I need this? . Well, there&#39;s a few reasons: . Jupyter Notebook is interactive. It allows you to move your program around. | What if you want to test a portion of your code? Instead of running the entire thing, you could use Jupyter Notebook to run code snippets. | . . Below is some testing of using Jupyter Notebook. I will add explanations of what these do later. . woah hidden input . print(&quot;peekaboo&quot;) . . peekaboo .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/08/21/jupyter-notebook-1.html",
            "relUrl": "/jupyter/2022/08/21/jupyter-notebook-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post113": {
            "title": "Python",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/python.html",
            "relUrl": "/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post114": {
            "title": "Java",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloStatic.main(null); . Hello World! .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/java.html",
            "relUrl": "/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post115": {
            "title": "First post",
            "content": "Post #1 . This is a test for my first post. . Hi and welcome :) . Check out my About Me to learn more about me. . This is also a test in blue font. . Why does Comic Sans get so much hate :( .",
            "url": "https://lwu1822.github.io/fastpages/markdown/2022/08/19/post-1.html",
            "relUrl": "/markdown/2022/08/19/post-1.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post116": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post117": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi, and welcome to my blog! . My name is Lily Wu. I’m a junior at Del Norte High School. . My interests are in STEM, including programming, cybersecurity, and math. . I’m passionate about learning, and I love to play around and explore code. . I don’t know if this is a good thing, but I have a bad habit of falling down a rabbit hole as I look up what each code syntax does specifically. . I have some experience in C++, and am currently learning Python and Java. . Contacts: . Email: lwu1822@gmail.com . Github . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lwu1822.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Vocab . Agile . Agile helps teams work on a project through working towards a plan (usually 2 week sprints), and various methods to work together, such as stand up meetings and pair programming. . Typical roles in a team might include: scrum master, DevOps, frontend and backend developer. . Ways to help a team plan: . Issues | Scrum board | . What are some things necessary of a successful team? . Creativity | Critical thinking | Communication | Collaboration through leadership | Collaboration (teamwork) | Research | Technical | . Primitives . Primitives: Includes the data types of int, double, and boolean. . Note: String is not a primitive . Basic code: . Data types: . int [var], double [var], boolean [var], and String [var] . Input: . Scanner [var] = new Scanner(System.in); : Create a scanner object with a name of [var], set it equal to System.in, which is what the user inputs on the keyboard. .",
          "url": "https://lwu1822.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Weekly Work",
          "content": "Week Assignments . 0 | First post Java PythonJupyter Notebook | . 1 | Bash: Check if tools are installed Learnings from code.org Java Primitives | . 2 | Console Menu | . 3 | Iteration MinilabFocus/Habits | .",
          "url": "https://lwu1822.github.io/fastpages/weekly-work/",
          "relUrl": "/weekly-work/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board . Unit 1: Primitive Types . Exam Weighting: 2.5%-5% . Primitives | . Unit 2: Using Objects . Exam Weighting: 5%-7.5% . Unit 3: Boolean Expressions and if Statements . Exam Weighting: 15%-17.55% . Unit 4: Iteration . Exam Weighting: 17.5%-22.5% . Unit 5: Writing Classes . Exam Weighting: 5%-7.5% . Unit 6: Array . Exam Weighting: 10%-15% . Unit 7: ArrayList . Exam Weighting: 2.5%-7.5% . Unit 8: 2D Array . Exam Weighting: 7.5%-10% . Unit 9: Inheritance . Exam Weighting: 5%-10% . Unit 10: Recursion . Exam Weighting: 5%-7.5% .",
          "url": "https://lwu1822.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  

  
      ,"page8": {
          "title": "",
          "content": "AP CSA . Project Based Learning (PBL) . Final Project: Crimebusters . Crime safety quiz . Frontend code using HTML and JavaScript to fetch a quiz API from Spring backend. . PBL Notes . API . Using an API on Backend . Using an API on backend with Spring Boot, and displaying it in a frontend HTML file. Notes on Thymeleaf template engine syntax. . Spring Boot . How Spring Boot works . JavaScript . JavaScript . Misc . Applying arrays to change images . Using arrays and ImageIO to make an ASCII, grayscale, redscale, bluescale, and greenscale Mona Lisa art. . Creating a table with JavaScript . AP Curriculum . Test Prep . 2022 and 2016 FRQ . Unit 1: Primitive Types . Calculator . Homework and Notes . Unit 2: Using Objects . Homework (2021 FRQ) . Unit 3: Boolean Expressions and if Statements . Notes . Unit 4: Iteration . Notes . Homework . Unit 5: Writing Classes . Homework . Unit 6: Array . Homework (Work In Progress) . Unit 7: ArrayList . Notes . Unit 8: 2D Array . 2D Arrays with Monkey Song . Using 2D Arrays to print out the monkey song . code.org Notes . Notes .",
          "url": "https://lwu1822.github.io/fastpages/organization/APCSA",
          "relUrl": "/organization/APCSA",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "AP CSP . Project Based Learning (PBL) . Final Project: Dictionary . Feedback Page . Frontend code using HTML and JavaScript to fetch a feedback API from Spring backend. For people who use our dictionary project to leave some feedback. . Final Project Planning . Plan . APIs . JavaScript Fetch API . Using JavaScript Fetch API to take a definition of a word from a dictionary API. . Python API using Jupyter Notebook . Working with a Python API using Jupyter Notebook. . PBL Notes . JavaScript . Fetch API . JavaScript . Python . Dictionary . Input and Output . AP Curriculum . Create Performance . Planning . AppLab . Planning and project description . Big Idea 1: Creative Development . 1.1 Notes . 1.2 Notes . 1.3 Notes . Debugging Code . Learning how to debug code. . Big Idea 4: Computer Systems and Networks . 4.1 Notes .",
          "url": "https://lwu1822.github.io/fastpages/organization/APCSP",
          "relUrl": "/organization/APCSP",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "CSA",
          "content": "Sep 14, 2022 Iteration with 2D array . | Sep 14, 2022 AP CSA 2022 and 2016 FRQ . | Sep 7, 2022 If-Else Lesson . | Sep 5, 2022 Console Menu . | Aug 28, 2022 Java Primitives . | Aug 28, 2022 Code snippets . | Aug 28, 2022 code.org Notes . | Aug 28, 2022 code.org Answers . | Aug 26, 2022 Tools . | Aug 21, 2022 Jupyter notebook post . | .",
          "url": "https://lwu1822.github.io/fastpages/t/CSA",
          "relUrl": "/t/CSA",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "CSP",
          "content": "Submenu | JavaScript | JavaScript Table | API | .",
          "url": "https://lwu1822.github.io/fastpages/CSP/",
          "relUrl": "/CSP/",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "",
          "content": "Additional Coding . How I made my background a gradient . Jekyll and Liquid . My research and exploration of the Jekyll site generator and Liquid template language . Bash . LaTeX .",
          "url": "https://lwu1822.github.io/fastpages/organization/additionalCoding",
          "relUrl": "/organization/additionalCoding",
          "date": ""
      }
      
  

  

  
      ,"page14": {
          "title": "",
          "content": "Life . Career . Alumni Panel . Talks from Del Norte High School’s alumni about programming as a career. . Life . Psychology and the Good Life video . Thoughts from the Psychology and the Good Life video by Laurie Santos, Professor of Psychology at Yale .",
          "url": "https://lwu1822.github.io/fastpages/organization/life",
          "relUrl": "/organization/life",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  

  

  

  
  

  
      ,"page28": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lwu1822.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}