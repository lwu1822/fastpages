{
  
    
        "post0": {
            "title": "Fibonacci",
            "content": "For loop . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = for loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://lwu1822.github.io/fastpages/2022/09/24/w5_fibonacci.html",
            "relUrl": "/2022/09/24/w5_fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "1.1 Collaboration",
            "content": "foo . College Board Big Ideas Learning Objectives: . CRD-1.A Explain how computing innovations are improved through collaboration. . CRD-1.B Explain how computing innovations are developed by groups of people . CRD-1.C Demonstrate effective interpersonal skills during collaboration. . Essential knowledge: . CRD-1.A.1 A computing innovation includes a program as an integral part of its function. . CRD-1.A.2 A computing innovation can be physical (e.g., self-driving car), nonphysical computing software (e.g., picture editing software), or a nonphysical computing concept (e.g., e-commerce) . CRD-1.A.3 Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. . CRD-1.A.4 Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. . CRD-1.A.5 Consultation and communication with users are important aspects of the development of computing innovations. . CRD-1.A.6 Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives. . CRD-1.B.1 Online tools support collaboration by allowing programmers to share and provide feedback on ideas and documents. . CRD-1.B.2 Common models such as pair programming exist to facilitate collaboration. . CRD-1.C.1 Effective collaborative teams practice interpersonal skills, including but not limited to: . communication | consensus building | conflict resolution | negotiation | . Collaboration allows people who specialize in different areas to work together to reach an end product. It can involve the combination of the diverse ideas of many people. Skills that are developed through collaboration include: communication, consensus building, conflict resolution, and negotiation. . Computing innovation: A physical or nonphysical program. Examples include VSCode (nonphysical) or a self driving car (physical). . Collaboration can take place in many formats. Examples include: pair programming (one as driver, one as navigator), think-pair-share (students think through a problem alone, discuss in pairs, then share with class). . Online tools for collaboration: . repl.it | Github | Shared document/folder | . Comments in code also help with communication to yourself and others reading your code. . . I also completed the 1.1 MCQ. Below is a picture showing my completion. . . .",
            "url": "https://lwu1822.github.io/fastpages/cb/2022/09/17/w4_CB_1-1.html",
            "relUrl": "/cb/2022/09/17/w4_CB_1-1.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "AP FRQ",
            "content": "2022 #1a . First attempt: . public int getScore() { Level goal = new Level(); Level points = new Level(); int pointTotal = 0; if (goal.goalReached()) { pointTotal = points.getPoints(); } } . I got stuck at the point above, so I looked at part of the answers. Here is my attempt afterwards: . What the code does: . A variable pointTotal is created that records the amount of points that the player earns. Since the points from level 2 and level 3 are earned only if the previous level is completed, I created if loops within the if loop. . After the points from the levels are totaled, the code then tests the ifBonus method. This is a boolean if statement where if ifBonus is true, the total score would triple. . public int getScore() { int pointTotal = 0; if (levelOne.goalReached()) { pointTotal += levelOne.getPoints(); if (levelTwo.goalReached()) { pointTotal += levelTwo.getPoints(); if (levelThree.goalReached()) { pointTotal += levelThree.getPoints(); } } } if (isBonus()) { pointTotal *= 3; } return pointTotal; } . Questions: . Why are objects not defined to call goalReached and getPoints? | . After some researching, I learned from this video that if methods are in the same class (isBonus and getScore are in the same class), an object does not need to be created to call the method. . #1b . public int playManyTimes(int num) { int scores[]; int maxScore = 0; for (int i = 0; i &lt; num; i++) { play(); scores[i] = getScore(); } for (int i = 0; i &lt; num; i++) { if (scores[i] &gt; maxScore) { maxScore = scores[i]; } } return maxScore; } . An array wasn&#39;t needed. All you had to do was compare the scores within the for loop like this: . public int playManyTimes(int num) { int maxScore = 0; int score = 0; for (int i = 0; i &lt; num; i++) { play(); score = getScore(); if (score &gt; maxScore) { maxScore = score; } } return maxScore; } . . 2016 #1a . Initial thoughts: . When I first read the question, I did not know where to start, so I looked at part of the answers to guide me on what to learn. . Looking at this, . . I was confused as to what List&lt;String&gt; was, so I googled it. . I learned that List&lt;String&gt; is used to make an object that can store the array list. For instance, List&lt;String&gt; list = new ArrayList&lt;String&gt;(); . I also saw how an array list can also be created with ArrayList&lt;String&gt;. The difference between ArrayList&lt;String&gt; and List&lt;String&gt; is that with List&lt;String&gt;, you can typecast the array list into a different type of list; however, you can&#39;t do that with ArrayList&lt;String&gt;. . The code below is what I got started with before I became stuck again. . public class RandomStringChooser { private List&lt;String&gt; words; public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); } } . Once again not knowing how to proceed, I took a look at the answers and came upon this: . . Because I had no idea what the syntax meant, I hopped onto Google and did some searching. . So, for (String singleWord : wordArray) is an example of a for-each loop. A for-each loop allows you to loop through the elements in an array list. . Below is a simple example of a for-each loop: . public class ForEachDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); for (String i : fruits) { System.out.println(i); } } } ForEachDemo.main(null); . apple pineapple mango . This essentially creates is the same as using a regular for loop, and printing out each index in the array list using .get. .get returns the element specified in the index number. . public class GetDemo { public static void main(String[] args) { List&lt;String&gt; fruits = new ArrayList&lt;String&gt;(Arrays.asList(&quot;apple&quot;, &quot;pineapple&quot;, &quot;mango&quot;)); // same as: // for (String i : fruits) { // System.out.println(i); // } for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } GetDemo.main(null); . apple pineapple mango . The code below is my continued attempt at answering 1a, after learning about the for-each loop. . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { return words.remove((int)(Math.random() * words.size())); } } } . This was close, but I forgot that NONE should be the output once all of the elements in the array list have been used. The correct answer is: . public class RandomStringChooser { private List&lt;String&gt; words; // creating an object words public RandomStringChooser(String[] wordArray) { words = new ArrayList&lt;String&gt;(); // assigning words to a new array list for (String singleWord : wordArray) { // add all of the elements in wordArray to words words.add(singleWord); } public String getNext() { // forgot to write an if statement if (words.size() &gt; 0) { return words.remove((int)(Math.random() * words.size())); } return &quot;NONE&quot;; } } } . Concluding thoughts . This question was hard mainly because I had no idea what an array list was prior to doing this question. Although I looked at the answer key a few times, I researched all of the code that I did not understand to help me learn what an array list was, how to create it, and how to use iteration with array lists. . . 1b . Explanation: . If I&#39;m understanding correctly, when the object letterChooser is created, the RandomLetterChooser constructor will run. Since we want to create an array of strings, we would use the super keyword to call the getSingleLetters method, which will split the word into an array of strings. Then, System.out.print(letterChooser.getNext()); is ran, which will call the superclass&#39;s constructor and then run the getNext method. This will randomly output the characters. . The code below matched the answer key. . However, one thing that I wondered as I was examining the answer was, why was there no super() in RandomLetterChooser, which would call the superclass (RandomStringChooser). The answer, after some googling, told me that even if you don&#39;t type super(), the superclass will still implicitly be called. . public RandomLetterChooser(String str) { super(getSingleLetters(str)); } .",
            "url": "https://lwu1822.github.io/fastpages/ap_test_prep/2022/09/14/w4_FRQ.html",
            "relUrl": "/ap_test_prep/2022/09/14/w4_FRQ.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Iteration with 2D array",
            "content": "The following code outputs the monkeys horizontally in an imperative programming style. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts // PREVENT NEW LINE FROM POPPING UP //System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . With objects . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); } } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ . How to access arrays? . If you want to access individual elements within an array, you can access them with arrayName[row index][column index]. . What if I want to print all of the contents in an array? . We can use a for loop to achieve this. . for (int row = 0; row &lt; totalRow; row++) { for (int column = 0; column &lt; totalColumn; column++) { System.out.println(&quot;arrayEx[row][column]&quot;); } } . Complete song . public class MonkeyLoop { public MonkeyLoop() { // nothing } public void printHead(int num) { String monkeyHead[] = {&quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; (◕‿◕✿)&quot;}; System.out.print(monkeyHead[num]); } public void printNeck(int num) { String monkeyNeck[] = {&quot; _⏄_/ &quot;, &quot; _⎏_/ &quot;, &quot; _⎐_/ &quot;, &quot; _⍾_/ &quot;, &quot; _⍾_/ &quot;}; System.out.print(monkeyNeck[num]); } public void printBody(int num) { String monkeyBody[] = {&quot; --0-- &quot;, &quot; ++1++ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; ==3== &quot;, &quot; ==4== &quot;}; System.out.print(monkeyBody[num]); } public void printLegs(int num) { String monkeyLegs[] = {&quot; ⎛ ⎞ &quot;, &quot; ⌋ ⌊ &quot;, &quot; 〈 〉 &quot;, &quot; _/ _ &quot;, &quot; _/ _ &quot;}; System.out.print(monkeyLegs[num]); } public void doctor(int num) { String doctorMsg[] = {&quot;.-.&quot;, &quot;===(_)== No more monkeys jumping on the bed!&quot;, &quot;// 6 6 /&quot;, &quot;( 7 )&quot;, &quot; &#39;--&#39; /&quot;, &quot; _ ._/&quot;, &quot;__) (__&quot;}; System.out.println(doctorMsg[num]); } public static void main(String[] args) { MonkeyLoop monkeyPrint = new MonkeyLoop(); MonkeyLoop doctorText = new MonkeyLoop(); for (int verse = 5; verse &gt; 0; verse--) { System.out.println(verse + &quot; little monkeys jumping on the bed.&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printHead(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printNeck(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printBody(i); } System.out.println(&quot;&quot;); for (int i = 0; i &lt; verse; i++) { monkeyPrint.printLegs(i); } System.out.println(&quot;&quot;); System.out.println(&quot;One fell off and bumped his head.&quot;); System.out.println(&quot;εミ(×。×)ο&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); for (int i = 0; i &lt; 7; i++){ doctorText.doctor(i); } System.out.println(&quot;&quot;); } System.out.println(&quot;oof&quot;); } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 4 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 3 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 2 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ 1 little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ One fell off and bumped his head. εミ(×。×)ο Mama called the doctor and the doctor said .-. ===(_)== No more monkeys jumping on the bed! // 6 6 / ( 7 ) &#39;--&#39; / _ ._/ __) (__ oof .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/14/w4_2D_Array.html",
            "relUrl": "/java/2022/09/14/w4_2D_Array.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Create Performance Task",
            "content": "Notes . I watched this video and this to learn more about the requirements for the create task. . Some notes that I took down for future reference: . The code can be written in any programming language that satisfies the requirements. . | Requirements include having: input, list that manages complexity, procedure with algorithm, a call to the procedure, and output . | A video demonstrating the code will also be required. Within the video, you will need to show at least one input and output and the program&#39;s function. . | . Speaking of functions, there is a difference between the word &quot;function&quot; and &quot;purpose&quot;: . Purpose: The problem that is being solved/something that you pursue for a creative interest . | Function: How the program acts when you run it . | . While we&#39;re at it, some other vocab that I was unfamiliar with 1: . Procedure: Same thing as function . | Algorithm: Code that performs a specific action . | . . Anyways, back to the notes: . In addition to the code and a video, you will also need to submit a written response. A written response consists of four parts, questions 3a-3d. . | 3a. You will be writing about the program&#39;s purpose. Why did you create this program? You will also be documenting the program&#39;s function. Remember: Function and purpose are two different things! . | 3b. How does your list manage complexity? . | 3c. What does your procedure do, and make sure to talk about your algorithm. . | 3d. Testing! Make two different test scenarios for your code. . | . . Plagiarism . Obviously, plagiarism is a serious thing, so don&#39;t do it. However, there are some tiny things that you may have to pay attention to while creating your program to ensure that you don&#39;t get caught for plagiarizing. . Anything that is not your own code - this includes libraries - must be cited . | If you are using pictures or music that is not yours, cite that too . | . . Citing doesn&#39;t have to be anything fancy, just note that you used someone else&#39;s work somewhere in your code. . Ideas . I&#39;m still thinking of some ideas for my create task. The one that I&#39;m most inclined to creating is a schedule/planner. . A record of how this project would fulfill the create task requirements: . Input: User input would be typing into a text box of their tasks for the day. User will also specify a certain amount of hours that they have to work that day. . | List: The user input of assignments will be stored into a list that contains all of the tasks. . | Procedure and algorithm: Most likely to calculate the amount of time each task should be spent on . | Output: Output will be a calculation of how long each task should be spent on for the day. Output may also give certain times to do the task. . | . . A few other notes: . The program will most likely start by equally dividing the total time amongst all activities. By entering more input, the user is able to change how many hours they want to spend on a task based on the task&#39;s priority. | . Plans for AP MCQ . Each week, I&#39;ll blog about what I learned that&#39;s related to the APCSP test prep. . | I can add vocab on the vocab page (on my blog). This can serve for to record of what I learned and also a future reference for me to study. . | . 1. Paraphrased from CollegeBoard↩&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://lwu1822.github.io/fastpages/create-performance-task/2022/09/11/createTaskLog.html",
            "relUrl": "/create-performance-task/2022/09/11/createTaskLog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Thoughts from the video",
            "content": "Problem: . Many students are so stressed from academics that it is hard to also to have some time to just relax and have fun. . | It becomes hard to focus on so many opportunities that surround us . | Depression, anxiety, stress, etc. . | . Solution (how to feel less stressed): . Positive psychology: What is the secret to be happy? . | Behavior change: How we form habits and create choices? How do we change our behavior to become better? | How we become happier over time | . How to become happier . Take time to feel gratitude | Socialize | Be mindful | Exercise | Sleep | . 10 insights . We can control our happiness | Things in life don’t matter as much as we think | It takes effort to be happy | Repetition, repetition, repetition . Your mind is lying to you about what it means to be happy | Ex: The assumption that more money makes you happier. -&gt; The more money you have, the more likely you’ll want more. . Socialize | Help others | Be grateful | Jot down what you are grateful for. . Exercise, sleep sleep sleep sleep sleep | Pay attention to what you’re doing, focus on the small, happy things in life | Be wealthy in time, not necessarily in money | Gratitude: School: I’m grateful for all of my friends in school. They help make going to school everyday fun and something to look forward to. I know that if I ever need help, I can count on them, and for that, I am thankful. . Home: I’m thankful to my parents for supporting me, especially when at times, high school is hard and makes me more stressed (haha, like what this whole blog post is aimed to resolve). I’d like to give a special shoutout to my mom, because even though sometimes I can get a little frustrated, I know she wants the best for me and I really appreciate all of what she has done for me. . Additional things I’m grateful for: . My AWS deployment worked!! Only minor issue was I forgot to type sudo for one of the commands, and it took me half an hour to find out (˚ ˃̣̣̥⌓˂̣̣̥ ) | The fantastic shrimp and mooncake I just ate | Reading on a rainy day | Walking outside to relax | The small things in life :) | . . Goals: . Think about what I am grateful for more often | Practice some of the insights noted above when I feel stressed | Sleep at least eight hours everyday | Maintain a work life balance | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/09/09/w3-video.html",
            "relUrl": "/misc/2022/09/09/w3-video.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "App Lab Plan",
            "content": "Here is the link to my app. . Subject . Since I’m in AP Stats, I decided to create a statistics quiz. . Questions . What is the mean of the following set of numbers: 5, 8, 9, 15, 16? | Normal distribution picture: What percent of data lies between one standard deviation of the mean? | A class of 30 students were surveyed on how many hours they sleep. The average was 7 hours with a standard deviation of 1.5 hours. What percentage of students sleep less than 8 hours? | Initial planning with partner . Shreyas and I planned out a general format for how we would make our individual apps. . We planned out four stages to make the app: design, brainstorm, implementation, and finishing. . We both created quizzes with three questions. Some of the code that we planned on excessive use was the onEvent function, which allowed an action to happen, such as switching the screen, given that something has occured, such as the click of a button. . Design . My app consists of six screens: Homepage, questions 1-3, end screen, and a finish screen. . Below are some pictures of what the initial design looked like: . . . After the initial design, I made a few revisions, namely changing the font, adding buttons (originally, the user had to click the screen), and adding radio buttons for the multiple choice selection. . An intermediate photo where I added a button: . . One of my screens on the final design: . . Coding . My code is relatively simple. A majority of the code used the onEvent function. I used the function for two purposes, the first was to change the screen when the Next button was pressed, and the second was to increase the score if the correct multiple choice was selected. . . Something else I made additionally was the use of a list that recorded if the user answered each individual question correctly. At the end of the quiz, the person would be able to receive feedback on what they answered correctly and anything that they could improve on, if needed. . I accomplished this by creating a list with the name of questionRight. The index of the array corresponded to the question, so if the user answered correctly on the first question, questionRight[0] would have a value of 1. At the end of the quiz, the questions that had a value of 1 would have a congratulations message, and the questions that had a value of 0 (incorrect) would have an explanation on how to arrive at the correct answer. . Explanations of code . This is a screenshot of part of my code. The rest of my code followed basically the same format. If you wish to check out my code, you can do so here. . . Here’s how the code works: . The first block of code is an onEvent function, in which when the next button (q1ButtonNext) was pressed, the app screen will change to the next question (q2Screen). . The second block of code is another onEvent function. This time though, when choice B is selected (q1ButtonB), a predefined variable score will increase by 1. . . Now I’ll give an overview on the use of a list in my app. First, I created a list called questionRight that contains three elements, each with the value 0. . . Later on in the code, if the user selects the correct answer choice for the button, the value of the element would become 1. . . At the end of the code, I used an if-else statement to decide which feedback message to show. If the element of the index is 0, the feedback for the wrong answer would be show; otherwise, the feedback, for the correct message would show. . . I could use individual variables in the code, but I used a list partially in preparation for the AP CSP Create Task. I think using a list would help in that if the quiz had more questions, using a list would be more organized than creating an individual variable for each question. . Things I learned . The code I encountered in AppLab was new to me. I used the documentation 1 very frequently. . I had to learn most of the things I coded. The most important code that I learned was the onEvent function. You can use it to specify an action to do when a certain event occurs, such as the press of a button. . Documentation 1 and 2 &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/09/08/w3-app-lab-plan.html",
            "relUrl": "/code.org/2022/09/08/w3-app-lab-plan.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "If-Else Lesson",
            "content": "If . if is a conditional statement. It tests &quot;if the condition is true, then run the code within the if statement&quot; . The if statement syntax is like this: . if (condition) { // code } . Types of conditions: . a &lt; b | a &lt;= b | a &gt; b | a &gt;= b | a == b | a != b | true | false | . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to the current weather (rainy) // if the weather is rainy, remind the user to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . . If-else . The syntax for if-else statements are as follows: . if (condition) { // run this if condition is true } else { // run this if condition is false } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; // assign variable weather to sunny // if weather is rainy, remind to bring an umbrella // otherwise, no need to bring an umbrella if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else { System.out.println(&quot;No need for an umbrella!&quot;); } } } IfElseLesson.main(null) . No need for an umbrella! . . Else-if . else-if statements are written like this: . if (condition) { // run if condition is true } else if (condition 2) { // run if condition is false and condition 2 is true } . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;rainy&quot;; // assign variable weather to rainy // if weather is rainy, remind to bring an umbrella // if weather is sunny, remind to bring a hat if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring an umbrella! . Setting variable weather to sunny: . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;sunny&quot;; if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } } } IfElseLesson.main(null) . Don&#39;t forget to bring a hat! . . Putting It All Together . #1 . public class IfElseLesson{ public static void main(String[] args) { String weather = &quot;cloudy&quot;; // assign variable weather to cloudy // because it is cloudy, print that the weather is nice if (weather == &quot;rainy&quot;) { System.out.println(&quot;Don&#39;t forget to bring an umbrella!&quot;); } else if (weather == &quot;sunny&quot;) { System.out.println(&quot;Don&#39;t forget to bring a hat!&quot;); } else { System.out.println(&quot;Nice weather outside!&quot;); } } } IfElseLesson.main(null) . Nice weather outside! . #2 . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input if (questionNum == 100) { // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); // if answer is correct, add 100 points to score System.out.println(answer); if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below } else if (questionNum == 200) { System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } } else if (questionNum == 300) { System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } } else if (questionNum == 400) { System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } } else if (questionNum == 500) { System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . Switch case statements . import java.util.Scanner; public class Jeopardy{ public static void main(String[] args) { System.out.println(&quot;Welcome to Jeopardy! Choose 100, 200, 300, 400, 500&quot;); int questionNum = 0; // keep track of selecting the 100, 200, 300, 400, or 500 question int score = 0; String answer = &quot;&quot;; Scanner sc = new Scanner(System.in); questionNum = sc.nextInt(); // for questionNum input System.out.println(questionNum); Scanner questionManySpace = new Scanner(System.in); // for answer input switch (questionNum) { case 100: // ask question System.out.println(&quot;What programming language does this code run in? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); // if answer is correct, add 100 points to score if (answer.equals(&quot;java&quot;)) { score += 100; } // the format is the same for all of the answers below case 200: System.out.println(&quot;How do you create a string called &#39;name&#39; and assign it to &#39;Bob&#39; in Java? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;String name = Bob;&quot;)) { score += 200; } case 300: System.out.println(&quot;What is the conditional called to do something if something happens or do something else if something else happens? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;if-else&quot;)) { score += 300; } case 400: System.out.println(&quot;How do you create a scanner object with name scanner? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Scanner scanner = new Scanner(System.in)&quot;)) { score += 400; } case 500: System.out.println(&quot;What backend framework runs on lwu1822.tk? &quot;); answer = questionManySpace.nextLine(); System.out.println(answer); if (answer.equals(&quot;Spring&quot;)) { score += 500; } } System.out.println(&quot;Your total score is: &quot; + score); } } Jeopardy.main(null); . Welcome to Jeopardy! Choose 100, 200, 300, 400, 500 500 What backend framework runs on lwu1822.tk? Spring Your total score is: 500 . . De Morgan&#39;s Law . First, some vocab: . Set: A group of objects | Universal set: A set that has all of the elements | Subsets: Contains elements from the universal set | Complement: For example, if we have set A, the complement of set A would have the elements in the universal set, but not in set A. | Union: New set has elements from both sets . Symbol: ∪ . | Intersection: New sets has elements that are shared between both sets . Symbol: ∩ . | . De Morgan&#39;s Law is used in boolean algebra to help simplify expressions (this is important, remember this for later). . De Morgan&#39;s Law of Union states that: &quot;The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B).&quot; 1 . Formula: (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection states that: &quot;The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;.&quot; 2 . Formula: (A ∩ B)’ = A’ ∪ B’ . . The following is an example: . Universal set: {1, 3, 5, 6, 8, 9} Set A: {1, 3} Set B: {5, 6, 8} . De Morgan&#39;s Law of Union: (A ∪ B)&#39; = {9} . A&#39;∩ B&#39; = {9} . (A ∪ B)&#39; = A&#39;∩ B&#39; . De Morgan&#39;s Law of Intersection: (A ∩ B)&#39; = {1, 3, 5, 6, 8, 9} . A’ ∪ B’ = {1, 3, 5, 6, 8, 9} . (A ∩ B)’ = A’ ∪ B’ . . Now how is this useful? . Remember this? . . Translating De Morgan&#39;s law into code, De Morgan&#39;s Law of Union would mean: !(a || b) = (!a &amp;&amp; !b). . De Morgan&#39;s Law of Intersection means: !(a &amp;&amp; b) = (!a || !b) 3 . 1. Reference↩ . 2. Reference↩ . 3. Reference↩ . Example in Coding . because what would De Morgan&#39;s law be if it&#39;s not applicable to coding? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!!!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || !(!(rainy || sunny))) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . Well this is awfully confusing, how about we clean it up a little? . First, remove all of the !! (negative + negative = positive) . This code reads: If it&#39;s not rainy or sunny, and: it&#39;s not rainy and it&#39;s not sunny OR it&#39;s rainy or sunny . Evaluating each part of the code: . If it&#39;s not rainy or sunny: True | If it&#39;s not rainy and it&#39;s not sunny: True | It&#39;s rainy or sunny: False | 2. and 3. are OR, therefore, it is True. . 1. is ANDed to 2. and 3. which is True. -&gt; True AND True is true, therefore, the message is outputted. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = false; boolean sunny = false; if (!(rainy || sunny) &amp;&amp; ((!rainy &amp;&amp; !sunny) || (rainy || sunny)) ) { System.out.println(&quot;It&#39;s a cloudy day, not too hot, not too cold&quot;); } } } DeMorgansLaw.main(null) . It&#39;s a cloudy day, not too hot, not too cold . More examples: . This code reads: If it&#39;s not sunny and it&#39;s not cloudy and it&#39;s not snowy and it&#39;s not windy, then bring an umbrella. . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!sunny &amp;&amp; !cloudy &amp;&amp; !snowy &amp;&amp; !windy) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . This code is kind of messy, huh? . How about this code? . This code reads: If it&#39;s not sunny or cloudy or snowy or windy, then bring an umbrella. . Better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean rainy = true; boolean sunny = false; boolean cloudy = false; boolean snowy = false; boolean windy = false; if (!(sunny || cloudy || snowy || windy)) { System.out.println(&quot;Bring an umbrella!&quot;); } } } DeMorgansLaw.main(null) . Bring an umbrella! . . A more complicated example... . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // huh??? if (!(!nopineappOnPizza &amp;&amp; !pineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! . Is this better? . public class DeMorgansLaw{ public static void main(String[] args) { boolean pineappOnPizza = true; boolean nopineappOnPizza = false; System.out.println(&quot;Is pineapple on pizza bad?&quot;); // if no pineapple on pizza or yes pineapple on pizza... // since there is a pineapple on pizza, then pineapple on pizza is good if ((pineappOnPizza || nopineappOnPizza)) { System.out.println(&quot;No!&quot;); } } } DeMorgansLaw.main(null) . Is pineapple on pizza bad? No! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/07/w3-if-else.html",
            "relUrl": "/java/2022/09/07/w3-if-else.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Console Menu",
            "content": "The following is a console that incorporates our group&#39;s calculators. . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;2 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;3 - Vidhi&#39;s Print a Random Number&quot;); System.out.println(&quot;4 - Modulus Calculator&quot;); System.out.println(&quot;5 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); break; case 2: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 3: Scanner input5; System.out.println(&quot;This option will print a random number from 0 to 1&quot;); double random = (double) (Math.random()); System.out.println(random); break; case 4: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 5: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Lily&#39;s Average Calculator 2 - Vidhi and Riya&#39;s Temp Convertor 3 - Vidhi&#39;s Print a Random Number 4 - Modulus Calculator 5 - William&#39;s F=ma calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Lily Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 22.0 degree Celsius is equal to 295.0 in Kelvin 3: This option will print a random number from 0 to 1 0.2392119484083327 4: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 5: F=ma calculator Enter the mass: 5.0 Enter the accel: 2.0 Force calculator 5.0*2.0=10.0 0: Goodbye, World! . My menu . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // 2D column location for data // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Average Calculator&quot;); System.out.println(&quot;2 - Z Score Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; if (selection == 0) { System.out.print(&quot;Goodbye, World!&quot;); quit = true; } else if (selection == 1) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; double maxNum = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); maxNum = Math.max(maxNum, numDouble); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); System.out.println(&quot;Max: &quot; + maxNum); } System.out.println(&quot;Mean: &quot; + mean); } else if (selection == 2) { double x = 0; double avg = 0; double standardDeviation = 0; double z = 0; Scanner sc2 = new Scanner(System.in); System.out.println(&quot;Enter x: &quot;); x = sc2.nextDouble(); System.out.println(x); System.out.println(&quot;Enter avg: &quot;); avg = sc2.nextDouble(); System.out.println(avg); System.out.println(&quot;Enter standard deviation: &quot;); standardDeviation = sc2.nextDouble(); System.out.println(standardDeviation); z = (x-avg)/standardDeviation; System.out.println(&quot;Your z score is: &quot; + z); } else { //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Average Calculator 2 - Z Score Calculator 0 - Quit - 1: Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Max: 5.0 Mean: 3.0 2: Enter x: 10.0 Enter avg: 5.0 Enter standard deviation: 2.0 Your z score is: 2.5 0: Goodbye, World! .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/09/05/w2-menu.html",
            "relUrl": "/java/2022/09/05/w2-menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Dictionary",
            "content": "Variables belong to a certain data type. Examples that we have seen before include: int, string, and bool. . Lists and dictionaries are also types. . Explanation of what the code does: . I first added three entries into the dictionary. Keys include FirstName, LastName, and some others that I created, such as Hobbies and Sports played. . I used a for loop to print the records from the dictionary. The for loop ranges from 0 to the length of the dictionary, in this example, 2. I then printed each record by printing the index of the dictionary (InfoDb[i]), starting from 0, then 1 and finally 2. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . For loop without index . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for record in InfoDb: print_data(record) for_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . While loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Recursive loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Reverse database . How the code works . This mainly used my code above. What I changed was using the reversed function for the for loop, which would print InfoDb[2], then InfoDb[1], and finally InfoDb[0]. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop_reverse(): for i in reversed(range(len(InfoDb))): record = InfoDb[i] print_data(record) return for_loop_reverse() . John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none . Add your own record to the database . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) print(&quot;Enter your info below!&quot;) firstName = input(&quot;First name?&quot;) print(&quot;First name? &quot; + firstName) lastName = input(&quot;Last name?&quot;) print(&quot;Last name? &quot; + lastName) bday = input(&quot;Birthday?&quot;) print(&quot;Birthday? &quot; + bday) book = input(&quot;Favorite books?&quot;) print(&quot;Favorite books? &quot; + book) food = input(&quot;Favorite foods?&quot;) print(&quot;Favorite foods? &quot; + food) hobby = input(&quot;Hobbies?&quot;) print(&quot;Hobbies? &quot; + hobby) sport = input(&quot;Sports played?&quot;) print(&quot;Sports played&quot; + sport) InfoDb.append({ &quot;FirstName&quot;: firstName, &quot;LastName&quot;: lastName, &quot;DOB&quot;: bday, &quot;Favorite books&quot;: [book], &quot;Favorite food&quot;: food, &quot;Hobbies&quot;: [hobby], &quot;Sports played&quot;: [sport] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Enter your info below! First name? Lily&#39;s Last name? Clone Birthday? July 24 Favorite books? lol Favorite foods? Rice Hobbies? Programming Sports playedNone Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Lily&#39;s Clone Birthday 🥳: July 24 Favorite books: lol Favorite food: Rice Hobbies: Programming Sports played: None . Learning . The purpose of lists and dictionaries are to collect information. . Add to dictionaries with .append(). . Dictionaries consist of key/value pairs. For example, &quot;FirstName&quot; is a key, while &quot;Lily&quot; is a value. . Application Programming Interface: Also known as API, it is the process in which data is shared between programs. Lists and dictionaries are the first step to learning about databases. . Code that I learned . d_rec: Stands for dictionary record. You can use it to call the specific information in the dictionary. . For example, print(d_rec[&quot;FirstName&quot;]) would print the specific value in the dictionary of the FirstName key. .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w2-dictionary.html",
            "relUrl": "/python/2022/09/05/w2-dictionary.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Quiz",
            "content": "Explanation of code . I imported the getpass and sys library. The quiz first recognizes the user&#39;s username and path to the Python interpreter. . The quiz then asks a few questions and answers, which are included in a list. Using the for loop, I can use recursion to iterate through each index in the list. . import getpass,sys print(&quot;Welcome &quot; + getpass.getuser() + &quot;. Your Python interpreter is currently running on the path: &quot; + sys.executable) questions = [&quot;What is the name for code that does not change every time you run the program?&quot;, &quot;What is the Python command that allows user input?&quot;, &quot;What do you use to combine different data types within the print statement?&quot;, &quot;def foo(bar): What is bar also known as?&quot;, &quot;What comparison operator do you use in Python to test if two values are equal to each other?&quot;, &quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answers = [&quot;static text&quot;, &quot;input&quot;, &quot;concatenation&quot;, &quot;parameter&quot;, &quot;==&quot;, &quot;import&quot;, &quot;if&quot;, &quot;expression&quot;] questionNum = len(questions) score = 0 for i in range(questionNum): print(questions[i]) # This is solely so that the user can see the questions in the Jupyter Notebook output response = input(questions[i]) print(&quot;Answer: &quot; + response) # Again, to show the output if response == answers[i]: print(&quot;Correct!&quot;) score += 1 else: print(&quot;Incorrect! The correct answer is: &quot; + answers[i]) print(&quot;Your total score is: &quot; + str(score) + &quot; out of &quot; + str(questionNum)) . Welcome lwu1822. Your Python interpreter is currently running on the path: /home/lwu1822/anaconda3/bin/python What is the name for code that does not change every time you run the program? Answer: static text Correct! What is the Python command that allows user input? Answer: input Correct! What do you use to combine different data types within the print statement? Answer: ? Incorrect! The correct answer is: concatenation def foo(bar): What is bar also known as? Answer: parameter Correct! What comparison operator do you use in Python to test if two values are equal to each other? Answer: == Correct! What command is used to include other functions that were previously developed? Answer: import Correct! What command is used to evaluate correct or incorrect response in this example? Answer: if Correct! Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Answer: ? Incorrect! The correct answer is: expression Your total score is: 6 out of 8 . How the rest of this post will be structured . This post captures my learnings from this page. . I will first document my learnings, and then display the code and its output below. . . In programming languages, a lot of the things within parenthesis are called parameters. . For example, in the code below, Hello World! would be an argument. . Static text: Text that stays the same. . print(&quot;Hello World!&quot;) . Hello World! . . Input and output . This is known as dynamic, versus static. Dynamic means that a variable can change each time you run the code. For example, each time you run the code, the input could change. . In Python code, the things specified in parenthesis are known as parameters. For example, in the code below, usr_input is a parameter. . usr_input = input(&quot;Enter some text: &quot;) print(usr_input) . hi :) . . Function . Note: Indentation matters in Python . When creating a function, make sure to indent to tell Python which lines of code belong within the function (since Python does not use curly braces to delineate functions). . Functions are created with the def keyword. . def addNum(a, b): return int(a) + int(b) num1 = input(&quot;Enter 1st number: &quot;) print(&quot;Enter 1st number: &quot; + num1) num2 = input(&quot;Enter 2nd number: &quot;) print(&quot;Enter 2nd number: &quot; + num2) total = addNum(num1, num2) print(&quot;Your total is: &quot; + str(total)) . Enter 1st number: 1 Enter 2nd number: 2 Your total is: 3 . . Libraries . Libraries can be imported with the - you guessed it - import function. . Examples of libraries include getpass and sys. . import getpass import sys print(&quot;You are: &quot; + getpass.getuser()) print(&quot;Your Python interpreter is running at the file path: &quot; + sys.executable) passwd = getpass.getpass(prompt=&#39;Enter the password. Hint: what language does this program run in? &#39;) print(&quot;Enter the password. Hint: what language does this program run in? &quot;) print(passwd) if passwd == &quot;python&quot;: print(&quot;Welcome! &quot; + getpass.getuser()) else: print(&quot;Incorrect!&quot;) . You are: lwu1822 Your Python interpreter is running at the file path: /home/lwu1822/anaconda3/bin/python Enter the password. Hint: what language does this program run in? python Welcome! lwu1822 .",
            "url": "https://lwu1822.github.io/fastpages/python/2022/09/05/w1-python-quiz.html",
            "relUrl": "/python/2022/09/05/w1-python-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "HTML and CSS",
            "content": "I changed the theme from minima to minimal . . Overall, the minimal theme looked pretty similar to the minima theme. However, there were some problems with the new theme. . For some reason, when my window is maximized, the contents on the webpage are displayed incorrectly. . . But when I shrink my window, the contents are fine. . . I’m not sure why that is the case. Maybe if I have time, I’ll look into it. . . I reverted the theme back to minima. However, I wanted to change the background to something cool, maybe like a gradient. I used Vunsh’s blog as a starting point and used his dark mode .scss file (thanks!). Then, I changed the background color to a gradient using the linear-gradient command within the html, body, input, textarea, select, button block. . That’s pretty much all I changed. Looking at the .scss file, there were many parts of the code that I didn’t understand. By commenting and uncommenting each block of code, I was able to learn what they did. Here are my comments on some of the code. . . Some thoughts . I like the new theme, but I think there’s some things that I could change. . For instance, I don’t really like the font colors for the code here: . . However, this class isn’t mainly focused around CSS, so I’ll probably change the font colors only if I have time. . Table . Alright, I’m going to be honest. This took me hours to figure out, mainly because I had errors in my Liquid syntax because I forgot to include a space ╥﹏╥. . This is the page where I created my table and linked my weekly assignments. . I started off with a for loop using the {% for i in ([start num]..[end num]) %} template, where i is the week number. I then created each row in the table starting with the week number by printing {{i}}. I also used if statements ({% if i == # %}) and printed the links to my pages depending on the value of i. So if i == 0, I would print the links to Week 0, etc. .",
            "url": "https://lwu1822.github.io/fastpages/html/2022/09/05/2_html-css.html",
            "relUrl": "/html/2022/09/05/2_html-css.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Jekyll and Liquid",
            "content": "this took me hours to research btw . While I was setting up my fastpages blog, I noticed this interesting line of code in index.html. . . And I thought, hey, this is interesting, what does {{site.baseurl}} do? . After some googling, I found that {{site.baseurl}} wasn’t something in Markdown. Turns out it’s actually Jekyll syntax. . So what does {{site.baseurl}} do? . Basically, baseurl is the directory under the URL of the website. 1 So for example, this blog’s URL is lwu1822.github.io, and the baseurl is fastpages. . So I can just do ![]({{site.baseurl}}/images/diagram.png). Saves a lot of typing. . Pretty cool, huh? 😊 . . Something else I encountered while making this post . To type {{site.baseurl}} in this Markdown file, apparently you have to use the {% raw %} and {% endraw %} template around {{site.baseurl}} . 2 . Like this: . {% raw %} {{site.baseurl}} {% endraw %} . . Also something I encountered just as I was writing the line above . Notice how I was able to write {% endraw %} above? Unfortunately, it’s not that simple to just type it directly into your IDE, like this: . :warning: Warning: Don’t do this, it will break your code: . {% raw %} {% endraw %} {% endraw %} . The reason is because the first {% endraw %} will be interpreted as ending the {% raw %} template. . So if you want to be able to type {% endraw %} in Markdown, you need to do the following 3: . Create a variable, in this example, I’ll name it openTag, and assign it to {%: . {% assign openTag = &#39;{%&#39; %} . | Use the {{ openTag }} variable anytime you want to type text that contains {% in it. . For example, to type the text {% endraw %}, you would do: . {{ openTag }} endraw %} . | . Even more something that I learned . Apparently, you also can’t type {% directly in the IDE, which would also break your code (took me a long time to debug （ꐦ𝅒_𝅒）) . Instead, you have to type: {{ openTag }} . . Things for me to contemplate on: . I noticed on the provided Fastpages Notebook Blog Post, you can add an image without the baseurl. For example, you can specify an image with ![](images/diagram.png). Not sure why that works, but I’m guessing it has something to with Jupyter Notebooks. . . baseurl &#8617; . | Liquid template language &#8617; . | I took the steps from here but quite frankly, I found the explanation a little confusing, so I simplified it as much as I could in this blog &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "relUrl": "/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Alumni Panel",
            "content": "Takeaways . From today’s alumni panel event, I learned about the significance and prevalence of computer science. The skills learned in AP CSA and AP CSP are very applicable and can be used to solve real world problems. However, programmers face many difficulties in their coding career. For instance, Colin described about the constant error messages that are bound to show up while coding, which can leave a negative effect and greatly decrease motivation. One thing that really struck out to me, however, was the importance of google. Basically, any programming question you have can be solved by this very magical tool. Furthermore, PBLs not only occur in this class, but can also be found in colleges. For instance, Colin mentioned that in UCSD’s mechanical engineering, students will be tasked with a hands on project in their freshmen and senior year. The same methodologies still apply - scrum team and agile. Furthermore, not only is coding applied in CS majors, it is also used in other majors. For instance, Allison mentioned that stats majors are also required to program in R. A really cool example of where you could apply your coding knowledge was scripting. If you’re ever frustrated at repeating the same redundant tasks over and over again, hey- maybe try some automation :). Last but not least, a very important part of the event was the discussion of internships. Some tips that were brought up was to build a resume and to create some personal projects that demonstrate your passion for coding. Additionally, interaction with professors and TAs are a good idea to find research and programming opportunities. . . Notes that I took during the event . Challenge with compsci: . Error msg -&gt; keep motivation? | GOOGLE | Ego: People brag about internship Focus on own path | Work on own project | . | Learn computer theory in college (it’s different from high school programming) | Motivation: There’s always someone better than you | Don’t cut corner: Have a mindset to go above and beyond | Getting started There is no rigid structure telling you what to do | Don’t get restricted by your plan - be flexible | . | . Any PBL scenario in college? . UCSD mechanical engineering: 1 hands on project freshman and senior year Need to use scrum and agile flow | . | Study in group and work with other people | Learn what’s the best method to study | . Have you applied CS in your major if your major is not CS? . Convert data type, copy paste, manually -&gt; write script!! ;) | Matlab for mechanical student | Problem solving logic, working with Matlab | Jupyter notebook for technical paper | Stats majors: Program in R | . Existing college students, have you had a job with school/professor . Make a resume, talk with other students, find a way to stand out, what makes you unique? | Interact with a professor, ask if they have space in their labs | Interact with TAs | . Job/internships . Code Ninjas | Northrop Grumman | . Personal projects? . Companies look for personal projects | Have 2 or 3? | Visual projects are great | . Internships: . Have a resume | Know when to apply to internships, companies hire in September + November the year before the next summer | .",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Java Primitives",
            "content": "public class AvgCalculator{ public static void main(String[] args) { // numDouble: User&#39;s input is a string, will be changed into a double // Double is used to allow user to input decimal numbers double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); } } AvgCalculator.main(null) . Enter numbers, type &#39;end&#39; to finish Number: 1 Number: 2 Number: 3 Number: 4 Number: 5 Number: end Show detailed info? y/n y Sum: 15.0 Count: 5 Mean: 3.0 . What I learned . Primitives include: int, double, boolean . String is not a primitive. . Code: Integer: int a . Double: double a . Boolean: boolean a . String: String a . To enable input, make sure to import the Scanner lirbary: import java.util.Scanner; . . Useful stuff learned while creating calculator: . if and while statements: . If the variable is an integer/double, you can use == . If the variable is a string, you must use .equals . Example: &quot;foo&quot;.equals(variableName) . . Playing with Code from Primitive Data Types . Variables . public class test { public static void main(String[] args) { int x = 5; System.out.println(&quot;This is an integer: &quot; + x); } } test.main(null) . This is an integer: 5 . Input + Output . import java.util.Scanner; public class Scanning { public static void main(String[] args) { Scanner test = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int input = test.nextInt(); System.out.println(input); System.out.println(&quot;Your number is: &quot; + input); } } Scanning.main(null); . Enter a number: 3 Your number is: 3 .",
            "url": "https://lwu1822.github.io/fastpages/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Code snippets",
            "content": "Collapsible Note: do not tab in HTML unless you want whitespace Also very important: Make sure to put an extra line after ``, otherwise, Markdown will not show. [Reference](https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab) &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;",
            "url": "https://lwu1822.github.io/fastpages/misc/2022/08/28/good-code-snippets.html",
            "relUrl": "/misc/2022/08/28/good-code-snippets.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "code.org Notes",
            "content": "Lesson 2 . Class header: . public class ClassName { } . Main method: . public static void main(String[] args) { } . Lesson 3 . Create an object with: ClassName objectName = new ClassName(); . Lesson 6 . Subclass: Inherits the behaviors and attributes of a superclass . Inheritance: The subclass inherits the behaviors and attributes of the superclass . To extend a class, type: public class [subclass] extends [superclass] . Inside the extended class, you need to create the constructor signature for the subclass, and type super() to call the superclass constructor and methods. . Like this: . public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Lesoon 7 Methods . Methods are defined with: . public void [methodName]() { // code } . These can be later called with an object. . For example, in Lesson 7 #2, I created a method called turnRight(). This is then called by with myPainterPlus.turnRight(); . . . Lesson 9 Loops . While loops: while (condition()) {} . Lesson 10 Conditionals . If statements: if (condition()) {} . If else statements: . if (condition()) { // code } else { // code } . To specify something not happening, use !. . Ex: if (!condition()) {} // if condition is false, proceed with if statement . Lesson 12 Decomposition and Design . Important: Code readability is very important. Also, a method should contain few lines of code (around 1-10). Each method should only be used to perform one task. .",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org.html",
            "relUrl": "/code.org/2022/08/28/code-org.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "code.org Answers",
            "content": "Lesson 2 . 2.1 . EXCEPTION error. No .java files are provided. Probably due to wrong file name. | No, wrong file name. | Yes, Java files must have the .java extension. | There is an error. The p in myPainter.move(); must be capitalized. | Yes, code is case-sensitive. | 2.2 . error: reached end of file while parsing | Need another } to finish code. . Yes, each opening curly brace needs a closing curly brace. | error: not a statement and error: &#39;;&#39; expected, meaning the command syntax is wrong. | Correct syntax: mypainter.move(); . See #3 | Yes, the error is fixed. | 3.1 . Painter starts at top left grid and faces east. | Stops at row 2 column 3, faces south. | Painter moves forward but does not paint because he has ran out. | Error because did not add () at Painter; | Added () |",
            "url": "https://lwu1822.github.io/fastpages/code.org/2022/08/28/code-org-answer.html",
            "relUrl": "/code.org/2022/08/28/code-org-answer.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "APEL Notes",
            "content": "APEL . There are three areas of writing that APEL focuses on: rhetorical analysis, synthesis, and argumentative. . In Tri 1, we are learning rhetorical analysis. . Rhetorical analysis . Thesis . According to Collegeboard’s rubric, the thesis can be located anywhere within your essay. However, it is suggested to write your thesis somewhere in the intro paragraph, preferably as the last sentence. . The thesis must consist of two parts: a purpose verb and the author’s message .",
            "url": "https://lwu1822.github.io/fastpages/apel/2022/08/28/apel.html",
            "relUrl": "/apel/2022/08/28/apel.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Tools",
            "content": "Basic commands . ls: Lists the contents in the current directory . cd [file path]: Move to a directory . pwd: List your current directory . echo &quot;Moving to home directory with the cd command&quot; cd echo &quot;What directory am I in?&quot; pwd echo &quot;Moving to my vscode directory&quot; cd /home/lwu1822/vscode echo &quot;What directory am I in?&quot; pwd echo &quot;What files are within this directory?&quot; ls . Moving to home directory with the cd command What directory am I in? /home/lwu1822 Moving to my vscode directory What directory am I in? /home/lwu1822/vscode What files are within this directory? APCSA APCSP fastpages spring_portfolio test . Variables . To create variables, simply assign a value to a variable name. . Ex: x=5 . Reference variables with $[var] . text=&quot;Hello World!&quot; echo &quot;$text&quot; . Hello World! . Note: Single and double quotes are different! . See example below . text=&quot;Hello World!&quot; echo &quot;$text&quot; echo &#39;$text&#39; . Hello World! $text . Python versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Java versions . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . Playing with some Regex . echo &quot;Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39;&quot; # What this bash script does: # Checks if there is output after grep (searching) for packages starting # with &#39;j&#39; and ending with &#39;s&#39; # First lists all conda packages, then filters to only show the package # names (excludes Version and Build Channel) with the cut command # The grep command uses some fun Regex # ^ means that the character following it (in parenthesis) must start at the # beginning # .*: &quot;.&quot;&quot; means any character, &quot;*&quot; means match the character before it # any number of times -&gt; &quot;.*&quot; means match any character any number of times # $: Character before it (s) must be at the end if conda list | cut -d &quot; &quot; -f 1 | grep &quot;^j.*s$&quot; ; then : else echo &quot;No packages starting with &#39;j&#39; and ending with &#39;s&#39;&quot; fi . Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39; jupyterlab_pygments jupyterlab_widgets . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/lwu1822/.local/share/jupyter/kernels/bash java /home/lwu1822/.local/share/jupyter/kernels/java javascript /home/lwu1822/.local/share/jupyter/kernels/javascript python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . Conda check for Jupyter . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . (I have checked Slack :)) . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$check&quot; fi . python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . . Hacks . To verify tools: . For many packages, you can type the name of the package and then --version, or you can grep from the dpkg -l list . java --version dpkg -l | cut -d &quot; &quot; -f 3 | grep -E &quot;^(java)&quot; . Python 3.9.12 java-common . To verify Conda, you can use the conda list command. I&#39;m not going to do this here because the output is huge, but you can see above where I used regex and grep to search for the specific things I want . main_dir=vscode/ fastpages_dir=fastpages/ cd cd $main_dir/$fastpages_dir ls # git pull origin master . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word .",
            "url": "https://lwu1822.github.io/fastpages/bash/2022/08/26/tools.html",
            "relUrl": "/bash/2022/08/26/tools.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "LaTeX",
            "content": "LaTeX . Fastpages also supports LaTeX! So cool! . This is said to be the most beautiful math equation: . Ready? . Woah $e^{i pi} + 1 = 0$",
            "url": "https://lwu1822.github.io/fastpages/latex/2022/08/25/latex.html",
            "relUrl": "/latex/2022/08/25/latex.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Jupyter notebook post",
            "content": "Intro . Hi! This post will just be me playing around and explaining how to use Jupyter notebook in VSCode. I don&#39;t know about you, but VSCode&#39;s documentation is super long and wordy, so I&#39;ll try to use simple English and incorporate some humor within :) . This page will also include some tips and tricks that I found while using Jupyter Notebook, or some things that I struggled with. . Information on this page will also based on the descriptions on this page . What is Jupyter Notebook?? . For the long and wordy explanations that pop up when you google: Jupyter Notebook . Jupyter Notebook is an environment that allows you to create cells that can contain various types of code, including Python and Markdown. . Now, you might be wondering, why do I need this? . Well, there&#39;s a few reasons: . Jupyter Notebook is interactive. It allows you to move your program around. | What if you want to test a portion of your code? Instead of running the entire thing, you could use Jupyter Notebook to run code snippets. | . . Below is some testing of using Jupyter Notebook. I will add explanations of what these do later. . woah hidden input . print(&quot;peekaboo&quot;) . . peekaboo .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2022/08/21/jupyter-notebook-1.html",
            "relUrl": "/jupyter/2022/08/21/jupyter-notebook-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Python",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/python.html",
            "relUrl": "/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Java",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloStatic.main(null); . Hello World! .",
            "url": "https://lwu1822.github.io/fastpages/2022/08/20/java.html",
            "relUrl": "/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "First post",
            "content": "Post #1 . This is a test for my first post. . Hi and welcome :) . Check out my About Me to learn more about me. . This is also a test in blue font. . Why does Comic Sans get so much hate :( .",
            "url": "https://lwu1822.github.io/fastpages/markdown/2022/08/19/post-1.html",
            "relUrl": "/markdown/2022/08/19/post-1.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lwu1822.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post26": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lwu1822.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi, and welcome to my blog! . My name is Lily Wu. I’m a junior at Del Norte High School. . My interests are in STEM, which include programming, cybersecurity, and math. . I’m passionate about learning, and I love to play around with code. . In my free time, I also love to read. Feel free to give me book suggestions! :) . Contacts: . Email: lwu1822@gmail.com . Github . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lwu1822.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Vocab . Agile . Agile helps teams work on a project through working towards a plan (usually 2 week sprints), and various methods to work together, such as stand up meetings and pair programming. . Typical roles in a team might include: scrum master, DevOps, frontend and backend developer. . Ways to help a team plan: . Issues | Scrum board | . What are some things necessary of a successful team? . Creativity | Critical thinking | Communication | Collaboration through leadership | Collaboration (teamwork) | Research | Technical | . Primitives . Primitives: Includes the data types of int, double, and boolean. . Note: String is not a primitive . Basic code: . Data types: . int [var], double [var], boolean [var], and String [var] . Input: . Scanner [var] = new Scanner(System.in); : Create a scanner object with a name of [var], set it equal to System.in, which is what the user inputs on the keyboard. .",
          "url": "https://lwu1822.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Weekly Work",
          "content": "Week Assignments . 0 | First post Java PythonJupyter Notebook | . 1 | Bash: Check if tools are installed Learnings from code.org Java Primitives | . 2 | Console Menu | . 3 | Iteration MinilabFocus/Habits | .",
          "url": "https://lwu1822.github.io/fastpages/weekly-work/",
          "relUrl": "/weekly-work/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board . Unit 1: Primitive Types . Exam Weighting: 2.5%-5% . Primitives | . Unit 2: Using Objects . Exam Weighting: 5%-7.5% . Unit 3: Boolean Expressions and if Statements . Exam Weighting: 15%-17.55% . Unit 4: Iteration . Exam Weighting: 17.5%-22.5% . Unit 5: Writing Classes . Exam Weighting: 5%-7.5% . Unit 6: Array . Exam Weighting: 10%-15% . Unit 7: ArrayList . Exam Weighting: 2.5%-7.5% . Unit 8: 2D Array . Exam Weighting: 7.5%-10% . Unit 9: Inheritance . Exam Weighting: 5%-10% . Unit 10: Recursion . Exam Weighting: 5%-7.5% .",
          "url": "https://lwu1822.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  

  
      ,"page8": {
          "title": "CSA",
          "content": "Sep 14, 2022 AP FRQ . | Sep 14, 2022 Iteration with 2D array . | Sep 7, 2022 If-Else Lesson . | Sep 5, 2022 Console Menu . | Aug 28, 2022 Java Primitives . | Aug 28, 2022 Code snippets . | Aug 28, 2022 code.org Notes . | Aug 28, 2022 code.org Answers . | Aug 26, 2022 Tools . | Aug 21, 2022 Jupyter notebook post . | .",
          "url": "https://lwu1822.github.io/fastpages/t/CSA",
          "relUrl": "/t/CSA",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lwu1822.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}